#
# Copyright (c) 2023, NVIDIA CORPORATION.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

ARG CUDA_VERSION=11.8.0
FROM nvidia/cuda:${CUDA_VERSION}-devel-ubuntu20.04

ARG CUML_VERSION=24.04

# Install packages to build spark-rapids-ml
RUN apt update -y \
    && DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC apt install -y openjdk-8-jdk \
    && apt install -y git numactl software-properties-common wget zip \
    && rm -rf /var/lib/apt/lists

# Config JAVA_HOME
ENV JAVA_HOME /usr/lib/jvm/java-1.8.0-openjdk-amd64

# Install conda
ENV PATH="/root/miniconda3/bin:${PATH}"
RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-py38_4.10.3-Linux-x86_64.sh \
    && mkdir /root/.conda \
    && bash Miniconda3-py38_4.10.3-Linux-x86_64.sh -b \
    && rm -f Miniconda3-py38_4.10.3-Linux-x86_64.sh \
    && conda init

# install cuML

RUN conda install -y -c rapidsai -c conda-forge -c nvidia python=3.9 cuda-version=11.8 cuml=$CUML_VERSION \
    && conda clean --all -f -y

# install python dependencies
RUN pip install --no-cache-dir "pyspark>=3.2.1" "scikit-learn>=1.2.1" \
    && pip install --no-cache-dir "black>=23.1.0" "build>=0.10.0" "isort>=5.12.0" "mypy>=1.0.0" \
    numpydoc pydata-sphinx-theme pylint pytest "sphinx<6.0" "twine>=4.0.0"

### END OF CACHE ###

#ARG RAPIDS_ML_VER=main
#RUN git clone -b branch-$RAPIDS_ML_VER https://github.com/NVIDIA/spark-rapids-ml.git
COPY . /spark-rapids-ml
WORKDIR /spark-rapids-ml/python

# install spark-rapids-ml with requirements_dev.txt (in case it has diverged from cache)
RUN pip install --no-cache-dir -r requirements_dev.txt \
    && pip install --no-cache-dir -e .

SHELL ["conda", "run", "--no-capture-output", "-n", "base", "/bin/bash", "-c"]
