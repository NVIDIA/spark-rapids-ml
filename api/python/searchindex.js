Search.setIndex({"docnames": ["api/feature/spark_rapids_ml.feature.PCA", "api/feature/spark_rapids_ml.feature.PCAModel", "api/spark_rapids_ml.classification.LogisticRegression", "api/spark_rapids_ml.classification.LogisticRegressionModel", "api/spark_rapids_ml.classification.RandomForestClassificationModel", "api/spark_rapids_ml.classification.RandomForestClassifier", "api/spark_rapids_ml.clustering.DBSCAN", "api/spark_rapids_ml.clustering.DBSCANModel", "api/spark_rapids_ml.clustering.KMeans", "api/spark_rapids_ml.clustering.KMeansModel", "api/spark_rapids_ml.knn.ApproximateNearestNeighbors", "api/spark_rapids_ml.knn.ApproximateNearestNeighborsModel", "api/spark_rapids_ml.knn.NearestNeighbors", "api/spark_rapids_ml.knn.NearestNeighborsModel", "api/spark_rapids_ml.regression.LinearRegression", "api/spark_rapids_ml.regression.LinearRegressionModel", "api/spark_rapids_ml.regression.RandomForestRegressionModel", "api/spark_rapids_ml.regression.RandomForestRegressor", "api/spark_rapids_ml.tuning.CrossValidator", "api/spark_rapids_ml.umap.UMAP", "api/spark_rapids_ml.umap.UMAPModel", "index", "spark_rapids_ml"], "filenames": ["api/feature/spark_rapids_ml.feature.PCA.rst", "api/feature/spark_rapids_ml.feature.PCAModel.rst", "api/spark_rapids_ml.classification.LogisticRegression.rst", "api/spark_rapids_ml.classification.LogisticRegressionModel.rst", "api/spark_rapids_ml.classification.RandomForestClassificationModel.rst", "api/spark_rapids_ml.classification.RandomForestClassifier.rst", "api/spark_rapids_ml.clustering.DBSCAN.rst", "api/spark_rapids_ml.clustering.DBSCANModel.rst", "api/spark_rapids_ml.clustering.KMeans.rst", "api/spark_rapids_ml.clustering.KMeansModel.rst", "api/spark_rapids_ml.knn.ApproximateNearestNeighbors.rst", "api/spark_rapids_ml.knn.ApproximateNearestNeighborsModel.rst", "api/spark_rapids_ml.knn.NearestNeighbors.rst", "api/spark_rapids_ml.knn.NearestNeighborsModel.rst", "api/spark_rapids_ml.regression.LinearRegression.rst", "api/spark_rapids_ml.regression.LinearRegressionModel.rst", "api/spark_rapids_ml.regression.RandomForestRegressionModel.rst", "api/spark_rapids_ml.regression.RandomForestRegressor.rst", "api/spark_rapids_ml.tuning.CrossValidator.rst", "api/spark_rapids_ml.umap.UMAP.rst", "api/spark_rapids_ml.umap.UMAPModel.rst", "index.rst", "spark_rapids_ml.rst"], "titles": ["PCA", "PCAModel", "LogisticRegression", "LogisticRegressionModel", "RandomForestClassificationModel", "RandomForestClassifier", "DBSCAN", "DBSCANModel", "KMeans", "KMeansModel", "ApproximateNearestNeighbors", "ApproximateNearestNeighborsModel", "NearestNeighbors", "NearestNeighborsModel", "LinearRegression", "LinearRegressionModel", "RandomForestRegressionModel", "RandomForestRegressor", "CrossValidator", "UMAP", "UMAPModel", "Welcome to spark-rapids-ml\u2019s documentation!", "Spark Rapids ML"], "terms": {"class": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "spark_rapids_ml": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "featur": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "k": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 18], "option": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "int": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "none": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "inputcol": [0, 1, 5, 10, 11, 12, 13], "union": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "str": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "list": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "outputcol": [0, 1, 5, 19, 20], "num_work": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20], "verbos": [0, 2, 5, 6, 7, 8, 10, 12, 14, 17, 19], "bool": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "fals": [0, 2, 3, 5, 6, 7, 8, 10, 12, 14, 17, 18, 19], "kwarg": [0, 2, 5, 6, 8, 10, 12, 14, 17, 19], "ani": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "algorithm": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 18, 19], "learn": [0, 2, 6, 8, 9, 14, 19, 20], "princip": [0, 1], "compon": [0, 1], "vector": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20], "project": [0, 19], "high": [0, 19, 20], "dimension": [0, 1, 19, 20], "low": [0, 19, 20], "while": [0, 5, 17, 19, 20], "preserv": [0, 19, 20], "similar": [0, 10], "ha": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "been": [0, 18], "us": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "reduct": [0, 1, 19], "cluster": [0, 2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 19, 20, 21], "data": [0, 1, 2, 3, 5, 6, 8, 10, 11, 12, 13, 17, 18, 19, 20], "visual": [0, 19, 20], "larg": [0, 6, 7, 8, 18, 19, 20], "dataset": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "provid": [0, 8, 11, 13, 19, 20], "gpu": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "acceler": [0, 2, 5, 8, 12, 14, 17], "pyspark": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "distribut": [0, 5, 8, 12, 17], "paramet": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "number": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "equival": [0, 7, 11, 13, 20], "dimens": [0, 19, 20], "all": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "column": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "name": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "spark": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "rapid": [0, 2, 3, 5, 6, 7, 8, 10, 12, 14, 17, 19], "ml": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "support": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20], "arrai": [0, 1, 2, 3, 5, 6, 8, 10, 11, 12, 13, 14, 17, 19, 20], "columnar": [0, 2, 5, 6, 8, 10, 12, 14, 17, 19], "input": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "when": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20], "valu": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "string": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "must": [0, 1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20], "assembl": [0, 2, 5, 6, 8, 10, 12, 14, 17, 19], "1": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "type": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "numer": [0, 2, 5, 6, 8, 10, 12, 14, 17, 19], "store": [0, 1, 6, 7, 8, 9, 10, 11, 12, 13, 19, 20], "output": [0, 1, 2, 3, 4, 5, 6, 11, 13, 19, 20], "should": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 17, 18, 19, 20], "set": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "user": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "expect": [0, 6, 8, 10], "singl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "cuml": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20], "worker": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20], "where": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "each": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "correspond": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20], "one": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "task": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20], "run": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "If": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "tri": [0, 2, 5, 6, 8, 12, 14, 17, 19], "infer": [0, 2, 5, 6, 8, 12, 14, 17, 19], "e": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "from": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "environ": [0, 2, 5, 6, 8, 12, 14, 17, 19], "log": [0, 2, 5, 6, 8, 10, 12, 14, 17, 19], "level": [0, 2, 5, 6, 8, 10, 12, 14, 17, 19, 20], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "disabl": [0, 2, 5, 6, 8, 10, 12, 14, 17, 19], "messag": [0, 2, 5, 6, 8, 10, 12, 14, 17, 19], "enabl": [0, 2, 5, 6, 7, 8, 10, 12, 14, 17, 19, 20], "onli": [0, 2, 5, 6, 8, 10, 11, 12, 13, 14, 17, 18, 19], "critic": [0, 2, 5, 6, 8, 10, 12, 14, 17, 19], "2": [0, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 17, 18, 19, 20], "up": [0, 2, 5, 6, 8, 10, 11, 12, 14, 17, 19], "includ": [0, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19], "error": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "warn": [0, 2, 4, 5, 6, 8, 10, 12, 14, 16, 17, 18, 19], "4": [0, 2, 4, 5, 6, 8, 10, 12, 14, 16, 17, 18, 19], "inform": [0, 2, 4, 5, 6, 8, 10, 12, 14, 16, 17, 19], "5": [0, 1, 2, 5, 6, 8, 9, 10, 12, 14, 17, 18, 19], "true": [0, 2, 3, 5, 6, 8, 10, 12, 14, 17, 18, 19], "debug": [0, 2, 5, 6, 8, 10, 12, 14, 17, 19], "6": [0, 2, 4, 5, 6, 8, 10, 12, 14, 17, 18, 19], "trace": [0, 2, 5, 6, 8, 10, 12, 14, 17, 19], "exampl": [0, 1, 2, 5, 6, 8, 10, 11, 12, 13, 14, 17, 18, 19], "import": [0, 1, 2, 4, 5, 6, 7, 8, 10, 12, 14, 16, 17, 18, 19], "df": [0, 1, 2, 5, 6, 8, 14, 17, 19], "createdatafram": [0, 1, 2, 5, 6, 8, 10, 12, 14, 17, 18, 19], "gpu_pca": [0, 1], "setoutputcol": [0, 1, 19, 20], "pca_featur": [0, 1], "gpu_model": [0, 1, 6, 8, 10, 12], "fit": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "getk": [0, 1, 8, 9, 10, 11, 12, 13], "print": [0, 19], "mean": [0, 1, 4, 5, 8, 9, 16, 17], "pc": [0, 1], "densematrix": 0, "70710678": 0, "explained_vari": 0, "save": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 15, 16, 17, 18, 19, 20], "tmp": [0, 6, 8], "linalg": [0, 5, 6, 8, 10, 12, 14, 17, 18], "dens": [0, 2, 3, 5, 6, 8, 10, 12, 14, 17, 18, 19, 20], "setinputcol": [0, 1, 10, 11, 12, 13], "getinputcol": [0, 1, 10, 11, 12, 13], "multi": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 16, 17, 19, 20], "f1": [0, 6, 8, 10, 12], "f2": [0, 6, 8, 10, 12], "method": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "attribut": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "document": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "clear": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "param": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "reset": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20], "its": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "default": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "match": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20], "exist": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "copi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "extra": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "parammap": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "p": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20], "explainparam": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "explain": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "return": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "doc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "suppli": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "extractparammap": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "extract": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "embed": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "merg": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "them": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "flat": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "map": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "latter": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "conflict": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "order": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "dict": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "datafram": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "tupl": [0, 2, 5, 6, 8, 10, 11, 12, 13, 14, 17, 18, 19, 20], "m": [0, 2, 5, 6, 8, 10, 12, 14, 17, 18, 19], "model": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "new": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "version": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "sql": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "an": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "overrid": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "given": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "call": [0, 2, 3, 5, 6, 8, 10, 12, 14, 17, 18, 19], "transform": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "": [0, 2, 5, 6, 8, 10, 12, 14, 17, 18, 19, 20], "fitmultipl": [0, 2, 5, 6, 8, 10, 12, 14, 17, 18, 19], "sequenc": [0, 2, 5, 6, 8, 10, 12, 14, 17, 18, 19], "iter": [0, 2, 3, 5, 6, 8, 9, 10, 12, 14, 15, 17, 18, 19], "_cumlmodel": [0, 2, 5, 6, 8, 10, 12, 14, 17, 19], "multipl": [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20], "pass": [0, 2, 5, 6, 8, 10, 11, 12, 13, 14, 17, 18, 19, 20], "collect": [0, 2, 5, 6, 8, 10, 12, 14, 17, 18, 19], "abc": [0, 2, 5, 6, 8, 10, 12, 14, 17, 18, 19], "A": [0, 2, 5, 6, 8, 10, 11, 12, 13, 14, 17, 18, 19], "_fitmultipleiter": [0, 2, 5, 6, 8, 10, 12, 14, 17, 18, 19], "thread": [0, 2, 5, 6, 8, 10, 12, 14, 17, 18, 19], "safe": [0, 2, 5, 6, 8, 10, 12, 14, 17, 18, 19], "which": [0, 2, 4, 5, 6, 8, 10, 12, 14, 17, 18, 19, 20], "contain": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "next": [0, 2, 5, 6, 8, 10, 12, 14, 17, 18, 19], "modeliter": [0, 2, 5, 6, 8, 10, 12, 14, 17, 18, 19], "index": [0, 2, 5, 6, 8, 10, 12, 14, 17, 18, 19, 21], "wa": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19], "mai": [0, 2, 3, 5, 6, 8, 10, 12, 14, 17, 18, 19, 20], "sequenti": [0, 2, 5, 6, 8, 10, 12, 14, 17, 18, 19], "get": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "getordefault": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "t": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "rais": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "neither": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "getoutputcol": [0, 1, 19, 20], "getparam": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "paramnam": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "hasdefault": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "check": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "whether": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "hasparam": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "test": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "instanc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "isdefin": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "explicitli": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "isset": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "classmethod": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 15, 16, 17, 18, 19, 20], "load": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 15, 16, 17, 18, 19, 20], "path": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 15, 16, 17, 18, 19, 20], "rl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 15, 16, 17, 19, 20], "read": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 15, 16, 17, 18, 19, 20], "shortcut": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 15, 16, 17, 18, 19, 20], "mlreader": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 15, 16, 17, 18, 19, 20], "write": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 15, 16, 17, 18, 19, 20], "ar": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20], "setk": [0, 8, 10, 11, 12, 13], "mlwriter": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 15, 16, 17, 18, 19, 20], "cuml_param": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20], "dictionari": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20], "intend": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20], "underli": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20], "parent": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "undefin": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "implement": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "dir": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "mean_": 1, "float": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20], "components_": 1, "explained_variance_ratio_": 1, "singular_values_": 1, "n_col": [1, 3, 4, 7, 9, 15, 16, 20], "dtype": [1, 3, 4, 7, 9, 15, 16, 19, 20], "appli": [1, 2, 6, 8, 19, 20], "note": [1, 2, 3, 4, 5, 10, 11, 12, 13, 14, 17, 18], "zero": [1, 3], "center": [1, 8, 9, 10, 19], "ensur": [1, 10], "pca": 1, "work": [1, 5, 17], "properli": 1, "doe": [1, 6, 7], "automat": [1, 2, 4, 5, 10, 12, 14, 16, 17, 19, 20], "remov": 1, "so": [1, 5, 17, 19, 20], "py": [1, 18], "standardscal": 1, "befor": [1, 2, 3, 14, 15], "invok": 1, "can": [1, 2, 4, 5, 6, 7, 8, 9, 11, 13, 14, 17, 18, 19, 20], "three": [1, 11, 13], "differ": [1, 19, 20], "format": [1, 11, 13], "scalar": 1, "reduced_df": 1, "show": [1, 2, 6, 8, 10, 12, 14, 19], "414213562373095": 1, "cpu": [1, 3, 4, 7, 9, 11, 12, 13, 15, 16, 20], "explainedvari": 1, "proport": 1, "varianc": [1, 16, 17], "matrix": 1, "classif": [2, 3, 4, 5, 16, 17, 18, 21], "featurescol": [2, 3, 4, 5, 6, 7, 8, 9, 14, 15, 16, 17, 19, 20], "labelcol": [2, 3, 4, 5, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20], "label": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "predictioncol": [2, 3, 4, 5, 6, 7, 8, 9, 14, 15, 16, 17], "predict": [2, 3, 4, 5, 6, 7, 8, 9, 14, 15, 16, 17], "probabilitycol": [2, 3, 4, 5], "probabl": [2, 3, 4, 5], "rawpredictioncol": [2, 3, 4, 5], "rawpredict": [2, 5], "maxit": [2, 3, 8, 9, 14, 15], "100": [2, 14, 19, 20], "regparam": [2, 3, 14, 15], "elasticnetparam": [2, 3, 14, 15], "tol": [2, 3, 8, 9, 14, 15], "1e": [2, 8, 14], "06": [2, 14], "fitintercept": [2, 3, 14, 15], "standard": [2, 3, 14, 15], "enable_sparse_data_optim": [2, 3], "machin": [2, 14], "respons": [2, 14], "y": [2, 11, 13, 14], "sigmoid": 2, "softmax": 2, "more": [2, 6, 7, 8, 10, 19, 20], "than": [2, 4, 5, 6, 7, 10, 16, 17, 19, 20], "function": [2, 3, 6, 8, 11, 13, 14, 15, 19, 20], "linear": [2, 14, 19], "combin": [2, 14, 19, 20], "x": [2, 11, 13, 14, 19], "It": [2, 5, 6, 8, 10, 14, 17, 18], "base": [2, 3, 5, 6, 7, 14, 17, 19, 20], "python": [2, 5, 14, 17], "librari": [2, 5, 6, 7, 14, 17], "pipelin": [2, 5, 14, 17], "meta": [2, 5, 14, 17], "like": [2, 5, 14, 17], "crossvalid": [2, 5, 14, 17], "trainvalidationsplit": [2, 5, 14, 17], "onevsrest": [2, 5, 14, 17], "regular": [2, 3, 14, 15], "l2": [2, 3, 10, 12, 14, 15, 19, 20], "ridg": [2, 14], "regress": [2, 4, 5, 14, 15, 16, 17, 21], "l1": [2, 3, 14, 15, 19, 20], "lasso": [2, 14], "elast": [2, 14], "net": [2, 14], "most": [2, 5, 14, 17], "both": [2, 5, 14, 17, 19, 20], "And": [2, 5, 14, 17], "raw": [2, 3, 4, 5], "current": [2, 5, 10, 11, 12, 13, 14], "equal": [2, 5], "maximum": [2, 4, 5, 6, 7, 8, 16, 17], "l": [2, 14, 15], "bfg": [2, 14, 15], "elasticnet": [2, 3, 14, 15], "mix": [2, 3, 14, 15], "rang": [2, 3, 4, 5, 14, 15, 16, 17, 18, 19, 20], "For": [2, 3, 5, 14, 15, 17, 18, 19, 20], "alpha": [2, 3, 14, 15], "penalti": [2, 3, 14, 15], "converg": [2, 3, 8, 9, 14, 15], "toler": [2, 3, 8, 9, 14, 15], "boolean": [2, 6], "vectorudt": [2, 3], "reli": 2, "decid": 2, "spars": [2, 3, 5, 14, 17, 19, 20], "first": [2, 3, 19], "densevector": [2, 3], "sparsevector": [2, 3], "alwai": [2, 3], "favor": [2, 3], "major": [2, 3], "intercept": [2, 3, 14, 15], "term": [2, 3, 14, 15, 19, 20], "train": [2, 3, 4, 5, 7, 9, 10, 14, 15, 16, 17, 18, 19, 20], "schema": [2, 10, 12, 19], "lr_estim": 2, "setfeaturescol": [2, 3, 4, 5, 6, 7, 8, 9, 14, 15, 16, 17, 19, 20], "logisticregression_a757215437b0": 2, "setlabelcol": [2, 3, 4, 5, 14, 15, 16, 17, 19, 20], "lr_model": [2, 14], "coeffici": [2, 3, 14, 15], "7148": 2, "8": [2, 6, 8, 18, 19], "543887375367376e": 2, "09": 2, "getelasticnetparam": [2, 3, 14, 15], "getfeaturescol": [2, 3, 4, 5, 6, 7, 8, 9, 14, 15, 16, 17, 19, 20], "getfitintercept": [2, 3, 14, 15], "getlabelcol": [2, 3, 4, 5, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20], "getmaxit": [2, 3, 8, 9, 14, 15], "getpredictioncol": [2, 3, 4, 7, 8, 9, 14, 15, 16], "getprobabilitycol": [2, 3, 4, 5], "getrawpredictioncol": [2, 3, 4, 5], "getregparam": [2, 3, 14, 15], "getstandard": [2, 3, 14, 15], "gettol": [2, 3, 8, 9, 14, 15], "setelasticnetparam": [2, 14], "_logisticregressioncumlparam": [2, 3], "featurecol": [2, 3, 4, 5, 14, 15, 16, 17], "setfitintercept": 2, "setmaxit": [2, 8, 14], "setpredictioncol": [2, 3, 4, 5, 6, 7, 8, 9, 14, 15, 16, 17], "setprobabilitycol": [2, 3, 4, 5], "setrawpredictioncol": [2, 3, 4, 5], "setregparam": [2, 14], "settol": [2, 8, 14], "activ": [2, 3], "optim": [2, 3, 14, 15, 19, 20], "estim": [2, 3, 4, 5, 11, 13, 16, 18], "convert": [2, 3, 11, 12, 13], "backend": [2, 3], "determin": [2, 3, 19, 20], "creat": [2, 3, 8, 9, 18], "max": [2, 3, 4, 5, 8, 9, 14, 15, 16, 17], "condit": [2, 3, 4, 5], "Not": [2, 3, 4, 5], "well": [2, 3, 4, 5, 17], "calibr": [2, 3, 4, 5], "These": [2, 3, 4, 5, 16], "treat": [2, 3, 4, 5], "confid": [2, 3, 4, 5], "precis": [2, 3, 4, 5, 19, 20], "coef_": [3, 15], "intercept_": [3, 15], "classes_": 3, "num_it": 3, "object": 3, "logisticregress": 3, "evalu": [3, 4, 15, 18, 19, 20], "logisticregressionsummari": 3, "doesn": [3, 9], "fall": [3, 9], "back": [3, 9], "sampl": [3, 4, 5, 6, 7, 9, 15, 16, 17, 19, 20], "predictprob": [3, 4], "predictraw": [3, 4], "possibl": [3, 4], "coefficientmatrix": 3, "densecoefficientmatrix": 3, "compress": 3, "mani": [3, 5, 17, 19, 20], "sinc": [3, 15, 19, 20], "avail": [3, 5, 17, 18], "hassummari": [3, 4, 9, 15], "indic": [3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 19, 20], "summari": [3, 4, 9, 15], "interceptvector": 3, "numclass": [3, 4], "numfeatur": [3, 4, 7, 9, 14, 15, 16, 17], "unknown": [3, 4, 7, 9, 15, 16], "accuraci": [3, 19, 20], "recal": 3, "histori": 3, "total": [3, 4, 5, 16, 17], "except": [3, 18], "thrown": 3, "trainingsummari": 3, "treelite_model": [4, 16], "model_json": [4, 16], "num_class": 4, "randomforestclassifi": [4, 18], "binaryrandomforestclassificationsummari": 4, "randomforestclassificationsummari": 4, "getbootstrap": [4, 5, 16, 17], "bootstrap": [4, 5, 16, 17], "getfeaturesubsetstrategi": [4, 5, 16, 17], "featuresubsetstrategi": [4, 5, 16, 17], "getimpur": [4, 5, 16, 17], "impur": [4, 5, 16, 17], "getmaxbin": [4, 5, 16, 17], "maxbin": [4, 5, 16, 17, 18], "getmaxdepth": [4, 5, 16, 17], "maxdepth": [4, 5, 16, 17], "getmininstancespernod": [4, 5, 16, 17], "mininstancespernod": [4, 5, 16, 17], "getse": [4, 5, 8, 9, 16, 17, 18], "seed": [4, 5, 8, 9, 16, 17, 18, 19, 20], "predictleaf": [4, 16], "leav": [4, 16], "_rfclassifierparam": [4, 5], "build": [4, 5, 10, 16, 17, 18], "tree": [4, 5, 16, 17], "featureimport": [4, 16], "consid": [4, 5, 6, 7, 16, 17], "split": [4, 5, 16, 17, 18], "node": [4, 5, 16, 17, 19, 20], "auto": [4, 5, 14, 15, 16, 17], "choos": [4, 5, 8, 9, 16, 17], "numtre": [4, 5, 16, 17], "forest": [4, 5, 16, 17], "sqrt": [4, 5, 16, 17], "onethird": [4, 5, 16, 17], "log2": [4, 5, 16, 17], "n": [4, 5, 6, 7, 16, 17], "getnumtre": [4, 5, 16, 17], "ensembl": [4, 5, 16, 17], "criterion": [4, 5, 8, 16, 17], "gain": [4, 5, 16, 17], "calcul": [4, 5, 6, 7, 8, 16, 17], "case": [4, 5, 14, 16, 17], "insensit": [4, 5, 16, 17], "entropi": [4, 5], "gini": [4, 5], "bin": [4, 5, 16, 17], "discret": [4, 5, 16, 17], "continu": [4, 5, 16, 17], "categori": [4, 5, 16, 17], "categor": [4, 5, 16, 17], "depth": [4, 5, 16, 17], "g": [4, 5, 11, 13, 16, 17, 18], "leaf": [4, 5, 16, 17], "intern": [4, 5, 6, 16, 17], "30": [4, 5, 10, 16, 17], "minimum": [4, 5, 16, 17, 19, 20], "child": [4, 5, 16, 17], "have": [4, 5, 10, 16, 17, 19, 20], "after": [4, 5, 8, 16, 17, 18], "caus": [4, 5, 16, 17, 18, 19, 20], "left": [4, 5, 16, 17], "right": [4, 5, 16, 17], "fewer": [4, 5, 16, 17], "discard": [4, 5, 16, 17], "invalid": [4, 5, 16, 17], "take": [4, 5, 12, 17, 19, 20], "random": [4, 5, 8, 9, 16, 17, 18, 19, 20], "supportedfeaturesubsetstrategi": [4, 5, 16, 17], "supportedimpur": [4, 5, 16, 17], "todebugstr": [4, 16], "full": [4, 16], "descript": [4, 16], "totalnumnod": [4, 16], "sum": [4, 16], "over": [4, 16, 18], "treeweight": [4, 16], "weight": [4, 16, 19, 20], "null": [4, 16], "32": [5, 17], "20": [5, 8, 17], "n_stream": [5, 17], "min_samples_split": [5, 17], "max_sampl": [5, 17], "max_leav": [5, 17], "min_impurity_decreas": [5, 17], "max_batch_s": [5, 17], "4096": [5, 17], "classifi": 5, "decis": [5, 17], "binari": 5, "multiclass": 5, "embarrassingli": [5, 17], "parallel": [5, 8, 9, 17, 18, 19, 20], "approach": [5, 17], "being": [5, 17, 19, 20], "built": [5, 10, 17], "w": [5, 17], "simpli": [5, 17], "local": [5, 10, 17, 19, 20], "In": [5, 8, 10, 17, 19, 20], "partit": [5, 8, 10, 17, 18], "subset": [5, 17], "gener": [5, 8, 17, 18, 19, 20], "requir": [5, 17, 19, 20], "shuffl": [5, 17], "advanc": [5, 17], "greater": [5, 17, 19, 20], "per": [5, 17, 19, 20], "row": [5, 11, 13, 17, 19], "ratio": [5, 17], "control": [5, 17, 19, 20], "replac": [5, 17], "whole": [5, 17], "stream": [5, 17], "pleas": [5, 6, 7, 17], "bug": [5, 17], "see": [5, 11, 13, 17], "rapidsai": [5, 17], "5402": [5, 17], "repres": [5, 11, 13, 17], "fraction": [5, 17, 19, 20], "ceil": [5, 17], "n_row": [5, 17], "soft": [5, 17], "constraint": [5, 17], "unlimit": [5, 17], "decreas": [5, 17], "process": [5, 10, 17, 19, 20], "batch": [5, 6, 7, 17], "numpi": [5, 17], "allclos": [5, 17], "stringindex": 5, "si_model": 5, "td": 5, "randomforestclassificationmodel": 5, "rf": [5, 17], "42": [5, 17, 19], "randomforestclassificationmodel_": 5, "test0": [5, 17], "result": [5, 10, 11, 13, 14, 17, 19, 20], "head": [5, 17], "test1": [5, 17], "rfc_path": 5, "temp_path": [5, 14, 17], "rfc": [5, 18], "rf2": [5, 17], "model_path": [5, 14, 17, 18], "rfc_model": 5, "model2": [5, 14, 17], "setbootstrap": [5, 17], "setfeaturesubsetstrategi": [5, 17], "setimpur": [5, 17], "setmaxbin": [5, 17], "setmaxdepth": [5, 17], "setmininstancespernod": [5, 17], "setnumtre": [5, 17], "setse": [5, 8, 17, 18], "ep": [6, 7], "min_sampl": [6, 7], "metric": [6, 7, 10, 11, 18, 19, 20], "euclidean": [6, 10, 11, 12, 13, 19, 20], "brute": 6, "max_mbytes_per_batch": [6, 7], "calc_core_sample_indic": [6, 7], "densiti": 6, "spatial": 6, "applic": 6, "nois": 6, "non": [6, 18, 19], "parametr": 6, "group": [6, 7], "point": [6, 7, 8, 9, 19, 20], "close": 6, "other": [6, 10, 11, 12, 13], "form": 6, "mark": 6, "far": 6, "awai": 6, "exclud": 6, "distanc": [6, 7, 10, 11, 12, 13, 19, 20], "between": [6, 7, 19, 20], "thei": [6, 7, 14], "resid": [6, 7], "same": [6, 7, 19, 20], "neighborhood": [6, 7, 19, 20], "core": [6, 7], "itself": [6, 7, 11, 13], "cosin": [6, 19, 20], "precomput": [6, 7, 19, 20], "mode": [6, 7], "sklearn": [6, 7], "those": [6, 7, 10], "instead": [6, 7], "rbc": 6, "nearest": [6, 7, 8, 10, 11, 12, 13, 19, 20, 21], "neighbor": [6, 7, 10, 11, 12, 13, 19, 20, 21], "comput": [6, 7, 12], "size": [6, 7, 19, 20], "megabyt": [6, 7], "pairwis": [6, 7, 19, 20], "trade": [6, 7], "off": [6, 7], "runtim": [6, 7], "memori": [6, 7, 19, 20], "usag": [6, 7, 19, 20], "make": [6, 7], "tractabl": [6, 7], "you": [6, 7], "experienc": [6, 7], "out": [6, 7, 18, 19, 20], "your": [6, 7], "devic": [6, 7, 19], "avoid": [6, 7], "unnecessari": [6, 7], "kernel": [6, 7], "launch": [6, 7], "idcol": [6, 7, 10, 11, 12, 13], "unique_id": [6, 7, 10, 11, 12, 13], "uniqu": [6, 10, 12], "id": [6, 7, 10, 11, 12, 13], "reveal": 6, "need": 6, "origin": 6, "9": [6, 8, 19], "gpu_dbscan": 6, "dbscan_model": 6, "getalgorithm": [6, 10, 11], "getcalccoresampleindic": 6, "getep": 6, "getidcol": [6, 7, 10, 11, 12, 13], "getmaxmbytesperbatch": 6, "getmetr": [6, 10, 11, 19, 20], "getminsampl": 6, "setalgorithm": [6, 10, 11], "setcalccoresampleindic": 6, "setep": 6, "setidcol": [6, 7, 10, 11, 12, 13], "ad": [6, 7, 10, 11, 12, 13], "specifi": [6, 7, 10, 11, 12, 13, 18, 19, 20], "associ": [6, 7, 10, 11, 12, 13], "setmaxmbytesperbatch": 6, "setmetr": [6, 10, 11, 19, 20], "setminsampl": 6, "dbscan": 7, "initmod": [8, 9], "0001": 8, "fix": 8, "denot": 8, "initi": [8, 9, 19, 20], "assign": [8, 19, 20], "everi": [8, 10], "often": [8, 19, 20], "deal": 8, "select": [8, 18, 19, 20], "centroid": 8, "300": 8, "help": 8, "accur": [8, 19, 20], "start": 8, "earli": 8, "stop": 8, "do": [8, 18, 19, 20], "chang": 8, "much": 8, "gpu_kmean": 8, "10": [8, 10, 18, 19], "kmeans_5606dff6b4fa": 8, "clustercent": [8, 9], "kmeans_model": 8, "getinitmod": [8, 9], "either": [8, 9, 19, 20], "variant": [8, 9], "cluster_centers_": 9, "kmean": [9, 10], "refer": 9, "ndarrai": 9, "knn": [10, 11, 12, 13, 19, 20], "ivfflat": 10, "algoparam": [10, 11], "retriev": [10, 11, 12, 13], "approxim": [10, 11, 19, 20], "ann": [10, 11], "item": [10, 11, 12, 13], "queri": [10, 11, 12, 13], "kei": 10, "api": [10, 15], "nearestneighbor": [10, 13], "exact": [10, 12, 13], "ivfpq": 10, "closest": 10, "phase": 10, "probe": 10, "end": 10, "top": [10, 19], "independ": 10, "maxrecordsperbatch": 10, "arrow": 10, "item_df": [10, 11, 12, 13], "broadcast": [10, 20], "individu": 10, "topk": [10, 12], "aggreg": [10, 12], "obtain": [10, 19, 20], "global": [10, 19, 20], "later": 10, "configur": 10, "construct": [10, 19], "maxrecordperbatch": 10, "nlist": 10, "nprobe": 10, "sqeuclidean": [10, 19, 20], "inner_product": 10, "identifi": [10, 11, 12, 13], "40": 10, "50": 10, "data_df": [10, 11, 12, 13], "repartit": 10, "11": [10, 19], "query_df": [10, 11, 12, 13], "gpu_knn": [10, 12], "setalgoparam": [10, 11], "knn_df": [10, 11, 12, 13], "kneighbor": [10, 11, 12, 13], "query_id": [10, 12], "4142134": 10, "14": [10, 19], "142137": 10, "knnjoin_df": [10, 11, 12, 13], "approxsimilarityjoin": [10, 11], "distcol": [10, 11, 12, 13], "euclideandist": [10, 12], "getalgoparam": [10, 11], "search": [10, 11, 19, 20, 21], "item_df_withid": [11, 13], "approximatenearestneighbor": 11, "relationship": [11, 13], "asymmetr": [11, 13], "respect": [11, 13], "necessarili": [11, 13], "struct": [11, 13], "field": [11, 13], "similarli": [11, 13], "v1": [11, 13], "v2": [11, 13], "dist": [11, 13], "item_vector": [11, 13], "query_vector": [11, 13], "through": [11, 13], "measur": [11, 13], "here": [11, 13], "target": [11, 13], "float32": [11, 13, 19], "monoton": [11, 13], "increas": [11, 13, 19, 20], "main": 12, "accept": 12, "leverag": 12, "care": 12, "commun": 12, "howev": 12, "also": [12, 19, 20], "known": 12, "dure": [12, 18, 19, 20], "4142135": 12, "exactnearestneighborsjoin": [12, 13], "processed_item_df": 13, "label_isdata": 13, "label_isqueri": 13, "solver": [14, 15], "loss": [14, 15], "squarederror": [14, 15], "predictor": 14, "ordinari": 14, "least": 14, "squar": 14, "empti": 14, "normal": [14, 15], "eig": 14, "otherwis": 14, "elastnetparam": 14, "aka": 14, "linearregressionmodel": 14, "lr": 14, "newpredict": 14, "000000000000001": 14, "4999999999999996": 14, "lr_path": 14, "lr2": 14, "getloss": [14, 15], "getsolv": [14, 15], "setloss": 14, "setstandard": 14, "huber": [14, 15], "linearregress": 15, "linearregressionsummari": 15, "scale": [15, 19, 20], "just": 15, "compat": 15, "randomforestregressor": 16, "regressor": 17, "randomforestregressionmodel": 17, "randomforestregressor_": 17, "rfr_path": 17, "rfr": 17, "rfr_model": 17, "tune": [18, 21], "estimatorparammap": 18, "numfold": 18, "collectsubmodel": 18, "foldcol": 18, "fold": 18, "cross": 18, "valid": 18, "perform": [18, 19, 20], "overlap": 18, "randomli": 18, "separ": 18, "pair": 18, "exactli": 18, "onc": 18, "paramgridbuild": 18, "crossvalidatormodel": 18, "multiclassclassificationevalu": 18, "tempfil": 18, "grid": 18, "addgrid": 18, "16": [18, 19], "cv": 18, "cvmodel": 18, "getnumfold": 18, "avgmetr": 18, "mkdtemp": 18, "cvmodelread": 18, "uid": 18, "some": 18, "deep": 18, "getcollectsubmodel": 18, "getestim": 18, "getestimatorparammap": 18, "getevalu": 18, "getfoldcol": 18, "getparallel": 18, "crossvalidatorread": 18, "setcollectsubmodel": 18, "setestim": 18, "setestimatorparammap": 18, "setevalu": 18, "setfoldcol": 18, "setnumfold": 18, "setparallel": 18, "setparam": 18, "self": 18, "sub": [18, 19, 20], "best": 18, "oom": 18, "driver": 18, "hyper": 18, "maxim": 18, "won": 18, "integ": [18, 19, 20], "throw": 18, "n_neighbor": [19, 20], "15": 19, "n_compon": [19, 20], "n_epoch": [19, 20], "learning_r": [19, 20], "init": [19, 20], "spectral": [19, 20], "min_dist": [19, 20], "spread": [19, 20], "set_op_mix_ratio": [19, 20], "local_connect": [19, 20], "repulsion_strength": [19, 20], "negative_sample_r": [19, 20], "transform_queue_s": [19, 20], "b": [19, 20], "precomputed_knn": [19, 20], "random_st": [19, 20], "sample_fract": [19, 20], "uniform": 19, "manifold": [19, 20], "techniqu": 19, "find": 19, "graph": [19, 20], "represent": 19, "space": [19, 20], "distributedli": 19, "larger": [19, 20], "view": [19, 20], "smaller": [19, 20], "emb": [19, 20], "easi": [19, 20], "reason": [19, 20], "cityblock": [19, 20], "taxicab": [19, 20], "manhattan": [19, 20], "canberra": [19, 20], "minkowski": [19, 20], "chebyshev": [19, 20], "linf": [19, 20], "correl": [19, 20], "helling": [19, 20], "ham": [19, 20], "jaccard": [19, 20], "argument": [19, 20], "via": [19, 20], "metric_kwd": [19, 20], "epoch": [19, 20], "200": [19, 20], "500": [19, 20], "small": [19, 20], "rate": [19, 20], "how": [19, 20], "fuzzi": [19, 20], "skeleton": [19, 20], "posit": [19, 20], "effect": [19, 20], "clump": [19, 20], "nearbi": [19, 20], "drawn": [19, 20], "closer": [19, 20], "togeth": [19, 20], "even": [19, 20], "dispers": [19, 20], "rel": [19, 20], "interpol": [19, 20], "intersect": [19, 20], "oper": [19, 20], "simplici": [19, 20], "product": [19, 20], "norm": [19, 20], "pure": [19, 20], "connect": [19, 20], "assum": [19, 20], "higher": [19, 20], "becom": [19, 20], "practic": [19, 20], "intrins": [19, 20], "neg": [19, 20], "repuls": [19, 20], "forc": [19, 20], "cost": [19, 20], "slightli": [19, 20], "aggress": [19, 20], "slower": [19, 20], "specif": [19, 20], "host": 19, "shape": [19, 20], "n_sampl": [19, 20], "prefer": [19, 20], "csr": [19, 20], "coo": [19, 20], "allow": [19, 20], "outsid": [19, 20], "custom": [19, 20], "embeed": [19, 20], "randomst": 19, "unfortun": [19, 20], "achiev": [19, 20], "amount": [19, 20], "stage": [19, 20], "come": [19, 20], "expens": [19, 20], "addit": [19, 20], "made": [19, 20], "without": [19, 20], "determinist": [19, 20], "across": [19, 20], "session": [19, 20], "consist": [19, 20], "reproduc": [19, 20], "digit": [19, 20], "time": [19, 20], "done": [19, 20], "veri": [19, 20], "subsampl": [19, 20], "within": [19, 20], "execut": [19, 20], "faster": [19, 20], "supervis": 19, "taken": 19, "account": 19, "make_blob": 19, "cupi": 19, "cp": 19, "_": 19, "cluster_std": 19, "np": 19, "feature_col": 19, "f": 19, "c": 19, "tolist": 19, "join": 19, "withcolumn": 19, "drop": 19, "5578103": 19, "300072": 19, "220654": 19, "5838223": 19, "2613218": 19, "295866": 19, "3326015": 19, "6483326": 19, "43685": 19, "906736": 19, "1148645": 19, "9800974": 19, "67569": 19, "020592": 19, "748023": 19, "6454153": 19, "095899": 19, "9839406": 19, "7": 19, "954683": 19, "15784": 19, "5075264": 19, "538241": 19, "740191": 19, "0490158": 19, "1693997": 19, "9449835": 19, "142317": 19, "207676": 19, "202615": 19, "1319785": 19, "3837125": 19, "826891": 19, "35618": 19, "582829": 19, "5456663": 19, "5012932": 19, "2080708": 19, "5172815": 19, "5741744": 19, "291008": 19, "317718": 19, "3419528": 19, "832837": 19, "5362573": 19, "9357944": 19, "65039": 19, "438729": 19, "858565": 19, "9733503": 19, "99863": 19, "umap_estim": 19, "umap_model": 19, "topanda": 19, "asarrai": 19, "to_list": 19, "378397": 19, "504756": 19, "12": 19, "531521": 19, "13": 19, "946098": 19, "990916": 19, "049594": 19, "175631": 19, "4849815": 19, "065363": 19, "75355": 19, "8876278": 19, "0889664": 19, "6557462": 19, "17": 19, "965862": 19, "220764": 19, "4817486": 19, "476492": 19, "80965": 19, "823325": 19, "71719": 19, "geta": [19, 20], "getb": [19, 20], "getinit": [19, 20], "getlearningr": [19, 20], "getlocalconnect": [19, 20], "getmindist": [19, 20], "getncompon": [19, 20], "getnepoch": [19, 20], "getnneighbor": [19, 20], "getnegativesampler": [19, 20], "getprecomputedknn": [19, 20], "getrandomst": [19, 20], "getrepulsionstrength": [19, 20], "getsamplefract": [19, 20], "getsetopmixratio": [19, 20], "getspread": [19, 20], "gettransformqueues": [19, 20], "seta": [19, 20], "setb": [19, 20], "setinit": [19, 20], "setlearningr": [19, 20], "setlocalconnect": [19, 20], "setmindist": [19, 20], "setncompon": [19, 20], "setnepoch": [19, 20], "setnneighbor": [19, 20], "setnegativesampler": [19, 20], "setprecomputedknn": [19, 20], "setrandomst": [19, 20], "setrepulsionstrength": [19, 20], "setsamplefract": [19, 20], "setsetopmixratio": [19, 20], "setspread": [19, 20], "settransformqueues": [19, 20], "umap": [20, 21], "embedding_": 20, "raw_data_": 20, "raw_data": 20, "page": 21}, "objects": {"spark_rapids_ml.classification": [[2, 0, 1, "", "LogisticRegression"], [3, 0, 1, "", "LogisticRegressionModel"], [4, 0, 1, "", "RandomForestClassificationModel"], [5, 0, 1, "", "RandomForestClassifier"]], "spark_rapids_ml.classification.LogisticRegression": [[2, 1, 1, "", "clear"], [2, 1, 1, "", "copy"], [2, 2, 1, "", "cuml_params"], [2, 2, 1, "", "elasticNetParam"], [2, 2, 1, "", "enable_sparse_data_optim"], [2, 1, 1, "", "explainParam"], [2, 1, 1, "", "explainParams"], [2, 1, 1, "", "extractParamMap"], [2, 2, 1, "", "featuresCol"], [2, 2, 1, "", "featuresCols"], [2, 1, 1, "", "fit"], [2, 2, 1, "", "fitIntercept"], [2, 1, 1, "", "fitMultiple"], [2, 1, 1, "", "getElasticNetParam"], [2, 1, 1, "", "getFeaturesCol"], [2, 1, 1, "", "getFeaturesCols"], [2, 1, 1, "", "getFitIntercept"], [2, 1, 1, "", "getLabelCol"], [2, 1, 1, "", "getMaxIter"], [2, 1, 1, "", "getOrDefault"], [2, 1, 1, "", "getParam"], [2, 1, 1, "", "getPredictionCol"], [2, 1, 1, "", "getProbabilityCol"], [2, 1, 1, "", "getRawPredictionCol"], [2, 1, 1, "", "getRegParam"], [2, 1, 1, "", "getStandardization"], [2, 1, 1, "", "getTol"], [2, 1, 1, "", "hasDefault"], [2, 1, 1, "", "hasParam"], [2, 1, 1, "", "isDefined"], [2, 1, 1, "", "isSet"], [2, 2, 1, "", "labelCol"], [2, 1, 1, "", "load"], [2, 2, 1, "", "maxIter"], [2, 2, 1, "", "num_workers"], [2, 2, 1, "", "params"], [2, 2, 1, "", "predictionCol"], [2, 2, 1, "", "probabilityCol"], [2, 2, 1, "", "rawPredictionCol"], [2, 1, 1, "", "read"], [2, 2, 1, "", "regParam"], [2, 1, 1, "", "save"], [2, 1, 1, "", "set"], [2, 1, 1, "", "setElasticNetParam"], [2, 1, 1, "", "setFeaturesCol"], [2, 1, 1, "", "setFeaturesCols"], [2, 1, 1, "", "setFitIntercept"], [2, 1, 1, "", "setLabelCol"], [2, 1, 1, "", "setMaxIter"], [2, 1, 1, "", "setPredictionCol"], [2, 1, 1, "", "setProbabilityCol"], [2, 1, 1, "", "setRawPredictionCol"], [2, 1, 1, "", "setRegParam"], [2, 1, 1, "", "setTol"], [2, 2, 1, "", "standardization"], [2, 2, 1, "", "tol"], [2, 1, 1, "", "write"]], "spark_rapids_ml.classification.LogisticRegressionModel": [[3, 1, 1, "", "clear"], [3, 2, 1, "", "coefficientMatrix"], [3, 2, 1, "", "coefficients"], [3, 1, 1, "", "copy"], [3, 1, 1, "", "cpu"], [3, 2, 1, "", "cuml_params"], [3, 2, 1, "", "elasticNetParam"], [3, 2, 1, "", "enable_sparse_data_optim"], [3, 1, 1, "", "evaluate"], [3, 1, 1, "", "explainParam"], [3, 1, 1, "", "explainParams"], [3, 1, 1, "", "extractParamMap"], [3, 2, 1, "", "featuresCol"], [3, 2, 1, "", "featuresCols"], [3, 2, 1, "", "fitIntercept"], [3, 1, 1, "", "getElasticNetParam"], [3, 1, 1, "", "getFeaturesCol"], [3, 1, 1, "", "getFeaturesCols"], [3, 1, 1, "", "getFitIntercept"], [3, 1, 1, "", "getLabelCol"], [3, 1, 1, "", "getMaxIter"], [3, 1, 1, "", "getOrDefault"], [3, 1, 1, "", "getParam"], [3, 1, 1, "", "getPredictionCol"], [3, 1, 1, "", "getProbabilityCol"], [3, 1, 1, "", "getRawPredictionCol"], [3, 1, 1, "", "getRegParam"], [3, 1, 1, "", "getStandardization"], [3, 1, 1, "", "getTol"], [3, 1, 1, "", "hasDefault"], [3, 1, 1, "", "hasParam"], [3, 2, 1, "", "hasSummary"], [3, 2, 1, "", "intercept"], [3, 2, 1, "", "interceptVector"], [3, 1, 1, "", "isDefined"], [3, 1, 1, "", "isSet"], [3, 2, 1, "", "labelCol"], [3, 1, 1, "", "load"], [3, 2, 1, "", "maxIter"], [3, 2, 1, "", "numClasses"], [3, 2, 1, "", "numFeatures"], [3, 2, 1, "", "num_workers"], [3, 2, 1, "", "params"], [3, 1, 1, "", "predict"], [3, 1, 1, "", "predictProbability"], [3, 1, 1, "", "predictRaw"], [3, 2, 1, "", "predictionCol"], [3, 2, 1, "", "probabilityCol"], [3, 2, 1, "", "rawPredictionCol"], [3, 1, 1, "", "read"], [3, 2, 1, "", "regParam"], [3, 1, 1, "", "save"], [3, 1, 1, "", "set"], [3, 1, 1, "", "setFeaturesCol"], [3, 1, 1, "", "setFeaturesCols"], [3, 1, 1, "", "setLabelCol"], [3, 1, 1, "", "setPredictionCol"], [3, 1, 1, "", "setProbabilityCol"], [3, 1, 1, "", "setRawPredictionCol"], [3, 2, 1, "", "standardization"], [3, 2, 1, "", "summary"], [3, 2, 1, "", "tol"], [3, 1, 1, "", "transform"], [3, 1, 1, "", "write"]], "spark_rapids_ml.classification.RandomForestClassificationModel": [[4, 2, 1, "", "bootstrap"], [4, 1, 1, "", "clear"], [4, 1, 1, "", "copy"], [4, 1, 1, "", "cpu"], [4, 2, 1, "", "cuml_params"], [4, 1, 1, "", "evaluate"], [4, 1, 1, "", "explainParam"], [4, 1, 1, "", "explainParams"], [4, 1, 1, "", "extractParamMap"], [4, 2, 1, "", "featureImportances"], [4, 2, 1, "", "featureSubsetStrategy"], [4, 2, 1, "", "featuresCol"], [4, 2, 1, "", "featuresCols"], [4, 1, 1, "", "getBootstrap"], [4, 1, 1, "", "getFeatureSubsetStrategy"], [4, 1, 1, "", "getFeaturesCol"], [4, 1, 1, "", "getFeaturesCols"], [4, 1, 1, "", "getImpurity"], [4, 1, 1, "", "getLabelCol"], [4, 1, 1, "", "getMaxBins"], [4, 1, 1, "", "getMaxDepth"], [4, 1, 1, "", "getMinInstancesPerNode"], [4, 2, 1, "", "getNumTrees"], [4, 1, 1, "", "getOrDefault"], [4, 1, 1, "", "getParam"], [4, 1, 1, "", "getPredictionCol"], [4, 1, 1, "", "getProbabilityCol"], [4, 1, 1, "", "getRawPredictionCol"], [4, 1, 1, "", "getSeed"], [4, 1, 1, "", "hasDefault"], [4, 1, 1, "", "hasParam"], [4, 2, 1, "", "hasSummary"], [4, 2, 1, "", "impurity"], [4, 1, 1, "", "isDefined"], [4, 1, 1, "", "isSet"], [4, 2, 1, "", "labelCol"], [4, 1, 1, "", "load"], [4, 2, 1, "", "maxBins"], [4, 2, 1, "", "maxDepth"], [4, 2, 1, "", "minInstancesPerNode"], [4, 2, 1, "", "numClasses"], [4, 2, 1, "", "numFeatures"], [4, 2, 1, "", "numTrees"], [4, 2, 1, "", "num_workers"], [4, 2, 1, "", "params"], [4, 1, 1, "", "predict"], [4, 1, 1, "", "predictLeaf"], [4, 1, 1, "", "predictProbability"], [4, 1, 1, "", "predictRaw"], [4, 2, 1, "", "predictionCol"], [4, 2, 1, "", "probabilityCol"], [4, 2, 1, "", "rawPredictionCol"], [4, 1, 1, "", "read"], [4, 1, 1, "", "save"], [4, 2, 1, "", "seed"], [4, 1, 1, "", "set"], [4, 1, 1, "", "setFeaturesCol"], [4, 1, 1, "", "setFeaturesCols"], [4, 1, 1, "", "setLabelCol"], [4, 1, 1, "", "setPredictionCol"], [4, 1, 1, "", "setProbabilityCol"], [4, 1, 1, "", "setRawPredictionCol"], [4, 2, 1, "", "supportedFeatureSubsetStrategies"], [4, 2, 1, "", "supportedImpurities"], [4, 2, 1, "", "toDebugString"], [4, 2, 1, "", "totalNumNodes"], [4, 1, 1, "", "transform"], [4, 2, 1, "", "treeWeights"], [4, 2, 1, "", "trees"], [4, 1, 1, "", "write"]], "spark_rapids_ml.classification.RandomForestClassifier": [[5, 2, 1, "", "bootstrap"], [5, 1, 1, "", "clear"], [5, 1, 1, "", "copy"], [5, 2, 1, "", "cuml_params"], [5, 1, 1, "", "explainParam"], [5, 1, 1, "", "explainParams"], [5, 1, 1, "", "extractParamMap"], [5, 2, 1, "", "featureSubsetStrategy"], [5, 2, 1, "", "featuresCol"], [5, 2, 1, "", "featuresCols"], [5, 1, 1, "", "fit"], [5, 1, 1, "", "fitMultiple"], [5, 1, 1, "", "getBootstrap"], [5, 1, 1, "", "getFeatureSubsetStrategy"], [5, 1, 1, "", "getFeaturesCol"], [5, 1, 1, "", "getFeaturesCols"], [5, 1, 1, "", "getImpurity"], [5, 1, 1, "", "getLabelCol"], [5, 1, 1, "", "getMaxBins"], [5, 1, 1, "", "getMaxDepth"], [5, 1, 1, "", "getMinInstancesPerNode"], [5, 1, 1, "", "getNumTrees"], [5, 1, 1, "", "getOrDefault"], [5, 1, 1, "", "getParam"], [5, 1, 1, "", "getProbabilityCol"], [5, 1, 1, "", "getRawPredictionCol"], [5, 1, 1, "", "getSeed"], [5, 1, 1, "", "hasDefault"], [5, 1, 1, "", "hasParam"], [5, 2, 1, "", "impurity"], [5, 1, 1, "", "isDefined"], [5, 1, 1, "", "isSet"], [5, 2, 1, "", "labelCol"], [5, 1, 1, "", "load"], [5, 2, 1, "", "maxBins"], [5, 2, 1, "", "maxDepth"], [5, 2, 1, "", "minInstancesPerNode"], [5, 2, 1, "", "numTrees"], [5, 2, 1, "", "num_workers"], [5, 2, 1, "", "params"], [5, 2, 1, "", "probabilityCol"], [5, 2, 1, "", "rawPredictionCol"], [5, 1, 1, "", "read"], [5, 1, 1, "", "save"], [5, 2, 1, "", "seed"], [5, 1, 1, "", "set"], [5, 1, 1, "", "setBootstrap"], [5, 1, 1, "", "setFeatureSubsetStrategy"], [5, 1, 1, "", "setFeaturesCol"], [5, 1, 1, "", "setFeaturesCols"], [5, 1, 1, "", "setImpurity"], [5, 1, 1, "", "setLabelCol"], [5, 1, 1, "", "setMaxBins"], [5, 1, 1, "", "setMaxDepth"], [5, 1, 1, "", "setMinInstancesPerNode"], [5, 1, 1, "", "setNumTrees"], [5, 1, 1, "", "setPredictionCol"], [5, 1, 1, "", "setProbabilityCol"], [5, 1, 1, "", "setRawPredictionCol"], [5, 1, 1, "", "setSeed"], [5, 2, 1, "", "supportedFeatureSubsetStrategies"], [5, 2, 1, "", "supportedImpurities"], [5, 1, 1, "", "write"]], "spark_rapids_ml.clustering": [[6, 0, 1, "", "DBSCAN"], [7, 0, 1, "", "DBSCANModel"], [8, 0, 1, "", "KMeans"], [9, 0, 1, "", "KMeansModel"]], "spark_rapids_ml.clustering.DBSCAN": [[6, 2, 1, "", "algorithm"], [6, 2, 1, "", "calc_core_sample_indices"], [6, 1, 1, "", "clear"], [6, 1, 1, "", "copy"], [6, 2, 1, "", "cuml_params"], [6, 2, 1, "", "eps"], [6, 1, 1, "", "explainParam"], [6, 1, 1, "", "explainParams"], [6, 1, 1, "", "extractParamMap"], [6, 2, 1, "", "featuresCol"], [6, 2, 1, "", "featuresCols"], [6, 1, 1, "", "fit"], [6, 1, 1, "", "fitMultiple"], [6, 1, 1, "", "getAlgorithm"], [6, 1, 1, "", "getCalcCoreSampleIndices"], [6, 1, 1, "", "getEps"], [6, 1, 1, "", "getFeaturesCol"], [6, 1, 1, "", "getFeaturesCols"], [6, 1, 1, "", "getIdCol"], [6, 1, 1, "", "getMaxMbytesPerBatch"], [6, 1, 1, "", "getMetric"], [6, 1, 1, "", "getMinSamples"], [6, 1, 1, "", "getOrDefault"], [6, 1, 1, "", "getParam"], [6, 1, 1, "", "hasDefault"], [6, 1, 1, "", "hasParam"], [6, 2, 1, "", "idCol"], [6, 1, 1, "", "isDefined"], [6, 1, 1, "", "isSet"], [6, 1, 1, "", "load"], [6, 2, 1, "", "max_mbytes_per_batch"], [6, 2, 1, "", "metric"], [6, 2, 1, "", "min_samples"], [6, 2, 1, "", "num_workers"], [6, 2, 1, "", "params"], [6, 1, 1, "", "read"], [6, 1, 1, "", "save"], [6, 1, 1, "", "set"], [6, 1, 1, "", "setAlgorithm"], [6, 1, 1, "", "setCalcCoreSampleIndices"], [6, 1, 1, "", "setEps"], [6, 1, 1, "", "setFeaturesCol"], [6, 1, 1, "", "setFeaturesCols"], [6, 1, 1, "", "setIdCol"], [6, 1, 1, "", "setMaxMbytesPerBatch"], [6, 1, 1, "", "setMetric"], [6, 1, 1, "", "setMinSamples"], [6, 1, 1, "", "setPredictionCol"], [6, 1, 1, "", "write"]], "spark_rapids_ml.clustering.DBSCANModel": [[7, 2, 1, "", "algorithm"], [7, 2, 1, "", "calc_core_sample_indices"], [7, 1, 1, "", "clear"], [7, 1, 1, "", "copy"], [7, 1, 1, "", "cpu"], [7, 2, 1, "", "cuml_params"], [7, 2, 1, "", "eps"], [7, 1, 1, "", "explainParam"], [7, 1, 1, "", "explainParams"], [7, 1, 1, "", "extractParamMap"], [7, 2, 1, "", "featuresCol"], [7, 2, 1, "", "featuresCols"], [7, 1, 1, "", "getFeaturesCol"], [7, 1, 1, "", "getFeaturesCols"], [7, 1, 1, "", "getIdCol"], [7, 1, 1, "", "getOrDefault"], [7, 1, 1, "", "getParam"], [7, 1, 1, "", "getPredictionCol"], [7, 1, 1, "", "hasDefault"], [7, 1, 1, "", "hasParam"], [7, 2, 1, "", "idCol"], [7, 1, 1, "", "isDefined"], [7, 1, 1, "", "isSet"], [7, 1, 1, "", "load"], [7, 2, 1, "", "max_mbytes_per_batch"], [7, 2, 1, "", "metric"], [7, 2, 1, "", "min_samples"], [7, 2, 1, "", "numFeatures"], [7, 2, 1, "", "num_workers"], [7, 2, 1, "", "params"], [7, 2, 1, "", "predictionCol"], [7, 1, 1, "", "read"], [7, 1, 1, "", "save"], [7, 1, 1, "", "set"], [7, 1, 1, "", "setFeaturesCol"], [7, 1, 1, "", "setFeaturesCols"], [7, 1, 1, "", "setIdCol"], [7, 1, 1, "", "setPredictionCol"], [7, 1, 1, "", "transform"], [7, 1, 1, "", "write"]], "spark_rapids_ml.clustering.KMeans": [[8, 1, 1, "", "clear"], [8, 1, 1, "", "copy"], [8, 2, 1, "", "cuml_params"], [8, 1, 1, "", "explainParam"], [8, 1, 1, "", "explainParams"], [8, 1, 1, "", "extractParamMap"], [8, 2, 1, "", "featuresCol"], [8, 2, 1, "", "featuresCols"], [8, 1, 1, "", "fit"], [8, 1, 1, "", "fitMultiple"], [8, 1, 1, "", "getFeaturesCol"], [8, 1, 1, "", "getFeaturesCols"], [8, 1, 1, "", "getInitMode"], [8, 1, 1, "", "getK"], [8, 1, 1, "", "getMaxIter"], [8, 1, 1, "", "getOrDefault"], [8, 1, 1, "", "getParam"], [8, 1, 1, "", "getPredictionCol"], [8, 1, 1, "", "getSeed"], [8, 1, 1, "", "getTol"], [8, 1, 1, "", "hasDefault"], [8, 1, 1, "", "hasParam"], [8, 2, 1, "", "initMode"], [8, 1, 1, "", "isDefined"], [8, 1, 1, "", "isSet"], [8, 2, 1, "", "k"], [8, 1, 1, "", "load"], [8, 2, 1, "", "maxIter"], [8, 2, 1, "", "num_workers"], [8, 2, 1, "", "params"], [8, 2, 1, "", "predictionCol"], [8, 1, 1, "", "read"], [8, 1, 1, "", "save"], [8, 2, 1, "", "seed"], [8, 1, 1, "", "set"], [8, 1, 1, "", "setFeaturesCol"], [8, 1, 1, "", "setFeaturesCols"], [8, 1, 1, "", "setK"], [8, 1, 1, "", "setMaxIter"], [8, 1, 1, "", "setPredictionCol"], [8, 1, 1, "", "setSeed"], [8, 1, 1, "", "setTol"], [8, 2, 1, "", "tol"], [8, 1, 1, "", "write"]], "spark_rapids_ml.clustering.KMeansModel": [[9, 1, 1, "", "clear"], [9, 1, 1, "", "clusterCenters"], [9, 1, 1, "", "copy"], [9, 1, 1, "", "cpu"], [9, 2, 1, "", "cuml_params"], [9, 1, 1, "", "explainParam"], [9, 1, 1, "", "explainParams"], [9, 1, 1, "", "extractParamMap"], [9, 2, 1, "", "featuresCol"], [9, 2, 1, "", "featuresCols"], [9, 1, 1, "", "getFeaturesCol"], [9, 1, 1, "", "getFeaturesCols"], [9, 1, 1, "", "getInitMode"], [9, 1, 1, "", "getK"], [9, 1, 1, "", "getMaxIter"], [9, 1, 1, "", "getOrDefault"], [9, 1, 1, "", "getParam"], [9, 1, 1, "", "getPredictionCol"], [9, 1, 1, "", "getSeed"], [9, 1, 1, "", "getTol"], [9, 1, 1, "", "hasDefault"], [9, 1, 1, "", "hasParam"], [9, 2, 1, "", "hasSummary"], [9, 2, 1, "", "initMode"], [9, 1, 1, "", "isDefined"], [9, 1, 1, "", "isSet"], [9, 2, 1, "", "k"], [9, 1, 1, "", "load"], [9, 2, 1, "", "maxIter"], [9, 2, 1, "", "numFeatures"], [9, 2, 1, "", "num_workers"], [9, 2, 1, "", "params"], [9, 1, 1, "", "predict"], [9, 2, 1, "", "predictionCol"], [9, 1, 1, "", "read"], [9, 1, 1, "", "save"], [9, 2, 1, "", "seed"], [9, 1, 1, "", "set"], [9, 1, 1, "", "setFeaturesCol"], [9, 1, 1, "", "setFeaturesCols"], [9, 1, 1, "", "setPredictionCol"], [9, 2, 1, "", "tol"], [9, 1, 1, "", "transform"], [9, 1, 1, "", "write"]], "spark_rapids_ml.feature": [[0, 0, 1, "", "PCA"], [1, 0, 1, "", "PCAModel"]], "spark_rapids_ml.feature.PCA": [[0, 1, 1, "", "clear"], [0, 1, 1, "", "copy"], [0, 2, 1, "", "cuml_params"], [0, 1, 1, "", "explainParam"], [0, 1, 1, "", "explainParams"], [0, 1, 1, "", "extractParamMap"], [0, 1, 1, "", "fit"], [0, 1, 1, "", "fitMultiple"], [0, 1, 1, "", "getInputCol"], [0, 1, 1, "", "getInputCols"], [0, 1, 1, "", "getK"], [0, 1, 1, "", "getOrDefault"], [0, 1, 1, "", "getOutputCol"], [0, 1, 1, "", "getParam"], [0, 1, 1, "", "hasDefault"], [0, 1, 1, "", "hasParam"], [0, 2, 1, "", "inputCol"], [0, 2, 1, "", "inputCols"], [0, 1, 1, "", "isDefined"], [0, 1, 1, "", "isSet"], [0, 2, 1, "", "k"], [0, 1, 1, "", "load"], [0, 2, 1, "", "num_workers"], [0, 2, 1, "", "outputCol"], [0, 2, 1, "", "params"], [0, 1, 1, "", "read"], [0, 1, 1, "", "save"], [0, 1, 1, "", "set"], [0, 1, 1, "", "setInputCol"], [0, 1, 1, "", "setInputCols"], [0, 1, 1, "", "setK"], [0, 1, 1, "", "setOutputCol"], [0, 1, 1, "", "write"]], "spark_rapids_ml.feature.PCAModel": [[1, 1, 1, "", "clear"], [1, 1, 1, "", "copy"], [1, 1, 1, "", "cpu"], [1, 2, 1, "", "cuml_params"], [1, 1, 1, "", "explainParam"], [1, 1, 1, "", "explainParams"], [1, 2, 1, "", "explainedVariance"], [1, 1, 1, "", "extractParamMap"], [1, 1, 1, "", "getInputCol"], [1, 1, 1, "", "getInputCols"], [1, 1, 1, "", "getK"], [1, 1, 1, "", "getOrDefault"], [1, 1, 1, "", "getOutputCol"], [1, 1, 1, "", "getParam"], [1, 1, 1, "", "hasDefault"], [1, 1, 1, "", "hasParam"], [1, 2, 1, "", "inputCol"], [1, 2, 1, "", "inputCols"], [1, 1, 1, "", "isDefined"], [1, 1, 1, "", "isSet"], [1, 2, 1, "", "k"], [1, 1, 1, "", "load"], [1, 2, 1, "", "mean"], [1, 2, 1, "", "num_workers"], [1, 2, 1, "", "outputCol"], [1, 2, 1, "", "params"], [1, 2, 1, "", "pc"], [1, 1, 1, "", "read"], [1, 1, 1, "", "save"], [1, 1, 1, "", "set"], [1, 1, 1, "", "setInputCol"], [1, 1, 1, "", "setInputCols"], [1, 1, 1, "", "setOutputCol"], [1, 1, 1, "", "transform"], [1, 1, 1, "", "write"]], "spark_rapids_ml.knn": [[10, 0, 1, "", "ApproximateNearestNeighbors"], [11, 0, 1, "", "ApproximateNearestNeighborsModel"], [12, 0, 1, "", "NearestNeighbors"], [13, 0, 1, "", "NearestNeighborsModel"]], "spark_rapids_ml.knn.ApproximateNearestNeighbors": [[10, 2, 1, "", "algoParams"], [10, 2, 1, "", "algorithm"], [10, 1, 1, "", "clear"], [10, 1, 1, "", "copy"], [10, 2, 1, "", "cuml_params"], [10, 1, 1, "", "explainParam"], [10, 1, 1, "", "explainParams"], [10, 1, 1, "", "extractParamMap"], [10, 1, 1, "", "fit"], [10, 1, 1, "", "fitMultiple"], [10, 1, 1, "", "getAlgoParams"], [10, 1, 1, "", "getAlgorithm"], [10, 1, 1, "", "getIdCol"], [10, 1, 1, "", "getInputCol"], [10, 1, 1, "", "getInputCols"], [10, 1, 1, "", "getK"], [10, 1, 1, "", "getLabelCol"], [10, 1, 1, "", "getMetric"], [10, 1, 1, "", "getOrDefault"], [10, 1, 1, "", "getParam"], [10, 1, 1, "", "hasDefault"], [10, 1, 1, "", "hasParam"], [10, 2, 1, "", "idCol"], [10, 2, 1, "", "inputCol"], [10, 2, 1, "", "inputCols"], [10, 1, 1, "", "isDefined"], [10, 1, 1, "", "isSet"], [10, 2, 1, "", "k"], [10, 2, 1, "", "labelCol"], [10, 2, 1, "", "metric"], [10, 2, 1, "", "num_workers"], [10, 2, 1, "", "params"], [10, 1, 1, "", "set"], [10, 1, 1, "", "setAlgoParams"], [10, 1, 1, "", "setAlgorithm"], [10, 1, 1, "", "setIdCol"], [10, 1, 1, "", "setInputCol"], [10, 1, 1, "", "setInputCols"], [10, 1, 1, "", "setK"], [10, 1, 1, "", "setMetric"]], "spark_rapids_ml.knn.ApproximateNearestNeighborsModel": [[11, 2, 1, "", "algoParams"], [11, 2, 1, "", "algorithm"], [11, 1, 1, "", "approxSimilarityJoin"], [11, 1, 1, "", "clear"], [11, 1, 1, "", "copy"], [11, 1, 1, "", "cpu"], [11, 2, 1, "", "cuml_params"], [11, 1, 1, "", "explainParam"], [11, 1, 1, "", "explainParams"], [11, 1, 1, "", "extractParamMap"], [11, 1, 1, "", "getAlgoParams"], [11, 1, 1, "", "getAlgorithm"], [11, 1, 1, "", "getIdCol"], [11, 1, 1, "", "getInputCol"], [11, 1, 1, "", "getInputCols"], [11, 1, 1, "", "getK"], [11, 1, 1, "", "getLabelCol"], [11, 1, 1, "", "getMetric"], [11, 1, 1, "", "getOrDefault"], [11, 1, 1, "", "getParam"], [11, 1, 1, "", "hasDefault"], [11, 1, 1, "", "hasParam"], [11, 2, 1, "", "idCol"], [11, 2, 1, "", "inputCol"], [11, 2, 1, "", "inputCols"], [11, 1, 1, "", "isDefined"], [11, 1, 1, "", "isSet"], [11, 2, 1, "", "k"], [11, 1, 1, "", "kneighbors"], [11, 2, 1, "", "labelCol"], [11, 2, 1, "", "metric"], [11, 2, 1, "", "num_workers"], [11, 2, 1, "", "params"], [11, 1, 1, "", "set"], [11, 1, 1, "", "setAlgoParams"], [11, 1, 1, "", "setAlgorithm"], [11, 1, 1, "", "setIdCol"], [11, 1, 1, "", "setInputCol"], [11, 1, 1, "", "setInputCols"], [11, 1, 1, "", "setK"], [11, 1, 1, "", "setMetric"], [11, 1, 1, "", "transform"]], "spark_rapids_ml.knn.NearestNeighbors": [[12, 1, 1, "", "clear"], [12, 1, 1, "", "copy"], [12, 2, 1, "", "cuml_params"], [12, 1, 1, "", "explainParam"], [12, 1, 1, "", "explainParams"], [12, 1, 1, "", "extractParamMap"], [12, 1, 1, "", "fit"], [12, 1, 1, "", "fitMultiple"], [12, 1, 1, "", "getIdCol"], [12, 1, 1, "", "getInputCol"], [12, 1, 1, "", "getInputCols"], [12, 1, 1, "", "getK"], [12, 1, 1, "", "getLabelCol"], [12, 1, 1, "", "getOrDefault"], [12, 1, 1, "", "getParam"], [12, 1, 1, "", "hasDefault"], [12, 1, 1, "", "hasParam"], [12, 2, 1, "", "idCol"], [12, 2, 1, "", "inputCol"], [12, 2, 1, "", "inputCols"], [12, 1, 1, "", "isDefined"], [12, 1, 1, "", "isSet"], [12, 2, 1, "", "k"], [12, 2, 1, "", "labelCol"], [12, 2, 1, "", "num_workers"], [12, 2, 1, "", "params"], [12, 1, 1, "", "set"], [12, 1, 1, "", "setIdCol"], [12, 1, 1, "", "setInputCol"], [12, 1, 1, "", "setInputCols"], [12, 1, 1, "", "setK"]], "spark_rapids_ml.knn.NearestNeighborsModel": [[13, 1, 1, "", "clear"], [13, 1, 1, "", "copy"], [13, 1, 1, "", "cpu"], [13, 2, 1, "", "cuml_params"], [13, 1, 1, "", "exactNearestNeighborsJoin"], [13, 1, 1, "", "explainParam"], [13, 1, 1, "", "explainParams"], [13, 1, 1, "", "extractParamMap"], [13, 1, 1, "", "getIdCol"], [13, 1, 1, "", "getInputCol"], [13, 1, 1, "", "getInputCols"], [13, 1, 1, "", "getK"], [13, 1, 1, "", "getLabelCol"], [13, 1, 1, "", "getOrDefault"], [13, 1, 1, "", "getParam"], [13, 1, 1, "", "hasDefault"], [13, 1, 1, "", "hasParam"], [13, 2, 1, "", "idCol"], [13, 2, 1, "", "inputCol"], [13, 2, 1, "", "inputCols"], [13, 1, 1, "", "isDefined"], [13, 1, 1, "", "isSet"], [13, 2, 1, "", "k"], [13, 1, 1, "", "kneighbors"], [13, 2, 1, "", "labelCol"], [13, 2, 1, "", "num_workers"], [13, 2, 1, "", "params"], [13, 1, 1, "", "set"], [13, 1, 1, "", "setIdCol"], [13, 1, 1, "", "setInputCol"], [13, 1, 1, "", "setInputCols"], [13, 1, 1, "", "setK"], [13, 1, 1, "", "transform"]], "spark_rapids_ml.regression": [[14, 0, 1, "", "LinearRegression"], [15, 0, 1, "", "LinearRegressionModel"], [16, 0, 1, "", "RandomForestRegressionModel"], [17, 0, 1, "", "RandomForestRegressor"]], "spark_rapids_ml.regression.LinearRegression": [[14, 1, 1, "", "clear"], [14, 1, 1, "", "copy"], [14, 2, 1, "", "cuml_params"], [14, 2, 1, "", "elasticNetParam"], [14, 1, 1, "", "explainParam"], [14, 1, 1, "", "explainParams"], [14, 1, 1, "", "extractParamMap"], [14, 2, 1, "", "featuresCol"], [14, 2, 1, "", "featuresCols"], [14, 1, 1, "", "fit"], [14, 2, 1, "", "fitIntercept"], [14, 1, 1, "", "fitMultiple"], [14, 1, 1, "", "getElasticNetParam"], [14, 1, 1, "", "getFeaturesCol"], [14, 1, 1, "", "getFeaturesCols"], [14, 1, 1, "", "getFitIntercept"], [14, 1, 1, "", "getLabelCol"], [14, 1, 1, "", "getLoss"], [14, 1, 1, "", "getMaxIter"], [14, 1, 1, "", "getOrDefault"], [14, 1, 1, "", "getParam"], [14, 1, 1, "", "getPredictionCol"], [14, 1, 1, "", "getRegParam"], [14, 1, 1, "", "getSolver"], [14, 1, 1, "", "getStandardization"], [14, 1, 1, "", "getTol"], [14, 1, 1, "", "hasDefault"], [14, 1, 1, "", "hasParam"], [14, 1, 1, "", "isDefined"], [14, 1, 1, "", "isSet"], [14, 2, 1, "", "labelCol"], [14, 1, 1, "", "load"], [14, 2, 1, "", "loss"], [14, 2, 1, "", "maxIter"], [14, 2, 1, "", "num_workers"], [14, 2, 1, "", "params"], [14, 2, 1, "", "predictionCol"], [14, 1, 1, "", "read"], [14, 2, 1, "", "regParam"], [14, 1, 1, "", "save"], [14, 1, 1, "", "set"], [14, 1, 1, "", "setElasticNetParam"], [14, 1, 1, "", "setFeaturesCol"], [14, 1, 1, "", "setFeaturesCols"], [14, 1, 1, "", "setLabelCol"], [14, 1, 1, "", "setLoss"], [14, 1, 1, "", "setMaxIter"], [14, 1, 1, "", "setPredictionCol"], [14, 1, 1, "", "setRegParam"], [14, 1, 1, "", "setStandardization"], [14, 1, 1, "", "setTol"], [14, 2, 1, "", "solver"], [14, 2, 1, "", "standardization"], [14, 2, 1, "", "tol"], [14, 1, 1, "", "write"]], "spark_rapids_ml.regression.LinearRegressionModel": [[15, 1, 1, "", "clear"], [15, 2, 1, "", "coefficients"], [15, 1, 1, "", "copy"], [15, 1, 1, "", "cpu"], [15, 2, 1, "", "cuml_params"], [15, 2, 1, "", "elasticNetParam"], [15, 1, 1, "", "evaluate"], [15, 1, 1, "", "explainParam"], [15, 1, 1, "", "explainParams"], [15, 1, 1, "", "extractParamMap"], [15, 2, 1, "", "featuresCol"], [15, 2, 1, "", "featuresCols"], [15, 2, 1, "", "fitIntercept"], [15, 1, 1, "", "getElasticNetParam"], [15, 1, 1, "", "getFeaturesCol"], [15, 1, 1, "", "getFeaturesCols"], [15, 1, 1, "", "getFitIntercept"], [15, 1, 1, "", "getLabelCol"], [15, 1, 1, "", "getLoss"], [15, 1, 1, "", "getMaxIter"], [15, 1, 1, "", "getOrDefault"], [15, 1, 1, "", "getParam"], [15, 1, 1, "", "getPredictionCol"], [15, 1, 1, "", "getRegParam"], [15, 1, 1, "", "getSolver"], [15, 1, 1, "", "getStandardization"], [15, 1, 1, "", "getTol"], [15, 1, 1, "", "hasDefault"], [15, 1, 1, "", "hasParam"], [15, 2, 1, "", "hasSummary"], [15, 2, 1, "", "intercept"], [15, 1, 1, "", "isDefined"], [15, 1, 1, "", "isSet"], [15, 2, 1, "", "labelCol"], [15, 1, 1, "", "load"], [15, 2, 1, "", "loss"], [15, 2, 1, "", "maxIter"], [15, 2, 1, "", "numFeatures"], [15, 2, 1, "", "num_workers"], [15, 2, 1, "", "params"], [15, 1, 1, "", "predict"], [15, 2, 1, "", "predictionCol"], [15, 1, 1, "", "read"], [15, 2, 1, "", "regParam"], [15, 1, 1, "", "save"], [15, 2, 1, "", "scale"], [15, 1, 1, "", "set"], [15, 1, 1, "", "setFeaturesCol"], [15, 1, 1, "", "setFeaturesCols"], [15, 1, 1, "", "setLabelCol"], [15, 1, 1, "", "setPredictionCol"], [15, 2, 1, "", "solver"], [15, 2, 1, "", "standardization"], [15, 2, 1, "", "tol"], [15, 1, 1, "", "transform"], [15, 1, 1, "", "write"]], "spark_rapids_ml.regression.RandomForestRegressionModel": [[16, 2, 1, "", "bootstrap"], [16, 1, 1, "", "clear"], [16, 1, 1, "", "copy"], [16, 1, 1, "", "cpu"], [16, 2, 1, "", "cuml_params"], [16, 1, 1, "", "explainParam"], [16, 1, 1, "", "explainParams"], [16, 1, 1, "", "extractParamMap"], [16, 2, 1, "", "featureImportances"], [16, 2, 1, "", "featureSubsetStrategy"], [16, 2, 1, "", "featuresCol"], [16, 2, 1, "", "featuresCols"], [16, 1, 1, "", "getBootstrap"], [16, 1, 1, "", "getFeatureSubsetStrategy"], [16, 1, 1, "", "getFeaturesCol"], [16, 1, 1, "", "getFeaturesCols"], [16, 1, 1, "", "getImpurity"], [16, 1, 1, "", "getLabelCol"], [16, 1, 1, "", "getMaxBins"], [16, 1, 1, "", "getMaxDepth"], [16, 1, 1, "", "getMinInstancesPerNode"], [16, 2, 1, "", "getNumTrees"], [16, 1, 1, "", "getOrDefault"], [16, 1, 1, "", "getParam"], [16, 1, 1, "", "getPredictionCol"], [16, 1, 1, "", "getSeed"], [16, 1, 1, "", "hasDefault"], [16, 1, 1, "", "hasParam"], [16, 2, 1, "", "impurity"], [16, 1, 1, "", "isDefined"], [16, 1, 1, "", "isSet"], [16, 2, 1, "", "labelCol"], [16, 1, 1, "", "load"], [16, 2, 1, "", "maxBins"], [16, 2, 1, "", "maxDepth"], [16, 2, 1, "", "minInstancesPerNode"], [16, 2, 1, "", "numFeatures"], [16, 2, 1, "", "numTrees"], [16, 2, 1, "", "num_workers"], [16, 2, 1, "", "params"], [16, 1, 1, "", "predict"], [16, 1, 1, "", "predictLeaf"], [16, 2, 1, "", "predictionCol"], [16, 1, 1, "", "read"], [16, 1, 1, "", "save"], [16, 2, 1, "", "seed"], [16, 1, 1, "", "set"], [16, 1, 1, "", "setFeaturesCol"], [16, 1, 1, "", "setFeaturesCols"], [16, 1, 1, "", "setLabelCol"], [16, 1, 1, "", "setPredictionCol"], [16, 2, 1, "", "supportedFeatureSubsetStrategies"], [16, 2, 1, "", "supportedImpurities"], [16, 2, 1, "", "toDebugString"], [16, 2, 1, "", "totalNumNodes"], [16, 1, 1, "", "transform"], [16, 2, 1, "", "treeWeights"], [16, 2, 1, "", "trees"], [16, 1, 1, "", "write"]], "spark_rapids_ml.regression.RandomForestRegressor": [[17, 2, 1, "", "bootstrap"], [17, 1, 1, "", "clear"], [17, 1, 1, "", "copy"], [17, 2, 1, "", "cuml_params"], [17, 1, 1, "", "explainParam"], [17, 1, 1, "", "explainParams"], [17, 1, 1, "", "extractParamMap"], [17, 2, 1, "", "featureSubsetStrategy"], [17, 2, 1, "", "featuresCol"], [17, 2, 1, "", "featuresCols"], [17, 1, 1, "", "fit"], [17, 1, 1, "", "fitMultiple"], [17, 1, 1, "", "getBootstrap"], [17, 1, 1, "", "getFeatureSubsetStrategy"], [17, 1, 1, "", "getFeaturesCol"], [17, 1, 1, "", "getFeaturesCols"], [17, 1, 1, "", "getImpurity"], [17, 1, 1, "", "getLabelCol"], [17, 1, 1, "", "getMaxBins"], [17, 1, 1, "", "getMaxDepth"], [17, 1, 1, "", "getMinInstancesPerNode"], [17, 1, 1, "", "getNumTrees"], [17, 1, 1, "", "getOrDefault"], [17, 1, 1, "", "getParam"], [17, 1, 1, "", "getSeed"], [17, 1, 1, "", "hasDefault"], [17, 1, 1, "", "hasParam"], [17, 2, 1, "", "impurity"], [17, 1, 1, "", "isDefined"], [17, 1, 1, "", "isSet"], [17, 2, 1, "", "labelCol"], [17, 1, 1, "", "load"], [17, 2, 1, "", "maxBins"], [17, 2, 1, "", "maxDepth"], [17, 2, 1, "", "minInstancesPerNode"], [17, 2, 1, "", "numTrees"], [17, 2, 1, "", "num_workers"], [17, 2, 1, "", "params"], [17, 1, 1, "", "read"], [17, 1, 1, "", "save"], [17, 2, 1, "", "seed"], [17, 1, 1, "", "set"], [17, 1, 1, "", "setBootstrap"], [17, 1, 1, "", "setFeatureSubsetStrategy"], [17, 1, 1, "", "setFeaturesCol"], [17, 1, 1, "", "setFeaturesCols"], [17, 1, 1, "", "setImpurity"], [17, 1, 1, "", "setLabelCol"], [17, 1, 1, "", "setMaxBins"], [17, 1, 1, "", "setMaxDepth"], [17, 1, 1, "", "setMinInstancesPerNode"], [17, 1, 1, "", "setNumTrees"], [17, 1, 1, "", "setPredictionCol"], [17, 1, 1, "", "setSeed"], [17, 2, 1, "", "supportedFeatureSubsetStrategies"], [17, 2, 1, "", "supportedImpurities"], [17, 1, 1, "", "write"]], "spark_rapids_ml.tuning": [[18, 0, 1, "", "CrossValidator"]], "spark_rapids_ml.tuning.CrossValidator": [[18, 1, 1, "", "clear"], [18, 2, 1, "", "collectSubModels"], [18, 1, 1, "", "copy"], [18, 2, 1, "", "estimator"], [18, 2, 1, "", "estimatorParamMaps"], [18, 2, 1, "", "evaluator"], [18, 1, 1, "", "explainParam"], [18, 1, 1, "", "explainParams"], [18, 1, 1, "", "extractParamMap"], [18, 1, 1, "", "fit"], [18, 1, 1, "", "fitMultiple"], [18, 2, 1, "", "foldCol"], [18, 1, 1, "", "getCollectSubModels"], [18, 1, 1, "", "getEstimator"], [18, 1, 1, "", "getEstimatorParamMaps"], [18, 1, 1, "", "getEvaluator"], [18, 1, 1, "", "getFoldCol"], [18, 1, 1, "", "getNumFolds"], [18, 1, 1, "", "getOrDefault"], [18, 1, 1, "", "getParallelism"], [18, 1, 1, "", "getParam"], [18, 1, 1, "", "getSeed"], [18, 1, 1, "", "hasDefault"], [18, 1, 1, "", "hasParam"], [18, 1, 1, "", "isDefined"], [18, 1, 1, "", "isSet"], [18, 1, 1, "", "load"], [18, 2, 1, "", "numFolds"], [18, 2, 1, "", "parallelism"], [18, 2, 1, "", "params"], [18, 1, 1, "", "read"], [18, 1, 1, "", "save"], [18, 2, 1, "", "seed"], [18, 1, 1, "", "set"], [18, 1, 1, "", "setCollectSubModels"], [18, 1, 1, "", "setEstimator"], [18, 1, 1, "", "setEstimatorParamMaps"], [18, 1, 1, "", "setEvaluator"], [18, 1, 1, "", "setFoldCol"], [18, 1, 1, "", "setNumFolds"], [18, 1, 1, "", "setParallelism"], [18, 1, 1, "", "setParams"], [18, 1, 1, "", "setSeed"], [18, 1, 1, "", "write"]], "spark_rapids_ml.umap": [[19, 0, 1, "", "UMAP"], [20, 0, 1, "", "UMAPModel"]], "spark_rapids_ml.umap.UMAP": [[19, 2, 1, "", "a"], [19, 2, 1, "", "b"], [19, 1, 1, "", "clear"], [19, 1, 1, "", "copy"], [19, 2, 1, "", "cuml_params"], [19, 1, 1, "", "explainParam"], [19, 1, 1, "", "explainParams"], [19, 1, 1, "", "extractParamMap"], [19, 2, 1, "", "featuresCol"], [19, 2, 1, "", "featuresCols"], [19, 1, 1, "", "fit"], [19, 1, 1, "", "fitMultiple"], [19, 1, 1, "", "getA"], [19, 1, 1, "", "getB"], [19, 1, 1, "", "getFeaturesCol"], [19, 1, 1, "", "getFeaturesCols"], [19, 1, 1, "", "getInit"], [19, 1, 1, "", "getLabelCol"], [19, 1, 1, "", "getLearningRate"], [19, 1, 1, "", "getLocalConnectivity"], [19, 1, 1, "", "getMetric"], [19, 1, 1, "", "getMinDist"], [19, 1, 1, "", "getNComponents"], [19, 1, 1, "", "getNEpochs"], [19, 1, 1, "", "getNNeighbors"], [19, 1, 1, "", "getNegativeSampleRate"], [19, 1, 1, "", "getOrDefault"], [19, 1, 1, "", "getOutputCol"], [19, 1, 1, "", "getParam"], [19, 1, 1, "", "getPrecomputedKNN"], [19, 1, 1, "", "getRandomState"], [19, 1, 1, "", "getRepulsionStrength"], [19, 1, 1, "", "getSampleFraction"], [19, 1, 1, "", "getSetOpMixRatio"], [19, 1, 1, "", "getSpread"], [19, 1, 1, "", "getTransformQueueSize"], [19, 1, 1, "", "hasDefault"], [19, 1, 1, "", "hasParam"], [19, 2, 1, "", "init"], [19, 1, 1, "", "isDefined"], [19, 1, 1, "", "isSet"], [19, 2, 1, "", "labelCol"], [19, 2, 1, "", "learning_rate"], [19, 1, 1, "", "load"], [19, 2, 1, "", "local_connectivity"], [19, 2, 1, "", "metric"], [19, 2, 1, "", "min_dist"], [19, 2, 1, "", "n_components"], [19, 2, 1, "", "n_epochs"], [19, 2, 1, "", "n_neighbors"], [19, 2, 1, "", "negative_sample_rate"], [19, 2, 1, "", "num_workers"], [19, 2, 1, "", "outputCol"], [19, 2, 1, "", "params"], [19, 2, 1, "", "precomputed_knn"], [19, 2, 1, "", "random_state"], [19, 1, 1, "", "read"], [19, 2, 1, "", "repulsion_strength"], [19, 2, 1, "", "sample_fraction"], [19, 1, 1, "", "save"], [19, 1, 1, "", "set"], [19, 1, 1, "", "setA"], [19, 1, 1, "", "setB"], [19, 1, 1, "", "setFeaturesCol"], [19, 1, 1, "", "setFeaturesCols"], [19, 1, 1, "", "setInit"], [19, 1, 1, "", "setLabelCol"], [19, 1, 1, "", "setLearningRate"], [19, 1, 1, "", "setLocalConnectivity"], [19, 1, 1, "", "setMetric"], [19, 1, 1, "", "setMinDist"], [19, 1, 1, "", "setNComponents"], [19, 1, 1, "", "setNEpochs"], [19, 1, 1, "", "setNNeighbors"], [19, 1, 1, "", "setNegativeSampleRate"], [19, 1, 1, "", "setOutputCol"], [19, 1, 1, "", "setPrecomputedKNN"], [19, 1, 1, "", "setRandomState"], [19, 1, 1, "", "setRepulsionStrength"], [19, 1, 1, "", "setSampleFraction"], [19, 1, 1, "", "setSetOpMixRatio"], [19, 1, 1, "", "setSpread"], [19, 1, 1, "", "setTransformQueueSize"], [19, 2, 1, "", "set_op_mix_ratio"], [19, 2, 1, "", "spread"], [19, 2, 1, "", "transform_queue_size"], [19, 1, 1, "", "write"]], "spark_rapids_ml.umap.UMAPModel": [[20, 2, 1, "", "a"], [20, 2, 1, "", "b"], [20, 1, 1, "", "clear"], [20, 1, 1, "", "copy"], [20, 1, 1, "", "cpu"], [20, 2, 1, "", "cuml_params"], [20, 2, 1, "", "embedding"], [20, 1, 1, "", "explainParam"], [20, 1, 1, "", "explainParams"], [20, 1, 1, "", "extractParamMap"], [20, 2, 1, "", "featuresCol"], [20, 2, 1, "", "featuresCols"], [20, 1, 1, "", "getA"], [20, 1, 1, "", "getB"], [20, 1, 1, "", "getFeaturesCol"], [20, 1, 1, "", "getFeaturesCols"], [20, 1, 1, "", "getInit"], [20, 1, 1, "", "getLabelCol"], [20, 1, 1, "", "getLearningRate"], [20, 1, 1, "", "getLocalConnectivity"], [20, 1, 1, "", "getMetric"], [20, 1, 1, "", "getMinDist"], [20, 1, 1, "", "getNComponents"], [20, 1, 1, "", "getNEpochs"], [20, 1, 1, "", "getNNeighbors"], [20, 1, 1, "", "getNegativeSampleRate"], [20, 1, 1, "", "getOrDefault"], [20, 1, 1, "", "getOutputCol"], [20, 1, 1, "", "getParam"], [20, 1, 1, "", "getPrecomputedKNN"], [20, 1, 1, "", "getRandomState"], [20, 1, 1, "", "getRepulsionStrength"], [20, 1, 1, "", "getSampleFraction"], [20, 1, 1, "", "getSetOpMixRatio"], [20, 1, 1, "", "getSpread"], [20, 1, 1, "", "getTransformQueueSize"], [20, 1, 1, "", "hasDefault"], [20, 1, 1, "", "hasParam"], [20, 2, 1, "", "init"], [20, 1, 1, "", "isDefined"], [20, 1, 1, "", "isSet"], [20, 2, 1, "", "labelCol"], [20, 2, 1, "", "learning_rate"], [20, 1, 1, "", "load"], [20, 2, 1, "", "local_connectivity"], [20, 2, 1, "", "metric"], [20, 2, 1, "", "min_dist"], [20, 2, 1, "", "n_components"], [20, 2, 1, "", "n_epochs"], [20, 2, 1, "", "n_neighbors"], [20, 2, 1, "", "negative_sample_rate"], [20, 2, 1, "", "num_workers"], [20, 2, 1, "", "outputCol"], [20, 2, 1, "", "params"], [20, 2, 1, "", "precomputed_knn"], [20, 2, 1, "", "random_state"], [20, 2, 1, "", "raw_data"], [20, 1, 1, "", "read"], [20, 2, 1, "", "repulsion_strength"], [20, 2, 1, "", "sample_fraction"], [20, 1, 1, "", "save"], [20, 1, 1, "", "set"], [20, 1, 1, "", "setA"], [20, 1, 1, "", "setB"], [20, 1, 1, "", "setFeaturesCol"], [20, 1, 1, "", "setFeaturesCols"], [20, 1, 1, "", "setInit"], [20, 1, 1, "", "setLabelCol"], [20, 1, 1, "", "setLearningRate"], [20, 1, 1, "", "setLocalConnectivity"], [20, 1, 1, "", "setMetric"], [20, 1, 1, "", "setMinDist"], [20, 1, 1, "", "setNComponents"], [20, 1, 1, "", "setNEpochs"], [20, 1, 1, "", "setNNeighbors"], [20, 1, 1, "", "setNegativeSampleRate"], [20, 1, 1, "", "setOutputCol"], [20, 1, 1, "", "setPrecomputedKNN"], [20, 1, 1, "", "setRandomState"], [20, 1, 1, "", "setRepulsionStrength"], [20, 1, 1, "", "setSampleFraction"], [20, 1, 1, "", "setSetOpMixRatio"], [20, 1, 1, "", "setSpread"], [20, 1, 1, "", "setTransformQueueSize"], [20, 2, 1, "", "set_op_mix_ratio"], [20, 2, 1, "", "spread"], [20, 1, 1, "", "transform"], [20, 2, 1, "", "transform_queue_size"], [20, 1, 1, "", "write"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:attribute"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "attribute", "Python attribute"]}, "titleterms": {"pca": 0, "pcamodel": 1, "logisticregress": 2, "logisticregressionmodel": 3, "randomforestclassificationmodel": 4, "randomforestclassifi": 5, "dbscan": 6, "dbscanmodel": 7, "kmean": 8, "kmeansmodel": 9, "approximatenearestneighbor": 10, "approximatenearestneighborsmodel": 11, "nearestneighbor": 12, "nearestneighborsmodel": 13, "linearregress": 14, "linearregressionmodel": 15, "randomforestregressionmodel": 16, "randomforestregressor": 17, "crossvalid": 18, "umap": [19, 22], "umapmodel": 20, "welcom": 21, "spark": [21, 22], "rapid": [21, 22], "ml": [21, 22], "": 21, "document": 21, "content": 21, "indic": 21, "tabl": 21, "featur": 22, "classif": 22, "cluster": 22, "regress": 22, "nearest": 22, "neighbor": 22, "tune": 22}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"PCA": [[0, "pca"]], "PCAModel": [[1, "pcamodel"]], "LogisticRegression": [[2, "logisticregression"]], "LogisticRegressionModel": [[3, "logisticregressionmodel"]], "RandomForestClassificationModel": [[4, "randomforestclassificationmodel"]], "RandomForestClassifier": [[5, "randomforestclassifier"]], "DBSCAN": [[6, "dbscan"]], "DBSCANModel": [[7, "dbscanmodel"]], "KMeans": [[8, "kmeans"]], "KMeansModel": [[9, "kmeansmodel"]], "ApproximateNearestNeighbors": [[10, "approximatenearestneighbors"]], "ApproximateNearestNeighborsModel": [[11, "approximatenearestneighborsmodel"]], "NearestNeighbors": [[12, "nearestneighbors"]], "NearestNeighborsModel": [[13, "nearestneighborsmodel"]], "LinearRegression": [[14, "linearregression"]], "LinearRegressionModel": [[15, "linearregressionmodel"]], "RandomForestRegressionModel": [[16, "randomforestregressionmodel"]], "RandomForestRegressor": [[17, "randomforestregressor"]], "CrossValidator": [[18, "crossvalidator"]], "UMAP": [[19, "umap"], [22, "umap"]], "UMAPModel": [[20, "umapmodel"]], "Welcome to spark-rapids-ml\u2019s documentation!": [[21, "welcome-to-spark-rapids-ml-s-documentation"]], "Contents:": [[21, null]], "Indices and tables": [[21, "indices-and-tables"]], "Spark Rapids ML": [[22, "spark-rapids-ml"]], "Feature": [[22, "feature"]], "Classification": [[22, "classification"]], "Clustering": [[22, "clustering"]], "Regression": [[22, "regression"]], "Nearest Neighbors": [[22, "nearest-neighbors"]], "Tuning": [[22, "tuning"]]}, "indexentries": {"pca (class in spark_rapids_ml.feature)": [[0, "spark_rapids_ml.feature.PCA"]], "clear() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.clear"]], "copy() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.copy"]], "cuml_params (spark_rapids_ml.feature.pca attribute)": [[0, "spark_rapids_ml.feature.PCA.cuml_params"]], "explainparam() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.explainParam"]], "explainparams() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.explainParams"]], "extractparammap() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.extractParamMap"]], "fit() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.fit"]], "fitmultiple() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.fitMultiple"]], "getinputcol() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.getInputCol"]], "getinputcols() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.getInputCols"]], "getk() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.getK"]], "getordefault() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.getOrDefault"]], "getoutputcol() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.getOutputCol"]], "getparam() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.getParam"]], "hasdefault() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.hasDefault"]], "hasparam() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.hasParam"]], "inputcol (spark_rapids_ml.feature.pca attribute)": [[0, "spark_rapids_ml.feature.PCA.inputCol"]], "inputcols (spark_rapids_ml.feature.pca attribute)": [[0, "spark_rapids_ml.feature.PCA.inputCols"]], "isdefined() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.isDefined"]], "isset() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.isSet"]], "k (spark_rapids_ml.feature.pca attribute)": [[0, "spark_rapids_ml.feature.PCA.k"]], "load() (spark_rapids_ml.feature.pca class method)": [[0, "spark_rapids_ml.feature.PCA.load"]], "num_workers (spark_rapids_ml.feature.pca attribute)": [[0, "spark_rapids_ml.feature.PCA.num_workers"]], "outputcol (spark_rapids_ml.feature.pca attribute)": [[0, "spark_rapids_ml.feature.PCA.outputCol"]], "params (spark_rapids_ml.feature.pca attribute)": [[0, "spark_rapids_ml.feature.PCA.params"]], "read() (spark_rapids_ml.feature.pca class method)": [[0, "spark_rapids_ml.feature.PCA.read"]], "save() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.save"]], "set() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.set"]], "setinputcol() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.setInputCol"]], "setinputcols() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.setInputCols"]], "setk() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.setK"]], "setoutputcol() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.setOutputCol"]], "write() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.write"]], "pcamodel (class in spark_rapids_ml.feature)": [[1, "spark_rapids_ml.feature.PCAModel"]], "clear() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.clear"]], "copy() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.copy"]], "cpu() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.cpu"]], "cuml_params (spark_rapids_ml.feature.pcamodel attribute)": [[1, "spark_rapids_ml.feature.PCAModel.cuml_params"]], "explainparam() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.explainParam"]], "explainparams() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.explainParams"]], "explainedvariance (spark_rapids_ml.feature.pcamodel attribute)": [[1, "spark_rapids_ml.feature.PCAModel.explainedVariance"]], "extractparammap() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.extractParamMap"]], "getinputcol() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.getInputCol"]], "getinputcols() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.getInputCols"]], "getk() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.getK"]], "getordefault() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.getOrDefault"]], "getoutputcol() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.getOutputCol"]], "getparam() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.getParam"]], "hasdefault() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.hasDefault"]], "hasparam() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.hasParam"]], "inputcol (spark_rapids_ml.feature.pcamodel attribute)": [[1, "spark_rapids_ml.feature.PCAModel.inputCol"]], "inputcols (spark_rapids_ml.feature.pcamodel attribute)": [[1, "spark_rapids_ml.feature.PCAModel.inputCols"]], "isdefined() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.isDefined"]], "isset() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.isSet"]], "k (spark_rapids_ml.feature.pcamodel attribute)": [[1, "spark_rapids_ml.feature.PCAModel.k"]], "load() (spark_rapids_ml.feature.pcamodel class method)": [[1, "spark_rapids_ml.feature.PCAModel.load"]], "mean (spark_rapids_ml.feature.pcamodel attribute)": [[1, "spark_rapids_ml.feature.PCAModel.mean"]], "num_workers (spark_rapids_ml.feature.pcamodel attribute)": [[1, "spark_rapids_ml.feature.PCAModel.num_workers"]], "outputcol (spark_rapids_ml.feature.pcamodel attribute)": [[1, "spark_rapids_ml.feature.PCAModel.outputCol"]], "params (spark_rapids_ml.feature.pcamodel attribute)": [[1, "spark_rapids_ml.feature.PCAModel.params"]], "pc (spark_rapids_ml.feature.pcamodel attribute)": [[1, "spark_rapids_ml.feature.PCAModel.pc"]], "read() (spark_rapids_ml.feature.pcamodel class method)": [[1, "spark_rapids_ml.feature.PCAModel.read"]], "save() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.save"]], "set() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.set"]], "setinputcol() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.setInputCol"]], "setinputcols() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.setInputCols"]], "setoutputcol() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.setOutputCol"]], "transform() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.transform"]], "write() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.write"]], "logisticregression (class in spark_rapids_ml.classification)": [[2, "spark_rapids_ml.classification.LogisticRegression"]], "clear() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.clear"]], "copy() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.copy"]], "cuml_params (spark_rapids_ml.classification.logisticregression attribute)": [[2, "spark_rapids_ml.classification.LogisticRegression.cuml_params"]], "elasticnetparam (spark_rapids_ml.classification.logisticregression attribute)": [[2, "spark_rapids_ml.classification.LogisticRegression.elasticNetParam"]], "enable_sparse_data_optim (spark_rapids_ml.classification.logisticregression attribute)": [[2, "spark_rapids_ml.classification.LogisticRegression.enable_sparse_data_optim"]], "explainparam() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.explainParam"]], "explainparams() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.explainParams"]], "extractparammap() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.extractParamMap"]], "featurescol (spark_rapids_ml.classification.logisticregression attribute)": [[2, "spark_rapids_ml.classification.LogisticRegression.featuresCol"]], "featurescols (spark_rapids_ml.classification.logisticregression attribute)": [[2, "spark_rapids_ml.classification.LogisticRegression.featuresCols"]], "fit() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.fit"]], "fitintercept (spark_rapids_ml.classification.logisticregression attribute)": [[2, "spark_rapids_ml.classification.LogisticRegression.fitIntercept"]], "fitmultiple() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.fitMultiple"]], "getelasticnetparam() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.getElasticNetParam"]], "getfeaturescol() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.getFeaturesCol"]], "getfeaturescols() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.getFeaturesCols"]], "getfitintercept() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.getFitIntercept"]], "getlabelcol() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.getLabelCol"]], "getmaxiter() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.getMaxIter"]], "getordefault() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.getOrDefault"]], "getparam() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.getParam"]], "getpredictioncol() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.getPredictionCol"]], "getprobabilitycol() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.getProbabilityCol"]], "getrawpredictioncol() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.getRawPredictionCol"]], "getregparam() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.getRegParam"]], "getstandardization() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.getStandardization"]], "gettol() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.getTol"]], "hasdefault() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.hasDefault"]], "hasparam() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.hasParam"]], "isdefined() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.isDefined"]], "isset() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.isSet"]], "labelcol (spark_rapids_ml.classification.logisticregression attribute)": [[2, "spark_rapids_ml.classification.LogisticRegression.labelCol"]], "load() (spark_rapids_ml.classification.logisticregression class method)": [[2, "spark_rapids_ml.classification.LogisticRegression.load"]], "maxiter (spark_rapids_ml.classification.logisticregression attribute)": [[2, "spark_rapids_ml.classification.LogisticRegression.maxIter"]], "num_workers (spark_rapids_ml.classification.logisticregression attribute)": [[2, "spark_rapids_ml.classification.LogisticRegression.num_workers"]], "params (spark_rapids_ml.classification.logisticregression attribute)": [[2, "spark_rapids_ml.classification.LogisticRegression.params"]], "predictioncol (spark_rapids_ml.classification.logisticregression attribute)": [[2, "spark_rapids_ml.classification.LogisticRegression.predictionCol"]], "probabilitycol (spark_rapids_ml.classification.logisticregression attribute)": [[2, "spark_rapids_ml.classification.LogisticRegression.probabilityCol"]], "rawpredictioncol (spark_rapids_ml.classification.logisticregression attribute)": [[2, "spark_rapids_ml.classification.LogisticRegression.rawPredictionCol"]], "read() (spark_rapids_ml.classification.logisticregression class method)": [[2, "spark_rapids_ml.classification.LogisticRegression.read"]], "regparam (spark_rapids_ml.classification.logisticregression attribute)": [[2, "spark_rapids_ml.classification.LogisticRegression.regParam"]], "save() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.save"]], "set() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.set"]], "setelasticnetparam() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.setElasticNetParam"]], "setfeaturescol() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.setFeaturesCol"]], "setfeaturescols() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.setFeaturesCols"]], "setfitintercept() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.setFitIntercept"]], "setlabelcol() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.setLabelCol"]], "setmaxiter() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.setMaxIter"]], "setpredictioncol() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.setPredictionCol"]], "setprobabilitycol() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.setProbabilityCol"]], "setrawpredictioncol() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.setRawPredictionCol"]], "setregparam() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.setRegParam"]], "settol() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.setTol"]], "standardization (spark_rapids_ml.classification.logisticregression attribute)": [[2, "spark_rapids_ml.classification.LogisticRegression.standardization"]], "tol (spark_rapids_ml.classification.logisticregression attribute)": [[2, "spark_rapids_ml.classification.LogisticRegression.tol"]], "write() (spark_rapids_ml.classification.logisticregression method)": [[2, "spark_rapids_ml.classification.LogisticRegression.write"]], "logisticregressionmodel (class in spark_rapids_ml.classification)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel"]], "clear() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.clear"]], "coefficientmatrix (spark_rapids_ml.classification.logisticregressionmodel attribute)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.coefficientMatrix"]], "coefficients (spark_rapids_ml.classification.logisticregressionmodel attribute)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.coefficients"]], "copy() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.copy"]], "cpu() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.cpu"]], "cuml_params (spark_rapids_ml.classification.logisticregressionmodel attribute)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.cuml_params"]], "elasticnetparam (spark_rapids_ml.classification.logisticregressionmodel attribute)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.elasticNetParam"]], "enable_sparse_data_optim (spark_rapids_ml.classification.logisticregressionmodel attribute)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.enable_sparse_data_optim"]], "evaluate() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.evaluate"]], "explainparam() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.explainParam"]], "explainparams() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.explainParams"]], "extractparammap() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.extractParamMap"]], "featurescol (spark_rapids_ml.classification.logisticregressionmodel attribute)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.featuresCol"]], "featurescols (spark_rapids_ml.classification.logisticregressionmodel attribute)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.featuresCols"]], "fitintercept (spark_rapids_ml.classification.logisticregressionmodel attribute)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.fitIntercept"]], "getelasticnetparam() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.getElasticNetParam"]], "getfeaturescol() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.getFeaturesCol"]], "getfeaturescols() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.getFeaturesCols"]], "getfitintercept() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.getFitIntercept"]], "getlabelcol() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.getLabelCol"]], "getmaxiter() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.getMaxIter"]], "getordefault() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.getOrDefault"]], "getparam() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.getParam"]], "getpredictioncol() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.getPredictionCol"]], "getprobabilitycol() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.getProbabilityCol"]], "getrawpredictioncol() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.getRawPredictionCol"]], "getregparam() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.getRegParam"]], "getstandardization() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.getStandardization"]], "gettol() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.getTol"]], "hasdefault() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.hasDefault"]], "hasparam() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.hasParam"]], "hassummary (spark_rapids_ml.classification.logisticregressionmodel attribute)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.hasSummary"]], "intercept (spark_rapids_ml.classification.logisticregressionmodel attribute)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.intercept"]], "interceptvector (spark_rapids_ml.classification.logisticregressionmodel attribute)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.interceptVector"]], "isdefined() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.isDefined"]], "isset() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.isSet"]], "labelcol (spark_rapids_ml.classification.logisticregressionmodel attribute)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.labelCol"]], "load() (spark_rapids_ml.classification.logisticregressionmodel class method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.load"]], "maxiter (spark_rapids_ml.classification.logisticregressionmodel attribute)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.maxIter"]], "numclasses (spark_rapids_ml.classification.logisticregressionmodel attribute)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.numClasses"]], "numfeatures (spark_rapids_ml.classification.logisticregressionmodel attribute)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.numFeatures"]], "num_workers (spark_rapids_ml.classification.logisticregressionmodel attribute)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.num_workers"]], "params (spark_rapids_ml.classification.logisticregressionmodel attribute)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.params"]], "predict() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.predict"]], "predictprobability() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.predictProbability"]], "predictraw() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.predictRaw"]], "predictioncol (spark_rapids_ml.classification.logisticregressionmodel attribute)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.predictionCol"]], "probabilitycol (spark_rapids_ml.classification.logisticregressionmodel attribute)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.probabilityCol"]], "rawpredictioncol (spark_rapids_ml.classification.logisticregressionmodel attribute)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.rawPredictionCol"]], "read() (spark_rapids_ml.classification.logisticregressionmodel class method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.read"]], "regparam (spark_rapids_ml.classification.logisticregressionmodel attribute)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.regParam"]], "save() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.save"]], "set() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.set"]], "setfeaturescol() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.setFeaturesCol"]], "setfeaturescols() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.setFeaturesCols"]], "setlabelcol() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.setLabelCol"]], "setpredictioncol() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.setPredictionCol"]], "setprobabilitycol() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.setProbabilityCol"]], "setrawpredictioncol() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.setRawPredictionCol"]], "standardization (spark_rapids_ml.classification.logisticregressionmodel attribute)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.standardization"]], "summary (spark_rapids_ml.classification.logisticregressionmodel attribute)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.summary"]], "tol (spark_rapids_ml.classification.logisticregressionmodel attribute)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.tol"]], "transform() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.transform"]], "write() (spark_rapids_ml.classification.logisticregressionmodel method)": [[3, "spark_rapids_ml.classification.LogisticRegressionModel.write"]], "randomforestclassificationmodel (class in spark_rapids_ml.classification)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel"]], "bootstrap (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.bootstrap"]], "clear() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.clear"]], "copy() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.copy"]], "cpu() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.cpu"]], "cuml_params (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.cuml_params"]], "evaluate() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.evaluate"]], "explainparam() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.explainParam"]], "explainparams() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.explainParams"]], "extractparammap() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.extractParamMap"]], "featureimportances (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.featureImportances"]], "featuresubsetstrategy (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.featureSubsetStrategy"]], "featurescol (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.featuresCol"]], "featurescols (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.featuresCols"]], "getbootstrap() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.getBootstrap"]], "getfeaturesubsetstrategy() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.getFeatureSubsetStrategy"]], "getfeaturescol() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.getFeaturesCol"]], "getfeaturescols() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.getFeaturesCols"]], "getimpurity() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.getImpurity"]], "getlabelcol() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.getLabelCol"]], "getmaxbins() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.getMaxBins"]], "getmaxdepth() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.getMaxDepth"]], "getmininstancespernode() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.getMinInstancesPerNode"]], "getnumtrees (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.getNumTrees"]], "getordefault() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.getOrDefault"]], "getparam() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.getParam"]], "getpredictioncol() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.getPredictionCol"]], "getprobabilitycol() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.getProbabilityCol"]], "getrawpredictioncol() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.getRawPredictionCol"]], "getseed() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.getSeed"]], "hasdefault() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.hasDefault"]], "hasparam() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.hasParam"]], "hassummary (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.hasSummary"]], "impurity (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.impurity"]], "isdefined() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.isDefined"]], "isset() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.isSet"]], "labelcol (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.labelCol"]], "load() (spark_rapids_ml.classification.randomforestclassificationmodel class method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.load"]], "maxbins (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.maxBins"]], "maxdepth (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.maxDepth"]], "mininstancespernode (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.minInstancesPerNode"]], "numclasses (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.numClasses"]], "numfeatures (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.numFeatures"]], "numtrees (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.numTrees"]], "num_workers (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.num_workers"]], "params (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.params"]], "predict() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.predict"]], "predictleaf() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.predictLeaf"]], "predictprobability() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.predictProbability"]], "predictraw() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.predictRaw"]], "predictioncol (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.predictionCol"]], "probabilitycol (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.probabilityCol"]], "rawpredictioncol (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.rawPredictionCol"]], "read() (spark_rapids_ml.classification.randomforestclassificationmodel class method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.read"]], "save() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.save"]], "seed (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.seed"]], "set() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.set"]], "setfeaturescol() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.setFeaturesCol"]], "setfeaturescols() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.setFeaturesCols"]], "setlabelcol() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.setLabelCol"]], "setpredictioncol() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.setPredictionCol"]], "setprobabilitycol() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.setProbabilityCol"]], "setrawpredictioncol() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.setRawPredictionCol"]], "supportedfeaturesubsetstrategies (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.supportedFeatureSubsetStrategies"]], "supportedimpurities (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.supportedImpurities"]], "todebugstring (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.toDebugString"]], "totalnumnodes (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.totalNumNodes"]], "transform() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.transform"]], "treeweights (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.treeWeights"]], "trees (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.trees"]], "write() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[4, "spark_rapids_ml.classification.RandomForestClassificationModel.write"]], "randomforestclassifier (class in spark_rapids_ml.classification)": [[5, "spark_rapids_ml.classification.RandomForestClassifier"]], "bootstrap (spark_rapids_ml.classification.randomforestclassifier attribute)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.bootstrap"]], "clear() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.clear"]], "copy() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.copy"]], "cuml_params (spark_rapids_ml.classification.randomforestclassifier attribute)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.cuml_params"]], "explainparam() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.explainParam"]], "explainparams() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.explainParams"]], "extractparammap() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.extractParamMap"]], "featuresubsetstrategy (spark_rapids_ml.classification.randomforestclassifier attribute)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.featureSubsetStrategy"]], "featurescol (spark_rapids_ml.classification.randomforestclassifier attribute)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.featuresCol"]], "featurescols (spark_rapids_ml.classification.randomforestclassifier attribute)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.featuresCols"]], "fit() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.fit"]], "fitmultiple() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.fitMultiple"]], "getbootstrap() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.getBootstrap"]], "getfeaturesubsetstrategy() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.getFeatureSubsetStrategy"]], "getfeaturescol() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.getFeaturesCol"]], "getfeaturescols() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.getFeaturesCols"]], "getimpurity() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.getImpurity"]], "getlabelcol() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.getLabelCol"]], "getmaxbins() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.getMaxBins"]], "getmaxdepth() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.getMaxDepth"]], "getmininstancespernode() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.getMinInstancesPerNode"]], "getnumtrees() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.getNumTrees"]], "getordefault() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.getOrDefault"]], "getparam() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.getParam"]], "getprobabilitycol() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.getProbabilityCol"]], "getrawpredictioncol() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.getRawPredictionCol"]], "getseed() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.getSeed"]], "hasdefault() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.hasDefault"]], "hasparam() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.hasParam"]], "impurity (spark_rapids_ml.classification.randomforestclassifier attribute)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.impurity"]], "isdefined() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.isDefined"]], "isset() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.isSet"]], "labelcol (spark_rapids_ml.classification.randomforestclassifier attribute)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.labelCol"]], "load() (spark_rapids_ml.classification.randomforestclassifier class method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.load"]], "maxbins (spark_rapids_ml.classification.randomforestclassifier attribute)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.maxBins"]], "maxdepth (spark_rapids_ml.classification.randomforestclassifier attribute)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.maxDepth"]], "mininstancespernode (spark_rapids_ml.classification.randomforestclassifier attribute)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.minInstancesPerNode"]], "numtrees (spark_rapids_ml.classification.randomforestclassifier attribute)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.numTrees"]], "num_workers (spark_rapids_ml.classification.randomforestclassifier attribute)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.num_workers"]], "params (spark_rapids_ml.classification.randomforestclassifier attribute)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.params"]], "probabilitycol (spark_rapids_ml.classification.randomforestclassifier attribute)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.probabilityCol"]], "rawpredictioncol (spark_rapids_ml.classification.randomforestclassifier attribute)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.rawPredictionCol"]], "read() (spark_rapids_ml.classification.randomforestclassifier class method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.read"]], "save() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.save"]], "seed (spark_rapids_ml.classification.randomforestclassifier attribute)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.seed"]], "set() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.set"]], "setbootstrap() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.setBootstrap"]], "setfeaturesubsetstrategy() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.setFeatureSubsetStrategy"]], "setfeaturescol() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.setFeaturesCol"]], "setfeaturescols() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.setFeaturesCols"]], "setimpurity() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.setImpurity"]], "setlabelcol() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.setLabelCol"]], "setmaxbins() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.setMaxBins"]], "setmaxdepth() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.setMaxDepth"]], "setmininstancespernode() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.setMinInstancesPerNode"]], "setnumtrees() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.setNumTrees"]], "setpredictioncol() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.setPredictionCol"]], "setprobabilitycol() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.setProbabilityCol"]], "setrawpredictioncol() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.setRawPredictionCol"]], "setseed() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.setSeed"]], "supportedfeaturesubsetstrategies (spark_rapids_ml.classification.randomforestclassifier attribute)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.supportedFeatureSubsetStrategies"]], "supportedimpurities (spark_rapids_ml.classification.randomforestclassifier attribute)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.supportedImpurities"]], "write() (spark_rapids_ml.classification.randomforestclassifier method)": [[5, "spark_rapids_ml.classification.RandomForestClassifier.write"]], "dbscan (class in spark_rapids_ml.clustering)": [[6, "spark_rapids_ml.clustering.DBSCAN"]], "algorithm (spark_rapids_ml.clustering.dbscan attribute)": [[6, "spark_rapids_ml.clustering.DBSCAN.algorithm"]], "calc_core_sample_indices (spark_rapids_ml.clustering.dbscan attribute)": [[6, "spark_rapids_ml.clustering.DBSCAN.calc_core_sample_indices"]], "clear() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.clear"]], "copy() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.copy"]], "cuml_params (spark_rapids_ml.clustering.dbscan attribute)": [[6, "spark_rapids_ml.clustering.DBSCAN.cuml_params"]], "eps (spark_rapids_ml.clustering.dbscan attribute)": [[6, "spark_rapids_ml.clustering.DBSCAN.eps"]], "explainparam() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.explainParam"]], "explainparams() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.explainParams"]], "extractparammap() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.extractParamMap"]], "featurescol (spark_rapids_ml.clustering.dbscan attribute)": [[6, "spark_rapids_ml.clustering.DBSCAN.featuresCol"]], "featurescols (spark_rapids_ml.clustering.dbscan attribute)": [[6, "spark_rapids_ml.clustering.DBSCAN.featuresCols"]], "fit() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.fit"]], "fitmultiple() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.fitMultiple"]], "getalgorithm() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.getAlgorithm"]], "getcalccoresampleindices() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.getCalcCoreSampleIndices"]], "geteps() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.getEps"]], "getfeaturescol() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.getFeaturesCol"]], "getfeaturescols() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.getFeaturesCols"]], "getidcol() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.getIdCol"]], "getmaxmbytesperbatch() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.getMaxMbytesPerBatch"]], "getmetric() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.getMetric"]], "getminsamples() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.getMinSamples"]], "getordefault() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.getOrDefault"]], "getparam() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.getParam"]], "hasdefault() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.hasDefault"]], "hasparam() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.hasParam"]], "idcol (spark_rapids_ml.clustering.dbscan attribute)": [[6, "spark_rapids_ml.clustering.DBSCAN.idCol"]], "isdefined() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.isDefined"]], "isset() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.isSet"]], "load() (spark_rapids_ml.clustering.dbscan class method)": [[6, "spark_rapids_ml.clustering.DBSCAN.load"]], "max_mbytes_per_batch (spark_rapids_ml.clustering.dbscan attribute)": [[6, "spark_rapids_ml.clustering.DBSCAN.max_mbytes_per_batch"]], "metric (spark_rapids_ml.clustering.dbscan attribute)": [[6, "spark_rapids_ml.clustering.DBSCAN.metric"]], "min_samples (spark_rapids_ml.clustering.dbscan attribute)": [[6, "spark_rapids_ml.clustering.DBSCAN.min_samples"]], "num_workers (spark_rapids_ml.clustering.dbscan attribute)": [[6, "spark_rapids_ml.clustering.DBSCAN.num_workers"]], "params (spark_rapids_ml.clustering.dbscan attribute)": [[6, "spark_rapids_ml.clustering.DBSCAN.params"]], "read() (spark_rapids_ml.clustering.dbscan class method)": [[6, "spark_rapids_ml.clustering.DBSCAN.read"]], "save() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.save"]], "set() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.set"]], "setalgorithm() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.setAlgorithm"]], "setcalccoresampleindices() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.setCalcCoreSampleIndices"]], "seteps() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.setEps"]], "setfeaturescol() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.setFeaturesCol"]], "setfeaturescols() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.setFeaturesCols"]], "setidcol() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.setIdCol"]], "setmaxmbytesperbatch() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.setMaxMbytesPerBatch"]], "setmetric() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.setMetric"]], "setminsamples() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.setMinSamples"]], "setpredictioncol() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.setPredictionCol"]], "write() (spark_rapids_ml.clustering.dbscan method)": [[6, "spark_rapids_ml.clustering.DBSCAN.write"]], "dbscanmodel (class in spark_rapids_ml.clustering)": [[7, "spark_rapids_ml.clustering.DBSCANModel"]], "algorithm (spark_rapids_ml.clustering.dbscanmodel attribute)": [[7, "spark_rapids_ml.clustering.DBSCANModel.algorithm"]], "calc_core_sample_indices (spark_rapids_ml.clustering.dbscanmodel attribute)": [[7, "spark_rapids_ml.clustering.DBSCANModel.calc_core_sample_indices"]], "clear() (spark_rapids_ml.clustering.dbscanmodel method)": [[7, "spark_rapids_ml.clustering.DBSCANModel.clear"]], "copy() (spark_rapids_ml.clustering.dbscanmodel method)": [[7, "spark_rapids_ml.clustering.DBSCANModel.copy"]], "cpu() (spark_rapids_ml.clustering.dbscanmodel method)": [[7, "spark_rapids_ml.clustering.DBSCANModel.cpu"]], "cuml_params (spark_rapids_ml.clustering.dbscanmodel attribute)": [[7, "spark_rapids_ml.clustering.DBSCANModel.cuml_params"]], "eps (spark_rapids_ml.clustering.dbscanmodel attribute)": [[7, "spark_rapids_ml.clustering.DBSCANModel.eps"]], "explainparam() (spark_rapids_ml.clustering.dbscanmodel method)": [[7, "spark_rapids_ml.clustering.DBSCANModel.explainParam"]], "explainparams() (spark_rapids_ml.clustering.dbscanmodel method)": [[7, "spark_rapids_ml.clustering.DBSCANModel.explainParams"]], "extractparammap() (spark_rapids_ml.clustering.dbscanmodel method)": [[7, "spark_rapids_ml.clustering.DBSCANModel.extractParamMap"]], "featurescol (spark_rapids_ml.clustering.dbscanmodel attribute)": [[7, "spark_rapids_ml.clustering.DBSCANModel.featuresCol"]], "featurescols (spark_rapids_ml.clustering.dbscanmodel attribute)": [[7, "spark_rapids_ml.clustering.DBSCANModel.featuresCols"]], "getfeaturescol() (spark_rapids_ml.clustering.dbscanmodel method)": [[7, "spark_rapids_ml.clustering.DBSCANModel.getFeaturesCol"]], "getfeaturescols() (spark_rapids_ml.clustering.dbscanmodel method)": [[7, "spark_rapids_ml.clustering.DBSCANModel.getFeaturesCols"]], "getidcol() (spark_rapids_ml.clustering.dbscanmodel method)": [[7, "spark_rapids_ml.clustering.DBSCANModel.getIdCol"]], "getordefault() (spark_rapids_ml.clustering.dbscanmodel method)": [[7, "spark_rapids_ml.clustering.DBSCANModel.getOrDefault"]], "getparam() (spark_rapids_ml.clustering.dbscanmodel method)": [[7, "spark_rapids_ml.clustering.DBSCANModel.getParam"]], "getpredictioncol() (spark_rapids_ml.clustering.dbscanmodel method)": [[7, "spark_rapids_ml.clustering.DBSCANModel.getPredictionCol"]], "hasdefault() (spark_rapids_ml.clustering.dbscanmodel method)": [[7, "spark_rapids_ml.clustering.DBSCANModel.hasDefault"]], "hasparam() (spark_rapids_ml.clustering.dbscanmodel method)": [[7, "spark_rapids_ml.clustering.DBSCANModel.hasParam"]], "idcol (spark_rapids_ml.clustering.dbscanmodel attribute)": [[7, "spark_rapids_ml.clustering.DBSCANModel.idCol"]], "isdefined() (spark_rapids_ml.clustering.dbscanmodel method)": [[7, "spark_rapids_ml.clustering.DBSCANModel.isDefined"]], "isset() (spark_rapids_ml.clustering.dbscanmodel method)": [[7, "spark_rapids_ml.clustering.DBSCANModel.isSet"]], "load() (spark_rapids_ml.clustering.dbscanmodel class method)": [[7, "spark_rapids_ml.clustering.DBSCANModel.load"]], "max_mbytes_per_batch (spark_rapids_ml.clustering.dbscanmodel attribute)": [[7, "spark_rapids_ml.clustering.DBSCANModel.max_mbytes_per_batch"]], "metric (spark_rapids_ml.clustering.dbscanmodel attribute)": [[7, "spark_rapids_ml.clustering.DBSCANModel.metric"]], "min_samples (spark_rapids_ml.clustering.dbscanmodel attribute)": [[7, "spark_rapids_ml.clustering.DBSCANModel.min_samples"]], "numfeatures (spark_rapids_ml.clustering.dbscanmodel attribute)": [[7, "spark_rapids_ml.clustering.DBSCANModel.numFeatures"]], "num_workers (spark_rapids_ml.clustering.dbscanmodel attribute)": [[7, "spark_rapids_ml.clustering.DBSCANModel.num_workers"]], "params (spark_rapids_ml.clustering.dbscanmodel attribute)": [[7, "spark_rapids_ml.clustering.DBSCANModel.params"]], "predictioncol (spark_rapids_ml.clustering.dbscanmodel attribute)": [[7, "spark_rapids_ml.clustering.DBSCANModel.predictionCol"]], "read() (spark_rapids_ml.clustering.dbscanmodel class method)": [[7, "spark_rapids_ml.clustering.DBSCANModel.read"]], "save() (spark_rapids_ml.clustering.dbscanmodel method)": [[7, "spark_rapids_ml.clustering.DBSCANModel.save"]], "set() (spark_rapids_ml.clustering.dbscanmodel method)": [[7, "spark_rapids_ml.clustering.DBSCANModel.set"]], "setfeaturescol() (spark_rapids_ml.clustering.dbscanmodel method)": [[7, "spark_rapids_ml.clustering.DBSCANModel.setFeaturesCol"]], "setfeaturescols() (spark_rapids_ml.clustering.dbscanmodel method)": [[7, "spark_rapids_ml.clustering.DBSCANModel.setFeaturesCols"]], "setidcol() (spark_rapids_ml.clustering.dbscanmodel method)": [[7, "spark_rapids_ml.clustering.DBSCANModel.setIdCol"]], "setpredictioncol() (spark_rapids_ml.clustering.dbscanmodel method)": [[7, "spark_rapids_ml.clustering.DBSCANModel.setPredictionCol"]], "transform() (spark_rapids_ml.clustering.dbscanmodel method)": [[7, "spark_rapids_ml.clustering.DBSCANModel.transform"]], "write() (spark_rapids_ml.clustering.dbscanmodel method)": [[7, "spark_rapids_ml.clustering.DBSCANModel.write"]], "kmeans (class in spark_rapids_ml.clustering)": [[8, "spark_rapids_ml.clustering.KMeans"]], "clear() (spark_rapids_ml.clustering.kmeans method)": [[8, "spark_rapids_ml.clustering.KMeans.clear"]], "copy() (spark_rapids_ml.clustering.kmeans method)": [[8, "spark_rapids_ml.clustering.KMeans.copy"]], "cuml_params (spark_rapids_ml.clustering.kmeans attribute)": [[8, "spark_rapids_ml.clustering.KMeans.cuml_params"]], "explainparam() (spark_rapids_ml.clustering.kmeans method)": [[8, "spark_rapids_ml.clustering.KMeans.explainParam"]], "explainparams() (spark_rapids_ml.clustering.kmeans method)": [[8, "spark_rapids_ml.clustering.KMeans.explainParams"]], "extractparammap() (spark_rapids_ml.clustering.kmeans method)": [[8, "spark_rapids_ml.clustering.KMeans.extractParamMap"]], "featurescol (spark_rapids_ml.clustering.kmeans attribute)": [[8, "spark_rapids_ml.clustering.KMeans.featuresCol"]], "featurescols (spark_rapids_ml.clustering.kmeans attribute)": [[8, "spark_rapids_ml.clustering.KMeans.featuresCols"]], "fit() (spark_rapids_ml.clustering.kmeans method)": [[8, "spark_rapids_ml.clustering.KMeans.fit"]], "fitmultiple() (spark_rapids_ml.clustering.kmeans method)": [[8, "spark_rapids_ml.clustering.KMeans.fitMultiple"]], "getfeaturescol() (spark_rapids_ml.clustering.kmeans method)": [[8, "spark_rapids_ml.clustering.KMeans.getFeaturesCol"]], "getfeaturescols() (spark_rapids_ml.clustering.kmeans method)": [[8, "spark_rapids_ml.clustering.KMeans.getFeaturesCols"]], "getinitmode() (spark_rapids_ml.clustering.kmeans method)": [[8, "spark_rapids_ml.clustering.KMeans.getInitMode"]], "getk() (spark_rapids_ml.clustering.kmeans method)": [[8, "spark_rapids_ml.clustering.KMeans.getK"]], "getmaxiter() (spark_rapids_ml.clustering.kmeans method)": [[8, "spark_rapids_ml.clustering.KMeans.getMaxIter"]], "getordefault() (spark_rapids_ml.clustering.kmeans method)": [[8, "spark_rapids_ml.clustering.KMeans.getOrDefault"]], "getparam() (spark_rapids_ml.clustering.kmeans method)": [[8, "spark_rapids_ml.clustering.KMeans.getParam"]], "getpredictioncol() (spark_rapids_ml.clustering.kmeans method)": [[8, "spark_rapids_ml.clustering.KMeans.getPredictionCol"]], "getseed() (spark_rapids_ml.clustering.kmeans method)": [[8, "spark_rapids_ml.clustering.KMeans.getSeed"]], "gettol() (spark_rapids_ml.clustering.kmeans method)": [[8, "spark_rapids_ml.clustering.KMeans.getTol"]], "hasdefault() (spark_rapids_ml.clustering.kmeans method)": [[8, "spark_rapids_ml.clustering.KMeans.hasDefault"]], "hasparam() (spark_rapids_ml.clustering.kmeans method)": [[8, "spark_rapids_ml.clustering.KMeans.hasParam"]], "initmode (spark_rapids_ml.clustering.kmeans attribute)": [[8, "spark_rapids_ml.clustering.KMeans.initMode"]], "isdefined() (spark_rapids_ml.clustering.kmeans method)": [[8, "spark_rapids_ml.clustering.KMeans.isDefined"]], "isset() (spark_rapids_ml.clustering.kmeans method)": [[8, "spark_rapids_ml.clustering.KMeans.isSet"]], "k (spark_rapids_ml.clustering.kmeans attribute)": [[8, "spark_rapids_ml.clustering.KMeans.k"]], "load() (spark_rapids_ml.clustering.kmeans class method)": [[8, "spark_rapids_ml.clustering.KMeans.load"]], "maxiter (spark_rapids_ml.clustering.kmeans attribute)": [[8, "spark_rapids_ml.clustering.KMeans.maxIter"]], "num_workers (spark_rapids_ml.clustering.kmeans attribute)": [[8, "spark_rapids_ml.clustering.KMeans.num_workers"]], "params (spark_rapids_ml.clustering.kmeans attribute)": [[8, "spark_rapids_ml.clustering.KMeans.params"]], "predictioncol (spark_rapids_ml.clustering.kmeans attribute)": [[8, "spark_rapids_ml.clustering.KMeans.predictionCol"]], "read() (spark_rapids_ml.clustering.kmeans class method)": [[8, "spark_rapids_ml.clustering.KMeans.read"]], "save() (spark_rapids_ml.clustering.kmeans method)": [[8, "spark_rapids_ml.clustering.KMeans.save"]], "seed (spark_rapids_ml.clustering.kmeans attribute)": [[8, "spark_rapids_ml.clustering.KMeans.seed"]], "set() (spark_rapids_ml.clustering.kmeans method)": [[8, "spark_rapids_ml.clustering.KMeans.set"]], "setfeaturescol() (spark_rapids_ml.clustering.kmeans method)": [[8, "spark_rapids_ml.clustering.KMeans.setFeaturesCol"]], "setfeaturescols() (spark_rapids_ml.clustering.kmeans method)": [[8, "spark_rapids_ml.clustering.KMeans.setFeaturesCols"]], "setk() (spark_rapids_ml.clustering.kmeans method)": [[8, "spark_rapids_ml.clustering.KMeans.setK"]], "setmaxiter() (spark_rapids_ml.clustering.kmeans method)": [[8, "spark_rapids_ml.clustering.KMeans.setMaxIter"]], "setpredictioncol() (spark_rapids_ml.clustering.kmeans method)": [[8, "spark_rapids_ml.clustering.KMeans.setPredictionCol"]], "setseed() (spark_rapids_ml.clustering.kmeans method)": [[8, "spark_rapids_ml.clustering.KMeans.setSeed"]], "settol() (spark_rapids_ml.clustering.kmeans method)": [[8, "spark_rapids_ml.clustering.KMeans.setTol"]], "tol (spark_rapids_ml.clustering.kmeans attribute)": [[8, "spark_rapids_ml.clustering.KMeans.tol"]], "write() (spark_rapids_ml.clustering.kmeans method)": [[8, "spark_rapids_ml.clustering.KMeans.write"]], "kmeansmodel (class in spark_rapids_ml.clustering)": [[9, "spark_rapids_ml.clustering.KMeansModel"]], "clear() (spark_rapids_ml.clustering.kmeansmodel method)": [[9, "spark_rapids_ml.clustering.KMeansModel.clear"]], "clustercenters() (spark_rapids_ml.clustering.kmeansmodel method)": [[9, "spark_rapids_ml.clustering.KMeansModel.clusterCenters"]], "copy() (spark_rapids_ml.clustering.kmeansmodel method)": [[9, "spark_rapids_ml.clustering.KMeansModel.copy"]], "cpu() (spark_rapids_ml.clustering.kmeansmodel method)": [[9, "spark_rapids_ml.clustering.KMeansModel.cpu"]], "cuml_params (spark_rapids_ml.clustering.kmeansmodel attribute)": [[9, "spark_rapids_ml.clustering.KMeansModel.cuml_params"]], "explainparam() (spark_rapids_ml.clustering.kmeansmodel method)": [[9, "spark_rapids_ml.clustering.KMeansModel.explainParam"]], "explainparams() (spark_rapids_ml.clustering.kmeansmodel method)": [[9, "spark_rapids_ml.clustering.KMeansModel.explainParams"]], "extractparammap() (spark_rapids_ml.clustering.kmeansmodel method)": [[9, "spark_rapids_ml.clustering.KMeansModel.extractParamMap"]], "featurescol (spark_rapids_ml.clustering.kmeansmodel attribute)": [[9, "spark_rapids_ml.clustering.KMeansModel.featuresCol"]], "featurescols (spark_rapids_ml.clustering.kmeansmodel attribute)": [[9, "spark_rapids_ml.clustering.KMeansModel.featuresCols"]], "getfeaturescol() (spark_rapids_ml.clustering.kmeansmodel method)": [[9, "spark_rapids_ml.clustering.KMeansModel.getFeaturesCol"]], "getfeaturescols() (spark_rapids_ml.clustering.kmeansmodel method)": [[9, "spark_rapids_ml.clustering.KMeansModel.getFeaturesCols"]], "getinitmode() (spark_rapids_ml.clustering.kmeansmodel method)": [[9, "spark_rapids_ml.clustering.KMeansModel.getInitMode"]], "getk() (spark_rapids_ml.clustering.kmeansmodel method)": [[9, "spark_rapids_ml.clustering.KMeansModel.getK"]], "getmaxiter() (spark_rapids_ml.clustering.kmeansmodel method)": [[9, "spark_rapids_ml.clustering.KMeansModel.getMaxIter"]], "getordefault() (spark_rapids_ml.clustering.kmeansmodel method)": [[9, "spark_rapids_ml.clustering.KMeansModel.getOrDefault"]], "getparam() (spark_rapids_ml.clustering.kmeansmodel method)": [[9, "spark_rapids_ml.clustering.KMeansModel.getParam"]], "getpredictioncol() (spark_rapids_ml.clustering.kmeansmodel method)": [[9, "spark_rapids_ml.clustering.KMeansModel.getPredictionCol"]], "getseed() (spark_rapids_ml.clustering.kmeansmodel method)": [[9, "spark_rapids_ml.clustering.KMeansModel.getSeed"]], "gettol() (spark_rapids_ml.clustering.kmeansmodel method)": [[9, "spark_rapids_ml.clustering.KMeansModel.getTol"]], "hasdefault() (spark_rapids_ml.clustering.kmeansmodel method)": [[9, "spark_rapids_ml.clustering.KMeansModel.hasDefault"]], "hasparam() (spark_rapids_ml.clustering.kmeansmodel method)": [[9, "spark_rapids_ml.clustering.KMeansModel.hasParam"]], "hassummary (spark_rapids_ml.clustering.kmeansmodel attribute)": [[9, "spark_rapids_ml.clustering.KMeansModel.hasSummary"]], "initmode (spark_rapids_ml.clustering.kmeansmodel attribute)": [[9, "spark_rapids_ml.clustering.KMeansModel.initMode"]], "isdefined() (spark_rapids_ml.clustering.kmeansmodel method)": [[9, "spark_rapids_ml.clustering.KMeansModel.isDefined"]], "isset() (spark_rapids_ml.clustering.kmeansmodel method)": [[9, "spark_rapids_ml.clustering.KMeansModel.isSet"]], "k (spark_rapids_ml.clustering.kmeansmodel attribute)": [[9, "spark_rapids_ml.clustering.KMeansModel.k"]], "load() (spark_rapids_ml.clustering.kmeansmodel class method)": [[9, "spark_rapids_ml.clustering.KMeansModel.load"]], "maxiter (spark_rapids_ml.clustering.kmeansmodel attribute)": [[9, "spark_rapids_ml.clustering.KMeansModel.maxIter"]], "numfeatures (spark_rapids_ml.clustering.kmeansmodel attribute)": [[9, "spark_rapids_ml.clustering.KMeansModel.numFeatures"]], "num_workers (spark_rapids_ml.clustering.kmeansmodel attribute)": [[9, "spark_rapids_ml.clustering.KMeansModel.num_workers"]], "params (spark_rapids_ml.clustering.kmeansmodel attribute)": [[9, "spark_rapids_ml.clustering.KMeansModel.params"]], "predict() (spark_rapids_ml.clustering.kmeansmodel method)": [[9, "spark_rapids_ml.clustering.KMeansModel.predict"]], "predictioncol (spark_rapids_ml.clustering.kmeansmodel attribute)": [[9, "spark_rapids_ml.clustering.KMeansModel.predictionCol"]], "read() (spark_rapids_ml.clustering.kmeansmodel class method)": [[9, "spark_rapids_ml.clustering.KMeansModel.read"]], "save() (spark_rapids_ml.clustering.kmeansmodel method)": [[9, "spark_rapids_ml.clustering.KMeansModel.save"]], "seed (spark_rapids_ml.clustering.kmeansmodel attribute)": [[9, "spark_rapids_ml.clustering.KMeansModel.seed"]], "set() (spark_rapids_ml.clustering.kmeansmodel method)": [[9, "spark_rapids_ml.clustering.KMeansModel.set"]], "setfeaturescol() (spark_rapids_ml.clustering.kmeansmodel method)": [[9, "spark_rapids_ml.clustering.KMeansModel.setFeaturesCol"]], "setfeaturescols() (spark_rapids_ml.clustering.kmeansmodel method)": [[9, "spark_rapids_ml.clustering.KMeansModel.setFeaturesCols"]], "setpredictioncol() (spark_rapids_ml.clustering.kmeansmodel method)": [[9, "spark_rapids_ml.clustering.KMeansModel.setPredictionCol"]], "tol (spark_rapids_ml.clustering.kmeansmodel attribute)": [[9, "spark_rapids_ml.clustering.KMeansModel.tol"]], "transform() (spark_rapids_ml.clustering.kmeansmodel method)": [[9, "spark_rapids_ml.clustering.KMeansModel.transform"]], "write() (spark_rapids_ml.clustering.kmeansmodel method)": [[9, "spark_rapids_ml.clustering.KMeansModel.write"]], "approximatenearestneighbors (class in spark_rapids_ml.knn)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors"]], "algoparams (spark_rapids_ml.knn.approximatenearestneighbors attribute)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.algoParams"]], "algorithm (spark_rapids_ml.knn.approximatenearestneighbors attribute)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.algorithm"]], "clear() (spark_rapids_ml.knn.approximatenearestneighbors method)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.clear"]], "copy() (spark_rapids_ml.knn.approximatenearestneighbors method)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.copy"]], "cuml_params (spark_rapids_ml.knn.approximatenearestneighbors attribute)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.cuml_params"]], "explainparam() (spark_rapids_ml.knn.approximatenearestneighbors method)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.explainParam"]], "explainparams() (spark_rapids_ml.knn.approximatenearestneighbors method)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.explainParams"]], "extractparammap() (spark_rapids_ml.knn.approximatenearestneighbors method)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.extractParamMap"]], "fit() (spark_rapids_ml.knn.approximatenearestneighbors method)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.fit"]], "fitmultiple() (spark_rapids_ml.knn.approximatenearestneighbors method)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.fitMultiple"]], "getalgoparams() (spark_rapids_ml.knn.approximatenearestneighbors method)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.getAlgoParams"]], "getalgorithm() (spark_rapids_ml.knn.approximatenearestneighbors method)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.getAlgorithm"]], "getidcol() (spark_rapids_ml.knn.approximatenearestneighbors method)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.getIdCol"]], "getinputcol() (spark_rapids_ml.knn.approximatenearestneighbors method)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.getInputCol"]], "getinputcols() (spark_rapids_ml.knn.approximatenearestneighbors method)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.getInputCols"]], "getk() (spark_rapids_ml.knn.approximatenearestneighbors method)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.getK"]], "getlabelcol() (spark_rapids_ml.knn.approximatenearestneighbors method)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.getLabelCol"]], "getmetric() (spark_rapids_ml.knn.approximatenearestneighbors method)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.getMetric"]], "getordefault() (spark_rapids_ml.knn.approximatenearestneighbors method)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.getOrDefault"]], "getparam() (spark_rapids_ml.knn.approximatenearestneighbors method)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.getParam"]], "hasdefault() (spark_rapids_ml.knn.approximatenearestneighbors method)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.hasDefault"]], "hasparam() (spark_rapids_ml.knn.approximatenearestneighbors method)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.hasParam"]], "idcol (spark_rapids_ml.knn.approximatenearestneighbors attribute)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.idCol"]], "inputcol (spark_rapids_ml.knn.approximatenearestneighbors attribute)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.inputCol"]], "inputcols (spark_rapids_ml.knn.approximatenearestneighbors attribute)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.inputCols"]], "isdefined() (spark_rapids_ml.knn.approximatenearestneighbors method)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.isDefined"]], "isset() (spark_rapids_ml.knn.approximatenearestneighbors method)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.isSet"]], "k (spark_rapids_ml.knn.approximatenearestneighbors attribute)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.k"]], "labelcol (spark_rapids_ml.knn.approximatenearestneighbors attribute)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.labelCol"]], "metric (spark_rapids_ml.knn.approximatenearestneighbors attribute)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.metric"]], "num_workers (spark_rapids_ml.knn.approximatenearestneighbors attribute)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.num_workers"]], "params (spark_rapids_ml.knn.approximatenearestneighbors attribute)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.params"]], "set() (spark_rapids_ml.knn.approximatenearestneighbors method)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.set"]], "setalgoparams() (spark_rapids_ml.knn.approximatenearestneighbors method)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.setAlgoParams"]], "setalgorithm() (spark_rapids_ml.knn.approximatenearestneighbors method)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.setAlgorithm"]], "setidcol() (spark_rapids_ml.knn.approximatenearestneighbors method)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.setIdCol"]], "setinputcol() (spark_rapids_ml.knn.approximatenearestneighbors method)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.setInputCol"]], "setinputcols() (spark_rapids_ml.knn.approximatenearestneighbors method)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.setInputCols"]], "setk() (spark_rapids_ml.knn.approximatenearestneighbors method)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.setK"]], "setmetric() (spark_rapids_ml.knn.approximatenearestneighbors method)": [[10, "spark_rapids_ml.knn.ApproximateNearestNeighbors.setMetric"]], "approximatenearestneighborsmodel (class in spark_rapids_ml.knn)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel"]], "algoparams (spark_rapids_ml.knn.approximatenearestneighborsmodel attribute)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.algoParams"]], "algorithm (spark_rapids_ml.knn.approximatenearestneighborsmodel attribute)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.algorithm"]], "approxsimilarityjoin() (spark_rapids_ml.knn.approximatenearestneighborsmodel method)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.approxSimilarityJoin"]], "clear() (spark_rapids_ml.knn.approximatenearestneighborsmodel method)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.clear"]], "copy() (spark_rapids_ml.knn.approximatenearestneighborsmodel method)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.copy"]], "cpu() (spark_rapids_ml.knn.approximatenearestneighborsmodel method)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.cpu"]], "cuml_params (spark_rapids_ml.knn.approximatenearestneighborsmodel attribute)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.cuml_params"]], "explainparam() (spark_rapids_ml.knn.approximatenearestneighborsmodel method)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.explainParam"]], "explainparams() (spark_rapids_ml.knn.approximatenearestneighborsmodel method)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.explainParams"]], "extractparammap() (spark_rapids_ml.knn.approximatenearestneighborsmodel method)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.extractParamMap"]], "getalgoparams() (spark_rapids_ml.knn.approximatenearestneighborsmodel method)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.getAlgoParams"]], "getalgorithm() (spark_rapids_ml.knn.approximatenearestneighborsmodel method)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.getAlgorithm"]], "getidcol() (spark_rapids_ml.knn.approximatenearestneighborsmodel method)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.getIdCol"]], "getinputcol() (spark_rapids_ml.knn.approximatenearestneighborsmodel method)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.getInputCol"]], "getinputcols() (spark_rapids_ml.knn.approximatenearestneighborsmodel method)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.getInputCols"]], "getk() (spark_rapids_ml.knn.approximatenearestneighborsmodel method)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.getK"]], "getlabelcol() (spark_rapids_ml.knn.approximatenearestneighborsmodel method)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.getLabelCol"]], "getmetric() (spark_rapids_ml.knn.approximatenearestneighborsmodel method)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.getMetric"]], "getordefault() (spark_rapids_ml.knn.approximatenearestneighborsmodel method)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.getOrDefault"]], "getparam() (spark_rapids_ml.knn.approximatenearestneighborsmodel method)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.getParam"]], "hasdefault() (spark_rapids_ml.knn.approximatenearestneighborsmodel method)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.hasDefault"]], "hasparam() (spark_rapids_ml.knn.approximatenearestneighborsmodel method)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.hasParam"]], "idcol (spark_rapids_ml.knn.approximatenearestneighborsmodel attribute)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.idCol"]], "inputcol (spark_rapids_ml.knn.approximatenearestneighborsmodel attribute)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.inputCol"]], "inputcols (spark_rapids_ml.knn.approximatenearestneighborsmodel attribute)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.inputCols"]], "isdefined() (spark_rapids_ml.knn.approximatenearestneighborsmodel method)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.isDefined"]], "isset() (spark_rapids_ml.knn.approximatenearestneighborsmodel method)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.isSet"]], "k (spark_rapids_ml.knn.approximatenearestneighborsmodel attribute)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.k"]], "kneighbors() (spark_rapids_ml.knn.approximatenearestneighborsmodel method)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.kneighbors"]], "labelcol (spark_rapids_ml.knn.approximatenearestneighborsmodel attribute)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.labelCol"]], "metric (spark_rapids_ml.knn.approximatenearestneighborsmodel attribute)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.metric"]], "num_workers (spark_rapids_ml.knn.approximatenearestneighborsmodel attribute)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.num_workers"]], "params (spark_rapids_ml.knn.approximatenearestneighborsmodel attribute)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.params"]], "set() (spark_rapids_ml.knn.approximatenearestneighborsmodel method)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.set"]], "setalgoparams() (spark_rapids_ml.knn.approximatenearestneighborsmodel method)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.setAlgoParams"]], "setalgorithm() (spark_rapids_ml.knn.approximatenearestneighborsmodel method)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.setAlgorithm"]], "setidcol() (spark_rapids_ml.knn.approximatenearestneighborsmodel method)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.setIdCol"]], "setinputcol() (spark_rapids_ml.knn.approximatenearestneighborsmodel method)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.setInputCol"]], "setinputcols() (spark_rapids_ml.knn.approximatenearestneighborsmodel method)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.setInputCols"]], "setk() (spark_rapids_ml.knn.approximatenearestneighborsmodel method)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.setK"]], "setmetric() (spark_rapids_ml.knn.approximatenearestneighborsmodel method)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.setMetric"]], "transform() (spark_rapids_ml.knn.approximatenearestneighborsmodel method)": [[11, "spark_rapids_ml.knn.ApproximateNearestNeighborsModel.transform"]], "nearestneighbors (class in spark_rapids_ml.knn)": [[12, "spark_rapids_ml.knn.NearestNeighbors"]], "clear() (spark_rapids_ml.knn.nearestneighbors method)": [[12, "spark_rapids_ml.knn.NearestNeighbors.clear"]], "copy() (spark_rapids_ml.knn.nearestneighbors method)": [[12, "spark_rapids_ml.knn.NearestNeighbors.copy"]], "cuml_params (spark_rapids_ml.knn.nearestneighbors attribute)": [[12, "spark_rapids_ml.knn.NearestNeighbors.cuml_params"]], "explainparam() (spark_rapids_ml.knn.nearestneighbors method)": [[12, "spark_rapids_ml.knn.NearestNeighbors.explainParam"]], "explainparams() (spark_rapids_ml.knn.nearestneighbors method)": [[12, "spark_rapids_ml.knn.NearestNeighbors.explainParams"]], "extractparammap() (spark_rapids_ml.knn.nearestneighbors method)": [[12, "spark_rapids_ml.knn.NearestNeighbors.extractParamMap"]], "fit() (spark_rapids_ml.knn.nearestneighbors method)": [[12, "spark_rapids_ml.knn.NearestNeighbors.fit"]], "fitmultiple() (spark_rapids_ml.knn.nearestneighbors method)": [[12, "spark_rapids_ml.knn.NearestNeighbors.fitMultiple"]], "getidcol() (spark_rapids_ml.knn.nearestneighbors method)": [[12, "spark_rapids_ml.knn.NearestNeighbors.getIdCol"]], "getinputcol() (spark_rapids_ml.knn.nearestneighbors method)": [[12, "spark_rapids_ml.knn.NearestNeighbors.getInputCol"]], "getinputcols() (spark_rapids_ml.knn.nearestneighbors method)": [[12, "spark_rapids_ml.knn.NearestNeighbors.getInputCols"]], "getk() (spark_rapids_ml.knn.nearestneighbors method)": [[12, "spark_rapids_ml.knn.NearestNeighbors.getK"]], "getlabelcol() (spark_rapids_ml.knn.nearestneighbors method)": [[12, "spark_rapids_ml.knn.NearestNeighbors.getLabelCol"]], "getordefault() (spark_rapids_ml.knn.nearestneighbors method)": [[12, "spark_rapids_ml.knn.NearestNeighbors.getOrDefault"]], "getparam() (spark_rapids_ml.knn.nearestneighbors method)": [[12, "spark_rapids_ml.knn.NearestNeighbors.getParam"]], "hasdefault() (spark_rapids_ml.knn.nearestneighbors method)": [[12, "spark_rapids_ml.knn.NearestNeighbors.hasDefault"]], "hasparam() (spark_rapids_ml.knn.nearestneighbors method)": [[12, "spark_rapids_ml.knn.NearestNeighbors.hasParam"]], "idcol (spark_rapids_ml.knn.nearestneighbors attribute)": [[12, "spark_rapids_ml.knn.NearestNeighbors.idCol"]], "inputcol (spark_rapids_ml.knn.nearestneighbors attribute)": [[12, "spark_rapids_ml.knn.NearestNeighbors.inputCol"]], "inputcols (spark_rapids_ml.knn.nearestneighbors attribute)": [[12, "spark_rapids_ml.knn.NearestNeighbors.inputCols"]], "isdefined() (spark_rapids_ml.knn.nearestneighbors method)": [[12, "spark_rapids_ml.knn.NearestNeighbors.isDefined"]], "isset() (spark_rapids_ml.knn.nearestneighbors method)": [[12, "spark_rapids_ml.knn.NearestNeighbors.isSet"]], "k (spark_rapids_ml.knn.nearestneighbors attribute)": [[12, "spark_rapids_ml.knn.NearestNeighbors.k"]], "labelcol (spark_rapids_ml.knn.nearestneighbors attribute)": [[12, "spark_rapids_ml.knn.NearestNeighbors.labelCol"]], "num_workers (spark_rapids_ml.knn.nearestneighbors attribute)": [[12, "spark_rapids_ml.knn.NearestNeighbors.num_workers"]], "params (spark_rapids_ml.knn.nearestneighbors attribute)": [[12, "spark_rapids_ml.knn.NearestNeighbors.params"]], "set() (spark_rapids_ml.knn.nearestneighbors method)": [[12, "spark_rapids_ml.knn.NearestNeighbors.set"]], "setidcol() (spark_rapids_ml.knn.nearestneighbors method)": [[12, "spark_rapids_ml.knn.NearestNeighbors.setIdCol"]], "setinputcol() (spark_rapids_ml.knn.nearestneighbors method)": [[12, "spark_rapids_ml.knn.NearestNeighbors.setInputCol"]], "setinputcols() (spark_rapids_ml.knn.nearestneighbors method)": [[12, "spark_rapids_ml.knn.NearestNeighbors.setInputCols"]], "setk() (spark_rapids_ml.knn.nearestneighbors method)": [[12, "spark_rapids_ml.knn.NearestNeighbors.setK"]], "nearestneighborsmodel (class in spark_rapids_ml.knn)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel"]], "clear() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel.clear"]], "copy() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel.copy"]], "cpu() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel.cpu"]], "cuml_params (spark_rapids_ml.knn.nearestneighborsmodel attribute)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel.cuml_params"]], "exactnearestneighborsjoin() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel.exactNearestNeighborsJoin"]], "explainparam() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel.explainParam"]], "explainparams() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel.explainParams"]], "extractparammap() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel.extractParamMap"]], "getidcol() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel.getIdCol"]], "getinputcol() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel.getInputCol"]], "getinputcols() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel.getInputCols"]], "getk() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel.getK"]], "getlabelcol() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel.getLabelCol"]], "getordefault() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel.getOrDefault"]], "getparam() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel.getParam"]], "hasdefault() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel.hasDefault"]], "hasparam() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel.hasParam"]], "idcol (spark_rapids_ml.knn.nearestneighborsmodel attribute)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel.idCol"]], "inputcol (spark_rapids_ml.knn.nearestneighborsmodel attribute)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel.inputCol"]], "inputcols (spark_rapids_ml.knn.nearestneighborsmodel attribute)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel.inputCols"]], "isdefined() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel.isDefined"]], "isset() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel.isSet"]], "k (spark_rapids_ml.knn.nearestneighborsmodel attribute)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel.k"]], "kneighbors() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel.kneighbors"]], "labelcol (spark_rapids_ml.knn.nearestneighborsmodel attribute)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel.labelCol"]], "num_workers (spark_rapids_ml.knn.nearestneighborsmodel attribute)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel.num_workers"]], "params (spark_rapids_ml.knn.nearestneighborsmodel attribute)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel.params"]], "set() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel.set"]], "setidcol() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel.setIdCol"]], "setinputcol() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel.setInputCol"]], "setinputcols() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel.setInputCols"]], "setk() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel.setK"]], "transform() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[13, "spark_rapids_ml.knn.NearestNeighborsModel.transform"]], "linearregression (class in spark_rapids_ml.regression)": [[14, "spark_rapids_ml.regression.LinearRegression"]], "clear() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.clear"]], "copy() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.copy"]], "cuml_params (spark_rapids_ml.regression.linearregression attribute)": [[14, "spark_rapids_ml.regression.LinearRegression.cuml_params"]], "elasticnetparam (spark_rapids_ml.regression.linearregression attribute)": [[14, "spark_rapids_ml.regression.LinearRegression.elasticNetParam"]], "explainparam() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.explainParam"]], "explainparams() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.explainParams"]], "extractparammap() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.extractParamMap"]], "featurescol (spark_rapids_ml.regression.linearregression attribute)": [[14, "spark_rapids_ml.regression.LinearRegression.featuresCol"]], "featurescols (spark_rapids_ml.regression.linearregression attribute)": [[14, "spark_rapids_ml.regression.LinearRegression.featuresCols"]], "fit() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.fit"]], "fitintercept (spark_rapids_ml.regression.linearregression attribute)": [[14, "spark_rapids_ml.regression.LinearRegression.fitIntercept"]], "fitmultiple() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.fitMultiple"]], "getelasticnetparam() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.getElasticNetParam"]], "getfeaturescol() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.getFeaturesCol"]], "getfeaturescols() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.getFeaturesCols"]], "getfitintercept() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.getFitIntercept"]], "getlabelcol() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.getLabelCol"]], "getloss() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.getLoss"]], "getmaxiter() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.getMaxIter"]], "getordefault() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.getOrDefault"]], "getparam() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.getParam"]], "getpredictioncol() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.getPredictionCol"]], "getregparam() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.getRegParam"]], "getsolver() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.getSolver"]], "getstandardization() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.getStandardization"]], "gettol() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.getTol"]], "hasdefault() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.hasDefault"]], "hasparam() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.hasParam"]], "isdefined() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.isDefined"]], "isset() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.isSet"]], "labelcol (spark_rapids_ml.regression.linearregression attribute)": [[14, "spark_rapids_ml.regression.LinearRegression.labelCol"]], "load() (spark_rapids_ml.regression.linearregression class method)": [[14, "spark_rapids_ml.regression.LinearRegression.load"]], "loss (spark_rapids_ml.regression.linearregression attribute)": [[14, "spark_rapids_ml.regression.LinearRegression.loss"]], "maxiter (spark_rapids_ml.regression.linearregression attribute)": [[14, "spark_rapids_ml.regression.LinearRegression.maxIter"]], "num_workers (spark_rapids_ml.regression.linearregression attribute)": [[14, "spark_rapids_ml.regression.LinearRegression.num_workers"]], "params (spark_rapids_ml.regression.linearregression attribute)": [[14, "spark_rapids_ml.regression.LinearRegression.params"]], "predictioncol (spark_rapids_ml.regression.linearregression attribute)": [[14, "spark_rapids_ml.regression.LinearRegression.predictionCol"]], "read() (spark_rapids_ml.regression.linearregression class method)": [[14, "spark_rapids_ml.regression.LinearRegression.read"]], "regparam (spark_rapids_ml.regression.linearregression attribute)": [[14, "spark_rapids_ml.regression.LinearRegression.regParam"]], "save() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.save"]], "set() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.set"]], "setelasticnetparam() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.setElasticNetParam"]], "setfeaturescol() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.setFeaturesCol"]], "setfeaturescols() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.setFeaturesCols"]], "setlabelcol() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.setLabelCol"]], "setloss() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.setLoss"]], "setmaxiter() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.setMaxIter"]], "setpredictioncol() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.setPredictionCol"]], "setregparam() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.setRegParam"]], "setstandardization() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.setStandardization"]], "settol() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.setTol"]], "solver (spark_rapids_ml.regression.linearregression attribute)": [[14, "spark_rapids_ml.regression.LinearRegression.solver"]], "standardization (spark_rapids_ml.regression.linearregression attribute)": [[14, "spark_rapids_ml.regression.LinearRegression.standardization"]], "tol (spark_rapids_ml.regression.linearregression attribute)": [[14, "spark_rapids_ml.regression.LinearRegression.tol"]], "write() (spark_rapids_ml.regression.linearregression method)": [[14, "spark_rapids_ml.regression.LinearRegression.write"]], "linearregressionmodel (class in spark_rapids_ml.regression)": [[15, "spark_rapids_ml.regression.LinearRegressionModel"]], "clear() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.clear"]], "coefficients (spark_rapids_ml.regression.linearregressionmodel attribute)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.coefficients"]], "copy() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.copy"]], "cpu() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.cpu"]], "cuml_params (spark_rapids_ml.regression.linearregressionmodel attribute)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.cuml_params"]], "elasticnetparam (spark_rapids_ml.regression.linearregressionmodel attribute)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.elasticNetParam"]], "evaluate() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.evaluate"]], "explainparam() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.explainParam"]], "explainparams() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.explainParams"]], "extractparammap() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.extractParamMap"]], "featurescol (spark_rapids_ml.regression.linearregressionmodel attribute)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.featuresCol"]], "featurescols (spark_rapids_ml.regression.linearregressionmodel attribute)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.featuresCols"]], "fitintercept (spark_rapids_ml.regression.linearregressionmodel attribute)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.fitIntercept"]], "getelasticnetparam() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.getElasticNetParam"]], "getfeaturescol() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.getFeaturesCol"]], "getfeaturescols() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.getFeaturesCols"]], "getfitintercept() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.getFitIntercept"]], "getlabelcol() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.getLabelCol"]], "getloss() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.getLoss"]], "getmaxiter() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.getMaxIter"]], "getordefault() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.getOrDefault"]], "getparam() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.getParam"]], "getpredictioncol() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.getPredictionCol"]], "getregparam() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.getRegParam"]], "getsolver() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.getSolver"]], "getstandardization() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.getStandardization"]], "gettol() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.getTol"]], "hasdefault() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.hasDefault"]], "hasparam() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.hasParam"]], "hassummary (spark_rapids_ml.regression.linearregressionmodel attribute)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.hasSummary"]], "intercept (spark_rapids_ml.regression.linearregressionmodel attribute)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.intercept"]], "isdefined() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.isDefined"]], "isset() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.isSet"]], "labelcol (spark_rapids_ml.regression.linearregressionmodel attribute)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.labelCol"]], "load() (spark_rapids_ml.regression.linearregressionmodel class method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.load"]], "loss (spark_rapids_ml.regression.linearregressionmodel attribute)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.loss"]], "maxiter (spark_rapids_ml.regression.linearregressionmodel attribute)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.maxIter"]], "numfeatures (spark_rapids_ml.regression.linearregressionmodel attribute)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.numFeatures"]], "num_workers (spark_rapids_ml.regression.linearregressionmodel attribute)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.num_workers"]], "params (spark_rapids_ml.regression.linearregressionmodel attribute)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.params"]], "predict() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.predict"]], "predictioncol (spark_rapids_ml.regression.linearregressionmodel attribute)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.predictionCol"]], "read() (spark_rapids_ml.regression.linearregressionmodel class method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.read"]], "regparam (spark_rapids_ml.regression.linearregressionmodel attribute)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.regParam"]], "save() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.save"]], "scale (spark_rapids_ml.regression.linearregressionmodel attribute)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.scale"]], "set() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.set"]], "setfeaturescol() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.setFeaturesCol"]], "setfeaturescols() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.setFeaturesCols"]], "setlabelcol() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.setLabelCol"]], "setpredictioncol() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.setPredictionCol"]], "solver (spark_rapids_ml.regression.linearregressionmodel attribute)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.solver"]], "standardization (spark_rapids_ml.regression.linearregressionmodel attribute)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.standardization"]], "tol (spark_rapids_ml.regression.linearregressionmodel attribute)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.tol"]], "transform() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.transform"]], "write() (spark_rapids_ml.regression.linearregressionmodel method)": [[15, "spark_rapids_ml.regression.LinearRegressionModel.write"]], "randomforestregressionmodel (class in spark_rapids_ml.regression)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel"]], "bootstrap (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.bootstrap"]], "clear() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.clear"]], "copy() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.copy"]], "cpu() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.cpu"]], "cuml_params (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.cuml_params"]], "explainparam() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.explainParam"]], "explainparams() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.explainParams"]], "extractparammap() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.extractParamMap"]], "featureimportances (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.featureImportances"]], "featuresubsetstrategy (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.featureSubsetStrategy"]], "featurescol (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.featuresCol"]], "featurescols (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.featuresCols"]], "getbootstrap() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.getBootstrap"]], "getfeaturesubsetstrategy() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.getFeatureSubsetStrategy"]], "getfeaturescol() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.getFeaturesCol"]], "getfeaturescols() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.getFeaturesCols"]], "getimpurity() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.getImpurity"]], "getlabelcol() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.getLabelCol"]], "getmaxbins() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.getMaxBins"]], "getmaxdepth() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.getMaxDepth"]], "getmininstancespernode() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.getMinInstancesPerNode"]], "getnumtrees (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.getNumTrees"]], "getordefault() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.getOrDefault"]], "getparam() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.getParam"]], "getpredictioncol() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.getPredictionCol"]], "getseed() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.getSeed"]], "hasdefault() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.hasDefault"]], "hasparam() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.hasParam"]], "impurity (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.impurity"]], "isdefined() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.isDefined"]], "isset() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.isSet"]], "labelcol (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.labelCol"]], "load() (spark_rapids_ml.regression.randomforestregressionmodel class method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.load"]], "maxbins (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.maxBins"]], "maxdepth (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.maxDepth"]], "mininstancespernode (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.minInstancesPerNode"]], "numfeatures (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.numFeatures"]], "numtrees (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.numTrees"]], "num_workers (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.num_workers"]], "params (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.params"]], "predict() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.predict"]], "predictleaf() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.predictLeaf"]], "predictioncol (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.predictionCol"]], "read() (spark_rapids_ml.regression.randomforestregressionmodel class method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.read"]], "save() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.save"]], "seed (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.seed"]], "set() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.set"]], "setfeaturescol() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.setFeaturesCol"]], "setfeaturescols() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.setFeaturesCols"]], "setlabelcol() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.setLabelCol"]], "setpredictioncol() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.setPredictionCol"]], "supportedfeaturesubsetstrategies (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.supportedFeatureSubsetStrategies"]], "supportedimpurities (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.supportedImpurities"]], "todebugstring (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.toDebugString"]], "totalnumnodes (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.totalNumNodes"]], "transform() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.transform"]], "treeweights (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.treeWeights"]], "trees (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.trees"]], "write() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[16, "spark_rapids_ml.regression.RandomForestRegressionModel.write"]], "randomforestregressor (class in spark_rapids_ml.regression)": [[17, "spark_rapids_ml.regression.RandomForestRegressor"]], "bootstrap (spark_rapids_ml.regression.randomforestregressor attribute)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.bootstrap"]], "clear() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.clear"]], "copy() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.copy"]], "cuml_params (spark_rapids_ml.regression.randomforestregressor attribute)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.cuml_params"]], "explainparam() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.explainParam"]], "explainparams() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.explainParams"]], "extractparammap() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.extractParamMap"]], "featuresubsetstrategy (spark_rapids_ml.regression.randomforestregressor attribute)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.featureSubsetStrategy"]], "featurescol (spark_rapids_ml.regression.randomforestregressor attribute)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.featuresCol"]], "featurescols (spark_rapids_ml.regression.randomforestregressor attribute)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.featuresCols"]], "fit() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.fit"]], "fitmultiple() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.fitMultiple"]], "getbootstrap() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.getBootstrap"]], "getfeaturesubsetstrategy() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.getFeatureSubsetStrategy"]], "getfeaturescol() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.getFeaturesCol"]], "getfeaturescols() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.getFeaturesCols"]], "getimpurity() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.getImpurity"]], "getlabelcol() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.getLabelCol"]], "getmaxbins() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.getMaxBins"]], "getmaxdepth() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.getMaxDepth"]], "getmininstancespernode() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.getMinInstancesPerNode"]], "getnumtrees() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.getNumTrees"]], "getordefault() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.getOrDefault"]], "getparam() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.getParam"]], "getseed() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.getSeed"]], "hasdefault() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.hasDefault"]], "hasparam() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.hasParam"]], "impurity (spark_rapids_ml.regression.randomforestregressor attribute)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.impurity"]], "isdefined() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.isDefined"]], "isset() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.isSet"]], "labelcol (spark_rapids_ml.regression.randomforestregressor attribute)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.labelCol"]], "load() (spark_rapids_ml.regression.randomforestregressor class method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.load"]], "maxbins (spark_rapids_ml.regression.randomforestregressor attribute)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.maxBins"]], "maxdepth (spark_rapids_ml.regression.randomforestregressor attribute)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.maxDepth"]], "mininstancespernode (spark_rapids_ml.regression.randomforestregressor attribute)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.minInstancesPerNode"]], "numtrees (spark_rapids_ml.regression.randomforestregressor attribute)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.numTrees"]], "num_workers (spark_rapids_ml.regression.randomforestregressor attribute)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.num_workers"]], "params (spark_rapids_ml.regression.randomforestregressor attribute)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.params"]], "read() (spark_rapids_ml.regression.randomforestregressor class method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.read"]], "save() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.save"]], "seed (spark_rapids_ml.regression.randomforestregressor attribute)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.seed"]], "set() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.set"]], "setbootstrap() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.setBootstrap"]], "setfeaturesubsetstrategy() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.setFeatureSubsetStrategy"]], "setfeaturescol() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.setFeaturesCol"]], "setfeaturescols() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.setFeaturesCols"]], "setimpurity() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.setImpurity"]], "setlabelcol() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.setLabelCol"]], "setmaxbins() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.setMaxBins"]], "setmaxdepth() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.setMaxDepth"]], "setmininstancespernode() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.setMinInstancesPerNode"]], "setnumtrees() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.setNumTrees"]], "setpredictioncol() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.setPredictionCol"]], "setseed() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.setSeed"]], "supportedfeaturesubsetstrategies (spark_rapids_ml.regression.randomforestregressor attribute)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.supportedFeatureSubsetStrategies"]], "supportedimpurities (spark_rapids_ml.regression.randomforestregressor attribute)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.supportedImpurities"]], "write() (spark_rapids_ml.regression.randomforestregressor method)": [[17, "spark_rapids_ml.regression.RandomForestRegressor.write"]], "crossvalidator (class in spark_rapids_ml.tuning)": [[18, "spark_rapids_ml.tuning.CrossValidator"]], "clear() (spark_rapids_ml.tuning.crossvalidator method)": [[18, "spark_rapids_ml.tuning.CrossValidator.clear"]], "collectsubmodels (spark_rapids_ml.tuning.crossvalidator attribute)": [[18, "spark_rapids_ml.tuning.CrossValidator.collectSubModels"]], "copy() (spark_rapids_ml.tuning.crossvalidator method)": [[18, "spark_rapids_ml.tuning.CrossValidator.copy"]], "estimator (spark_rapids_ml.tuning.crossvalidator attribute)": [[18, "spark_rapids_ml.tuning.CrossValidator.estimator"]], "estimatorparammaps (spark_rapids_ml.tuning.crossvalidator attribute)": [[18, "spark_rapids_ml.tuning.CrossValidator.estimatorParamMaps"]], "evaluator (spark_rapids_ml.tuning.crossvalidator attribute)": [[18, "spark_rapids_ml.tuning.CrossValidator.evaluator"]], "explainparam() (spark_rapids_ml.tuning.crossvalidator method)": [[18, "spark_rapids_ml.tuning.CrossValidator.explainParam"]], "explainparams() (spark_rapids_ml.tuning.crossvalidator method)": [[18, "spark_rapids_ml.tuning.CrossValidator.explainParams"]], "extractparammap() (spark_rapids_ml.tuning.crossvalidator method)": [[18, "spark_rapids_ml.tuning.CrossValidator.extractParamMap"]], "fit() (spark_rapids_ml.tuning.crossvalidator method)": [[18, "spark_rapids_ml.tuning.CrossValidator.fit"]], "fitmultiple() (spark_rapids_ml.tuning.crossvalidator method)": [[18, "spark_rapids_ml.tuning.CrossValidator.fitMultiple"]], "foldcol (spark_rapids_ml.tuning.crossvalidator attribute)": [[18, "spark_rapids_ml.tuning.CrossValidator.foldCol"]], "getcollectsubmodels() (spark_rapids_ml.tuning.crossvalidator method)": [[18, "spark_rapids_ml.tuning.CrossValidator.getCollectSubModels"]], "getestimator() (spark_rapids_ml.tuning.crossvalidator method)": [[18, "spark_rapids_ml.tuning.CrossValidator.getEstimator"]], "getestimatorparammaps() (spark_rapids_ml.tuning.crossvalidator method)": [[18, "spark_rapids_ml.tuning.CrossValidator.getEstimatorParamMaps"]], "getevaluator() (spark_rapids_ml.tuning.crossvalidator method)": [[18, "spark_rapids_ml.tuning.CrossValidator.getEvaluator"]], "getfoldcol() (spark_rapids_ml.tuning.crossvalidator method)": [[18, "spark_rapids_ml.tuning.CrossValidator.getFoldCol"]], "getnumfolds() (spark_rapids_ml.tuning.crossvalidator method)": [[18, "spark_rapids_ml.tuning.CrossValidator.getNumFolds"]], "getordefault() (spark_rapids_ml.tuning.crossvalidator method)": [[18, "spark_rapids_ml.tuning.CrossValidator.getOrDefault"]], "getparallelism() (spark_rapids_ml.tuning.crossvalidator method)": [[18, "spark_rapids_ml.tuning.CrossValidator.getParallelism"]], "getparam() (spark_rapids_ml.tuning.crossvalidator method)": [[18, "spark_rapids_ml.tuning.CrossValidator.getParam"]], "getseed() (spark_rapids_ml.tuning.crossvalidator method)": [[18, "spark_rapids_ml.tuning.CrossValidator.getSeed"]], "hasdefault() (spark_rapids_ml.tuning.crossvalidator method)": [[18, "spark_rapids_ml.tuning.CrossValidator.hasDefault"]], "hasparam() (spark_rapids_ml.tuning.crossvalidator method)": [[18, "spark_rapids_ml.tuning.CrossValidator.hasParam"]], "isdefined() (spark_rapids_ml.tuning.crossvalidator method)": [[18, "spark_rapids_ml.tuning.CrossValidator.isDefined"]], "isset() (spark_rapids_ml.tuning.crossvalidator method)": [[18, "spark_rapids_ml.tuning.CrossValidator.isSet"]], "load() (spark_rapids_ml.tuning.crossvalidator class method)": [[18, "spark_rapids_ml.tuning.CrossValidator.load"]], "numfolds (spark_rapids_ml.tuning.crossvalidator attribute)": [[18, "spark_rapids_ml.tuning.CrossValidator.numFolds"]], "parallelism (spark_rapids_ml.tuning.crossvalidator attribute)": [[18, "spark_rapids_ml.tuning.CrossValidator.parallelism"]], "params (spark_rapids_ml.tuning.crossvalidator attribute)": [[18, "spark_rapids_ml.tuning.CrossValidator.params"]], "read() (spark_rapids_ml.tuning.crossvalidator class method)": [[18, "spark_rapids_ml.tuning.CrossValidator.read"]], "save() (spark_rapids_ml.tuning.crossvalidator method)": [[18, "spark_rapids_ml.tuning.CrossValidator.save"]], "seed (spark_rapids_ml.tuning.crossvalidator attribute)": [[18, "spark_rapids_ml.tuning.CrossValidator.seed"]], "set() (spark_rapids_ml.tuning.crossvalidator method)": [[18, "spark_rapids_ml.tuning.CrossValidator.set"]], "setcollectsubmodels() (spark_rapids_ml.tuning.crossvalidator method)": [[18, "spark_rapids_ml.tuning.CrossValidator.setCollectSubModels"]], "setestimator() (spark_rapids_ml.tuning.crossvalidator method)": [[18, "spark_rapids_ml.tuning.CrossValidator.setEstimator"]], "setestimatorparammaps() (spark_rapids_ml.tuning.crossvalidator method)": [[18, "spark_rapids_ml.tuning.CrossValidator.setEstimatorParamMaps"]], "setevaluator() (spark_rapids_ml.tuning.crossvalidator method)": [[18, "spark_rapids_ml.tuning.CrossValidator.setEvaluator"]], "setfoldcol() (spark_rapids_ml.tuning.crossvalidator method)": [[18, "spark_rapids_ml.tuning.CrossValidator.setFoldCol"]], "setnumfolds() (spark_rapids_ml.tuning.crossvalidator method)": [[18, "spark_rapids_ml.tuning.CrossValidator.setNumFolds"]], "setparallelism() (spark_rapids_ml.tuning.crossvalidator method)": [[18, "spark_rapids_ml.tuning.CrossValidator.setParallelism"]], "setparams() (spark_rapids_ml.tuning.crossvalidator method)": [[18, "spark_rapids_ml.tuning.CrossValidator.setParams"]], "setseed() (spark_rapids_ml.tuning.crossvalidator method)": [[18, "spark_rapids_ml.tuning.CrossValidator.setSeed"]], "write() (spark_rapids_ml.tuning.crossvalidator method)": [[18, "spark_rapids_ml.tuning.CrossValidator.write"]], "umap (class in spark_rapids_ml.umap)": [[19, "spark_rapids_ml.umap.UMAP"]], "a (spark_rapids_ml.umap.umap attribute)": [[19, "spark_rapids_ml.umap.UMAP.a"]], "b (spark_rapids_ml.umap.umap attribute)": [[19, "spark_rapids_ml.umap.UMAP.b"]], "clear() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.clear"]], "copy() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.copy"]], "cuml_params (spark_rapids_ml.umap.umap attribute)": [[19, "spark_rapids_ml.umap.UMAP.cuml_params"]], "explainparam() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.explainParam"]], "explainparams() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.explainParams"]], "extractparammap() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.extractParamMap"]], "featurescol (spark_rapids_ml.umap.umap attribute)": [[19, "spark_rapids_ml.umap.UMAP.featuresCol"]], "featurescols (spark_rapids_ml.umap.umap attribute)": [[19, "spark_rapids_ml.umap.UMAP.featuresCols"]], "fit() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.fit"]], "fitmultiple() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.fitMultiple"]], "geta() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.getA"]], "getb() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.getB"]], "getfeaturescol() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.getFeaturesCol"]], "getfeaturescols() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.getFeaturesCols"]], "getinit() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.getInit"]], "getlabelcol() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.getLabelCol"]], "getlearningrate() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.getLearningRate"]], "getlocalconnectivity() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.getLocalConnectivity"]], "getmetric() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.getMetric"]], "getmindist() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.getMinDist"]], "getncomponents() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.getNComponents"]], "getnepochs() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.getNEpochs"]], "getnneighbors() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.getNNeighbors"]], "getnegativesamplerate() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.getNegativeSampleRate"]], "getordefault() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.getOrDefault"]], "getoutputcol() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.getOutputCol"]], "getparam() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.getParam"]], "getprecomputedknn() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.getPrecomputedKNN"]], "getrandomstate() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.getRandomState"]], "getrepulsionstrength() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.getRepulsionStrength"]], "getsamplefraction() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.getSampleFraction"]], "getsetopmixratio() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.getSetOpMixRatio"]], "getspread() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.getSpread"]], "gettransformqueuesize() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.getTransformQueueSize"]], "hasdefault() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.hasDefault"]], "hasparam() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.hasParam"]], "init (spark_rapids_ml.umap.umap attribute)": [[19, "spark_rapids_ml.umap.UMAP.init"]], "isdefined() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.isDefined"]], "isset() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.isSet"]], "labelcol (spark_rapids_ml.umap.umap attribute)": [[19, "spark_rapids_ml.umap.UMAP.labelCol"]], "learning_rate (spark_rapids_ml.umap.umap attribute)": [[19, "spark_rapids_ml.umap.UMAP.learning_rate"]], "load() (spark_rapids_ml.umap.umap class method)": [[19, "spark_rapids_ml.umap.UMAP.load"]], "local_connectivity (spark_rapids_ml.umap.umap attribute)": [[19, "spark_rapids_ml.umap.UMAP.local_connectivity"]], "metric (spark_rapids_ml.umap.umap attribute)": [[19, "spark_rapids_ml.umap.UMAP.metric"]], "min_dist (spark_rapids_ml.umap.umap attribute)": [[19, "spark_rapids_ml.umap.UMAP.min_dist"]], "n_components (spark_rapids_ml.umap.umap attribute)": [[19, "spark_rapids_ml.umap.UMAP.n_components"]], "n_epochs (spark_rapids_ml.umap.umap attribute)": [[19, "spark_rapids_ml.umap.UMAP.n_epochs"]], "n_neighbors (spark_rapids_ml.umap.umap attribute)": [[19, "spark_rapids_ml.umap.UMAP.n_neighbors"]], "negative_sample_rate (spark_rapids_ml.umap.umap attribute)": [[19, "spark_rapids_ml.umap.UMAP.negative_sample_rate"]], "num_workers (spark_rapids_ml.umap.umap attribute)": [[19, "spark_rapids_ml.umap.UMAP.num_workers"]], "outputcol (spark_rapids_ml.umap.umap attribute)": [[19, "spark_rapids_ml.umap.UMAP.outputCol"]], "params (spark_rapids_ml.umap.umap attribute)": [[19, "spark_rapids_ml.umap.UMAP.params"]], "precomputed_knn (spark_rapids_ml.umap.umap attribute)": [[19, "spark_rapids_ml.umap.UMAP.precomputed_knn"]], "random_state (spark_rapids_ml.umap.umap attribute)": [[19, "spark_rapids_ml.umap.UMAP.random_state"]], "read() (spark_rapids_ml.umap.umap class method)": [[19, "spark_rapids_ml.umap.UMAP.read"]], "repulsion_strength (spark_rapids_ml.umap.umap attribute)": [[19, "spark_rapids_ml.umap.UMAP.repulsion_strength"]], "sample_fraction (spark_rapids_ml.umap.umap attribute)": [[19, "spark_rapids_ml.umap.UMAP.sample_fraction"]], "save() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.save"]], "set() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.set"]], "seta() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.setA"]], "setb() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.setB"]], "setfeaturescol() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.setFeaturesCol"]], "setfeaturescols() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.setFeaturesCols"]], "setinit() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.setInit"]], "setlabelcol() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.setLabelCol"]], "setlearningrate() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.setLearningRate"]], "setlocalconnectivity() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.setLocalConnectivity"]], "setmetric() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.setMetric"]], "setmindist() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.setMinDist"]], "setncomponents() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.setNComponents"]], "setnepochs() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.setNEpochs"]], "setnneighbors() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.setNNeighbors"]], "setnegativesamplerate() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.setNegativeSampleRate"]], "setoutputcol() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.setOutputCol"]], "setprecomputedknn() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.setPrecomputedKNN"]], "setrandomstate() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.setRandomState"]], "setrepulsionstrength() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.setRepulsionStrength"]], "setsamplefraction() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.setSampleFraction"]], "setsetopmixratio() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.setSetOpMixRatio"]], "setspread() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.setSpread"]], "settransformqueuesize() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.setTransformQueueSize"]], "set_op_mix_ratio (spark_rapids_ml.umap.umap attribute)": [[19, "spark_rapids_ml.umap.UMAP.set_op_mix_ratio"]], "spread (spark_rapids_ml.umap.umap attribute)": [[19, "spark_rapids_ml.umap.UMAP.spread"]], "transform_queue_size (spark_rapids_ml.umap.umap attribute)": [[19, "spark_rapids_ml.umap.UMAP.transform_queue_size"]], "write() (spark_rapids_ml.umap.umap method)": [[19, "spark_rapids_ml.umap.UMAP.write"]], "umapmodel (class in spark_rapids_ml.umap)": [[20, "spark_rapids_ml.umap.UMAPModel"]], "a (spark_rapids_ml.umap.umapmodel attribute)": [[20, "spark_rapids_ml.umap.UMAPModel.a"]], "b (spark_rapids_ml.umap.umapmodel attribute)": [[20, "spark_rapids_ml.umap.UMAPModel.b"]], "clear() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.clear"]], "copy() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.copy"]], "cpu() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.cpu"]], "cuml_params (spark_rapids_ml.umap.umapmodel attribute)": [[20, "spark_rapids_ml.umap.UMAPModel.cuml_params"]], "embedding (spark_rapids_ml.umap.umapmodel attribute)": [[20, "spark_rapids_ml.umap.UMAPModel.embedding"]], "explainparam() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.explainParam"]], "explainparams() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.explainParams"]], "extractparammap() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.extractParamMap"]], "featurescol (spark_rapids_ml.umap.umapmodel attribute)": [[20, "spark_rapids_ml.umap.UMAPModel.featuresCol"]], "featurescols (spark_rapids_ml.umap.umapmodel attribute)": [[20, "spark_rapids_ml.umap.UMAPModel.featuresCols"]], "geta() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.getA"]], "getb() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.getB"]], "getfeaturescol() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.getFeaturesCol"]], "getfeaturescols() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.getFeaturesCols"]], "getinit() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.getInit"]], "getlabelcol() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.getLabelCol"]], "getlearningrate() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.getLearningRate"]], "getlocalconnectivity() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.getLocalConnectivity"]], "getmetric() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.getMetric"]], "getmindist() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.getMinDist"]], "getncomponents() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.getNComponents"]], "getnepochs() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.getNEpochs"]], "getnneighbors() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.getNNeighbors"]], "getnegativesamplerate() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.getNegativeSampleRate"]], "getordefault() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.getOrDefault"]], "getoutputcol() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.getOutputCol"]], "getparam() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.getParam"]], "getprecomputedknn() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.getPrecomputedKNN"]], "getrandomstate() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.getRandomState"]], "getrepulsionstrength() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.getRepulsionStrength"]], "getsamplefraction() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.getSampleFraction"]], "getsetopmixratio() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.getSetOpMixRatio"]], "getspread() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.getSpread"]], "gettransformqueuesize() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.getTransformQueueSize"]], "hasdefault() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.hasDefault"]], "hasparam() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.hasParam"]], "init (spark_rapids_ml.umap.umapmodel attribute)": [[20, "spark_rapids_ml.umap.UMAPModel.init"]], "isdefined() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.isDefined"]], "isset() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.isSet"]], "labelcol (spark_rapids_ml.umap.umapmodel attribute)": [[20, "spark_rapids_ml.umap.UMAPModel.labelCol"]], "learning_rate (spark_rapids_ml.umap.umapmodel attribute)": [[20, "spark_rapids_ml.umap.UMAPModel.learning_rate"]], "load() (spark_rapids_ml.umap.umapmodel class method)": [[20, "spark_rapids_ml.umap.UMAPModel.load"]], "local_connectivity (spark_rapids_ml.umap.umapmodel attribute)": [[20, "spark_rapids_ml.umap.UMAPModel.local_connectivity"]], "metric (spark_rapids_ml.umap.umapmodel attribute)": [[20, "spark_rapids_ml.umap.UMAPModel.metric"]], "min_dist (spark_rapids_ml.umap.umapmodel attribute)": [[20, "spark_rapids_ml.umap.UMAPModel.min_dist"]], "n_components (spark_rapids_ml.umap.umapmodel attribute)": [[20, "spark_rapids_ml.umap.UMAPModel.n_components"]], "n_epochs (spark_rapids_ml.umap.umapmodel attribute)": [[20, "spark_rapids_ml.umap.UMAPModel.n_epochs"]], "n_neighbors (spark_rapids_ml.umap.umapmodel attribute)": [[20, "spark_rapids_ml.umap.UMAPModel.n_neighbors"]], "negative_sample_rate (spark_rapids_ml.umap.umapmodel attribute)": [[20, "spark_rapids_ml.umap.UMAPModel.negative_sample_rate"]], "num_workers (spark_rapids_ml.umap.umapmodel attribute)": [[20, "spark_rapids_ml.umap.UMAPModel.num_workers"]], "outputcol (spark_rapids_ml.umap.umapmodel attribute)": [[20, "spark_rapids_ml.umap.UMAPModel.outputCol"]], "params (spark_rapids_ml.umap.umapmodel attribute)": [[20, "spark_rapids_ml.umap.UMAPModel.params"]], "precomputed_knn (spark_rapids_ml.umap.umapmodel attribute)": [[20, "spark_rapids_ml.umap.UMAPModel.precomputed_knn"]], "random_state (spark_rapids_ml.umap.umapmodel attribute)": [[20, "spark_rapids_ml.umap.UMAPModel.random_state"]], "raw_data (spark_rapids_ml.umap.umapmodel attribute)": [[20, "spark_rapids_ml.umap.UMAPModel.raw_data"]], "read() (spark_rapids_ml.umap.umapmodel class method)": [[20, "spark_rapids_ml.umap.UMAPModel.read"]], "repulsion_strength (spark_rapids_ml.umap.umapmodel attribute)": [[20, "spark_rapids_ml.umap.UMAPModel.repulsion_strength"]], "sample_fraction (spark_rapids_ml.umap.umapmodel attribute)": [[20, "spark_rapids_ml.umap.UMAPModel.sample_fraction"]], "save() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.save"]], "set() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.set"]], "seta() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.setA"]], "setb() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.setB"]], "setfeaturescol() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.setFeaturesCol"]], "setfeaturescols() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.setFeaturesCols"]], "setinit() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.setInit"]], "setlabelcol() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.setLabelCol"]], "setlearningrate() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.setLearningRate"]], "setlocalconnectivity() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.setLocalConnectivity"]], "setmetric() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.setMetric"]], "setmindist() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.setMinDist"]], "setncomponents() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.setNComponents"]], "setnepochs() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.setNEpochs"]], "setnneighbors() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.setNNeighbors"]], "setnegativesamplerate() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.setNegativeSampleRate"]], "setoutputcol() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.setOutputCol"]], "setprecomputedknn() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.setPrecomputedKNN"]], "setrandomstate() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.setRandomState"]], "setrepulsionstrength() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.setRepulsionStrength"]], "setsamplefraction() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.setSampleFraction"]], "setsetopmixratio() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.setSetOpMixRatio"]], "setspread() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.setSpread"]], "settransformqueuesize() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.setTransformQueueSize"]], "set_op_mix_ratio (spark_rapids_ml.umap.umapmodel attribute)": [[20, "spark_rapids_ml.umap.UMAPModel.set_op_mix_ratio"]], "spread (spark_rapids_ml.umap.umapmodel attribute)": [[20, "spark_rapids_ml.umap.UMAPModel.spread"]], "transform() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.transform"]], "transform_queue_size (spark_rapids_ml.umap.umapmodel attribute)": [[20, "spark_rapids_ml.umap.UMAPModel.transform_queue_size"]], "write() (spark_rapids_ml.umap.umapmodel method)": [[20, "spark_rapids_ml.umap.UMAPModel.write"]]}})