Search.setIndex({"docnames": ["api/feature/spark_rapids_ml.feature.PCA", "api/feature/spark_rapids_ml.feature.PCAModel", "api/spark_rapids_ml.classification.RandomForestClassificationModel", "api/spark_rapids_ml.classification.RandomForestClassifier", "api/spark_rapids_ml.clustering.KMeans", "api/spark_rapids_ml.clustering.KMeansModel", "api/spark_rapids_ml.knn.NearestNeighbors", "api/spark_rapids_ml.knn.NearestNeighborsModel", "api/spark_rapids_ml.regression.LinearRegression", "api/spark_rapids_ml.regression.LinearRegressionModel", "api/spark_rapids_ml.regression.RandomForestRegressionModel", "api/spark_rapids_ml.regression.RandomForestRegressor", "api/spark_rapids_ml.tuning.CrossValidator", "index", "spark_rapids_ml"], "filenames": ["api/feature/spark_rapids_ml.feature.PCA.rst", "api/feature/spark_rapids_ml.feature.PCAModel.rst", "api/spark_rapids_ml.classification.RandomForestClassificationModel.rst", "api/spark_rapids_ml.classification.RandomForestClassifier.rst", "api/spark_rapids_ml.clustering.KMeans.rst", "api/spark_rapids_ml.clustering.KMeansModel.rst", "api/spark_rapids_ml.knn.NearestNeighbors.rst", "api/spark_rapids_ml.knn.NearestNeighborsModel.rst", "api/spark_rapids_ml.regression.LinearRegression.rst", "api/spark_rapids_ml.regression.LinearRegressionModel.rst", "api/spark_rapids_ml.regression.RandomForestRegressionModel.rst", "api/spark_rapids_ml.regression.RandomForestRegressor.rst", "api/spark_rapids_ml.tuning.CrossValidator.rst", "index.rst", "spark_rapids_ml.rst"], "titles": ["PCA", "PCAModel", "RandomForestClassificationModel", "RandomForestClassifier", "KMeans", "KMeansModel", "NearestNeighbors", "NearestNeighborsModel", "LinearRegression", "LinearRegressionModel", "RandomForestRegressionModel", "RandomForestRegressor", "CrossValidator", "Welcome to spark-rapids-ml\u2019s documentation!", "Spark Rapids ML"], "terms": {"class": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "spark_rapids_ml": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "featur": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], "kwarg": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "ani": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "algorithm": [0, 3, 4, 5, 8, 9, 11, 12], "learn": [0, 4, 5, 8], "princip": [0, 1], "compon": [0, 1], "vector": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12], "project": 0, "high": 0, "dimension": [0, 1], "low": 0, "while": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "preserv": 0, "similar": 0, "ha": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "been": [0, 12], "us": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "reduct": [0, 1], "cluster": [0, 3, 4, 5, 8, 11, 13], "data": [0, 1, 3, 4, 5, 6, 7, 11, 12], "visual": 0, "larg": [0, 4, 12], "dataset": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "provid": [0, 4, 7], "gpu": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "acceler": [0, 3, 4, 6, 8, 11], "pyspark": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "distribut": [0, 3, 4, 6, 11], "paramet": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "k": [0, 1, 2, 3, 4, 5, 6, 7, 8, 12], "int": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "number": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "equival": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "dimens": 0, "all": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "inputcol": [0, 1, 3, 6, 7], "str": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "name": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "column": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "contain": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "input": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "should": [0, 2, 3, 4, 6, 7, 10, 11, 12], "set": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "when": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12], "ar": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12], "store": [0, 1, 4, 5, 6, 7], "singl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "datafram": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "list": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "form": [0, 4, 6], "multipl": [0, 1, 3, 4, 5, 6, 7, 8, 11, 12], "outputcol": [0, 1, 3], "output": [0, 1, 2, 3, 7], "user": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "expect": [0, 4], "exampl": [0, 1, 3, 4, 6, 7, 8, 11, 12], "from": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "import": [0, 1, 2, 3, 4, 6, 8, 10, 11, 12], "1": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "2": [0, 2, 3, 4, 6, 8, 10, 11, 12], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "df": [0, 1, 3, 4, 8, 11], "spark": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "createdatafram": [0, 1, 3, 4, 6, 8, 11, 12], "gpu_pca": [0, 1], "setoutputcol": [0, 1], "pca_featur": [0, 1], "gpu_model": [0, 1, 4, 6], "fit": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12], "getk": [0, 1, 4, 5], "print": 0, "mean": [0, 1, 2, 3, 4, 5, 9, 10, 11], "pc": [0, 1], "densematrix": 0, "70710678": 0, "explained_vari": 0, "save": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "tmp": [0, 4], "ml": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "linalg": [0, 3, 4, 6, 8, 11, 12], "dens": [0, 3, 4, 6, 8, 11, 12], "setinputcol": [0, 1, 6, 7], "getinputcol": [0, 1, 6, 7], "multi": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11], "f1": [0, 4, 6], "f2": [0, 4, 6], "method": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "attribut": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "document": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "clear": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "param": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "none": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "reset": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "its": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "default": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "valu": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "match": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "cuml": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "exist": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "copi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "extra": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "option": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "parammap": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "p": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "explainparam": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "union": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "explain": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "return": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "doc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "suppli": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "string": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "extractparammap": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "extract": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "embed": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "merg": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "them": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "flat": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "map": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "where": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "latter": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "conflict": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "e": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "order": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "dict": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "tupl": [0, 3, 4, 6, 7, 8, 11, 12], "m": [0, 3, 4, 6, 8, 11, 12], "model": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "new": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "version": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "sql": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "an": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "overrid": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "If": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "given": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "call": [0, 3, 4, 6, 8, 11, 12], "each": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "transform": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "": [0, 3, 4, 6, 8, 11, 12], "fitmultipl": [0, 3, 4, 6, 8, 11, 12], "sequenc": [0, 3, 4, 6, 8, 11, 12], "iter": [0, 3, 4, 5, 6, 8, 9, 11, 12], "_cumlmodel": [0, 3, 4, 6, 8, 11], "pass": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "collect": [0, 3, 4, 6, 8, 11, 12], "abc": [0, 3, 4, 6, 8, 11, 12], "A": [0, 3, 4, 6, 7, 8, 11, 12], "_fitmultipleiter": [0, 3, 4, 6, 8, 11, 12], "thread": [0, 3, 4, 6, 8, 11, 12], "safe": [0, 3, 4, 6, 8, 11, 12], "which": [0, 2, 3, 4, 6, 8, 11, 12], "one": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "next": [0, 3, 4, 6, 8, 11, 12], "modeliter": [0, 3, 4, 6, 8, 11, 12], "index": [0, 3, 4, 6, 8, 11, 12, 13], "wa": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12], "mai": [0, 3, 4, 6, 8, 11, 12], "sequenti": [0, 3, 4, 6, 8, 11, 12], "get": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "5": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "getordefault": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "t": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "rais": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "error": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "neither": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "getoutputcol": [0, 1], "getparam": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "paramnam": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "hasdefault": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "bool": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "check": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "whether": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "hasparam": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "test": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "instanc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "static": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "initialize_cuml_log": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "verbos": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "initi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "logger": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "true": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "log_level": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "integ": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "initialize_cuml_param": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "isdefin": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "explicitli": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "isset": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "classmethod": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "load": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "path": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "rl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "read": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "shortcut": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "mlreader": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "write": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "setk": [0, 4, 6, 7], "set_gpu_devic": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "context": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "taskcontext": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "is_loc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "is_transform": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "fals": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "devic": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "accord": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "task": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "resourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "local": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "mode": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "we": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "partit": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "id": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "train": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "set_param": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "maintain": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "defin": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "_cumlclass": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "mlwriter": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "cuml_param": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "dictionari": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "intend": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "underli": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "parent": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "undefin": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "num_work": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "worker": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "correspond": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "run": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "implement": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "dir": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "type": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "mean_": 1, "float": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "components_": 1, "explained_variance_ratio_": 1, "singular_values_": 1, "n_col": [1, 2, 5, 9, 10], "dtype": [1, 2, 5, 9, 10], "appli": [1, 4], "note": [1, 2, 3, 6, 7, 8, 11, 12], "must": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "zero": 1, "center": [1, 4, 5], "ensur": 1, "pca": 1, "work": [1, 3, 11], "properli": 1, "doe": 1, "automat": [1, 2, 3, 6, 8, 10, 11], "remov": 1, "so": [1, 2, 3, 5, 7, 9, 10, 11], "py": [1, 12], "standardscal": 1, "befor": [1, 8, 9], "invok": 1, "reduced_df": 1, "show": [1, 4, 6, 8], "414213562373095": 1, "cpu": [1, 2, 5, 6, 7, 9, 10], "from_row": [1, 2, 5, 7, 9, 10], "model_attribut": [1, 2, 5, 7, 9, 10], "row": [1, 2, 3, 4, 5, 7, 9, 10, 11], "constructor": [1, 2, 5, 7, 9, 10], "pleas": [1, 2, 3, 5, 7, 9, 10, 11], "make": [1, 2, 5, 7, 9, 10], "sure": [1, 2, 5, 7, 9, 10], "can": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12], "accept": [1, 2, 5, 6, 7, 9, 10], "get_model_attribut": [1, 2, 5, 7, 9, 10], "explainedvari": 1, "proport": 1, "varianc": [1, 10, 11], "matrix": 1, "classif": [2, 3, 10, 11, 12, 13], "treelite_model": [2, 10], "model_json": [2, 10], "num_class": 2, "randomforestclassifi": [2, 12], "evalu": [2, 9, 12], "binaryrandomforestclassificationsummari": 2, "randomforestclassificationsummari": 2, "getbootstrap": [2, 3, 10, 11], "bootstrap": [2, 3, 10, 11], "getfeaturesubsetstrategi": [2, 3, 10, 11], "featuresubsetstrategi": [2, 3, 10, 11], "4": [2, 3, 4, 6, 8, 10, 11, 12], "getfeaturescol": [2, 3, 4, 5, 8, 9, 10, 11], "featurescol": [2, 3, 4, 5, 8, 9, 10, 11], "getimpur": [2, 3, 10, 11], "impur": [2, 3, 10, 11], "6": [2, 3, 8, 11, 12], "getlabelcol": [2, 3, 6, 7, 8, 9, 10, 11], "labelcol": [2, 3, 6, 7, 8, 9, 10, 11], "getmaxbin": [2, 3, 10, 11], "maxbin": [2, 3, 10, 11, 12], "getmaxdepth": [2, 3, 10, 11], "maxdepth": [2, 3, 10, 11], "getmininstancespernod": [2, 3, 10, 11], "mininstancespernod": [2, 3, 10, 11], "getpredictioncol": [2, 4, 5, 8, 9, 10], "predictioncol": [2, 3, 4, 5, 8, 9, 10, 11], "getprobabilitycol": [2, 3], "probabilitycol": [2, 3], "getrawpredictioncol": [2, 3], "rawpredictioncol": [2, 3], "getse": [2, 3, 4, 5, 10, 11, 12], "seed": [2, 3, 4, 5, 10, 11, 12], "predict": [2, 3, 4, 5, 8, 9, 10, 11], "label": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12], "predictleaf": [2, 10], "indic": [2, 4, 5, 6, 7, 9, 10], "leav": [2, 10], "predictprob": 2, "probabl": [2, 3], "predictraw": 2, "raw": [2, 3], "possibl": 2, "setfeaturescol": [2, 3, 4, 5, 8, 9, 10, 11], "featurecol": [2, 3, 4, 8, 9, 10, 11], "setlabelcol": [2, 3, 8, 9, 10, 11], "setpredictioncol": [2, 3, 4, 5, 8, 9, 10, 11], "setprobabilitycol": [2, 3], "_rfclassifierparam": [2, 3], "setrawpredictioncol": [2, 3], "sampl": [2, 3, 5, 9, 10, 11], "build": [2, 3, 10, 11, 12], "tree": [2, 3, 10, 11], "featureimport": [2, 10], "estim": [2, 3, 7, 10, 12], "consid": [2, 3, 10, 11], "split": [2, 3, 10, 11, 12], "node": [2, 3, 10, 11], "support": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "auto": [2, 3, 4, 5, 8, 9, 10, 11], "choos": [2, 3, 4, 5, 10, 11], "numtre": [2, 3, 10, 11], "forest": [2, 3, 10, 11], "sqrt": [2, 3, 10, 11], "onethird": [2, 3, 10, 11], "regress": [2, 3, 8, 9, 10, 11, 13], "log2": [2, 3, 10, 11], "n": [2, 3, 10, 11], "rang": [2, 3, 8, 9, 10, 11, 12], "getnumtre": [2, 3, 10, 11], "ensembl": [2, 3, 10, 11], "hassummari": [2, 5, 9], "summari": [2, 5, 9], "criterion": [2, 3, 4, 10, 11], "inform": [2, 3, 8, 10, 11], "gain": [2, 3, 10, 11], "calcul": [2, 3, 4, 9, 10, 11], "case": [2, 3, 8, 10, 11], "insensit": [2, 3, 10, 11], "entropi": [2, 3], "gini": [2, 3], "max": [2, 3, 4, 5, 8, 9, 10, 11], "bin": [2, 3, 10, 11], "discret": [2, 3, 10, 11], "continu": [2, 3, 10, 11], "categori": [2, 3, 10, 11], "categor": [2, 3, 10, 11], "maximum": [2, 3, 4, 5, 10, 11], "depth": [2, 3, 10, 11], "g": [2, 3, 7, 10, 11, 12], "leaf": [2, 3, 10, 11], "intern": [2, 3, 10, 11], "30": [2, 3, 10, 11], "minimum": [2, 3, 10, 11], "child": [2, 3, 10, 11], "have": [2, 3, 9, 10, 11], "after": [2, 3, 4, 10, 11, 12], "caus": [2, 3, 10, 11, 12], "left": [2, 3, 10, 11], "right": [2, 3, 10, 11], "fewer": [2, 3, 10, 11], "than": [2, 3, 4, 5, 10, 11], "discard": [2, 3, 10, 11], "invalid": [2, 3, 10, 11], "numclass": 2, "take": [2, 3, 6, 11], "numfeatur": [2, 5, 8, 9, 10, 11], "unknown": [2, 5, 9, 10], "condit": [2, 3], "Not": [2, 3], "well": [2, 3, 11], "calibr": [2, 3], "These": [2, 3, 10], "treat": [2, 3], "confid": [2, 3], "precis": [2, 3], "random": [2, 3, 4, 5, 10, 11, 12], "supportedfeaturesubsetstrategi": [2, 3, 10, 11], "supportedimpur": [2, 3, 10, 11], "todebugstr": [2, 10], "full": [2, 10], "descript": [2, 10], "totalnumnod": [2, 10], "total": [2, 3, 10, 11], "sum": [2, 10], "over": [2, 10, 12], "treeweight": [2, 10], "weight": [2, 10], "warn": [2, 3, 8, 10, 11, 12], "null": [2, 10], "rawpredict": 3, "32": [3, 11], "20": [3, 11], "n_stream": [3, 11], "min_samples_split": [3, 11], "max_sampl": [3, 11], "max_leav": [3, 11], "min_impurity_decreas": [3, 11], "max_batch_s": [3, 11], "4096": [3, 11], "classifi": 3, "decis": [3, 11], "It": [3, 8, 11, 12], "both": [3, 8, 11], "binari": 3, "multiclass": 3, "base": [3, 8, 11], "python": [3, 8, 11], "librari": [3, 8, 11], "pipelin": [3, 8, 11], "meta": [3, 8, 11], "like": [3, 8, 11], "crossvalid": [3, 8, 11], "trainvalidationsplit": [3, 8, 11], "onevsrest": [3, 8, 11], "embarrassingli": [3, 11], "parallel": [3, 4, 5, 11, 12], "approach": [3, 11], "For": [3, 8, 9, 11, 12], "being": [3, 11], "built": [3, 11], "w": [3, 11], "simpli": [3, 11], "avail": [3, 11, 12], "In": [3, 4, 11], "mani": [3, 11], "subset": [3, 11], "gener": [3, 4, 11, 12], "requir": [3, 11], "shuffl": [3, 11], "advanc": [3, 11], "most": [3, 8, 11], "And": [3, 8, 11], "rapid": [3, 8, 11], "arrai": [3, 6, 7, 8, 11], "columnar": [3, 8, 11], "assembl": [3, 8, 11], "numer": [3, 8, 11], "greater": [3, 11], "per": [3, 11], "ratio": [3, 11], "control": [3, 11], "replac": [3, 11], "whole": [3, 11], "tri": [3, 8, 11], "infer": [3, 8, 11], "environ": [3, 8, 11], "log": [3, 8, 11], "level": [3, 8, 11], "disabl": [3, 8, 11], "messag": [3, 8, 11], "enabl": [3, 4, 8, 11], "onli": [3, 6, 7, 8, 11, 12], "critic": [3, 8, 11], "up": [3, 8, 11], "includ": [3, 7, 8, 11], "debug": [3, 8, 11], "trace": [3, 8, 11], "stream": [3, 11], "bug": [3, 11], "see": [3, 7, 11], "rapidsai": [3, 11], "5402": [3, 11], "repres": [3, 4, 5, 7, 11], "fraction": [3, 11], "ceil": [3, 11], "n_row": [3, 11], "soft": [3, 11], "constraint": [3, 11], "unlimit": [3, 11], "decreas": [3, 11], "process": [3, 11], "batch": [3, 11], "numpi": [3, 11], "allclos": [3, 11], "stringindex": 3, "spars": [3, 8, 11], "si_model": 3, "td": 3, "randomforestclassificationmodel": 3, "rf": [3, 11], "42": [3, 11], "randomforestclassificationmodel_": 3, "test0": [3, 11], "result": [3, 7, 8, 11], "head": [3, 11], "test1": [3, 11], "rfc_path": 3, "temp_path": [3, 8, 11], "rfc": [3, 12], "rf2": [3, 11], "model_path": [3, 8, 11, 12], "rfc_model": 3, "model2": [3, 8, 11], "setbootstrap": [3, 11], "setfeaturesubsetstrategi": [3, 11], "setimpur": [3, 11], "setmaxbin": [3, 11], "setmaxdepth": [3, 11], "setmininstancespernod": [3, 11], "setnumtre": [3, 11], "setse": [3, 4, 11, 12], "point": [4, 5], "fix": 4, "denot": 4, "assign": 4, "everi": 4, "nearest": [4, 6, 7, 13], "often": 4, "deal": 4, "8": [4, 12], "maxit": [4, 5, 8, 9], "300": 4, "more": [4, 5], "help": 4, "accur": 4, "start": 4, "tol": [4, 5, 8, 9], "1e": [4, 8], "earli": 4, "stop": 4, "do": [4, 12], "chang": 4, "much": 4, "function": [4, 7, 8, 9], "9": 4, "gpu_kmean": 4, "setmaxit": [4, 8], "10": [4, 12], "kmeans_5606dff6b4fa": 4, "clustercent": [4, 5], "kmeans_model": 4, "getinitmod": [4, 5], "initmod": [4, 5], "getmaxblocksizeinmb": [4, 5], "maxblocksizeinmb": [4, 5], "getmaxit": [4, 5, 8, 9], "getsolv": [4, 5, 8, 9], "solver": [4, 5, 8, 9], "gettol": [4, 5, 8, 9], "settol": [4, 8], "either": [4, 5], "variant": [4, 5], "creat": [4, 5, 12], "memori": [4, 5], "mb": [4, 5], "stack": [4, 5], "block": [4, 5], "within": [4, 5], "remain": [4, 5], "size": [4, 5], "adjust": [4, 5], "optim": [4, 5, 8, 9], "depend": [4, 5], "specif": [4, 5], "converg": [4, 5, 8, 9], "toler": [4, 5, 8, 9], "cluster_centers_": 5, "kmean": 5, "refer": 5, "ndarrai": [5, 9, 10], "doesn": [5, 9], "fall": [5, 9], "back": [5, 9], "knn": [6, 7], "retriev": [6, 7], "exact": [6, 7], "neighbor": [6, 7, 13], "item": [6, 7], "queri": [6, 7], "main": 6, "leverag": 6, "comput": 6, "care": 6, "commun": 6, "aggreg": 6, "howev": 6, "euclidean": [6, 7], "distanc": [6, 7], "also": 6, "known": 6, "l2": [6, 8, 9], "current": [6, 7, 8], "other": [6, 7], "convert": [6, 7], "dure": [6, 12], "idcol": 6, "uniqu": 6, "identifi": [6, 7], "unique_id": [6, 7], "ad": [6, 7], "data_df": [6, 7], "schema": 6, "query_df": [6, 7], "topk": 6, "gpu_knn": 6, "setidcol": [6, 7], "knn_df": [6, 7], "kneighbor": [6, 7], "query_id": 6, "4142135": 6, "knnjoin_df": [6, 7], "exactnearestneighborsjoin": [6, 7], "distcol": [6, 7], "euclideandist": 6, "item_df": [6, 7], "getidcol": [6, 7], "id_col": [6, 7], "specifi": [6, 7, 12], "associ": [6, 7], "item_df_withid": 7, "processed_item_df": 7, "label_isdata": 7, "label_isqueri": 7, "nearestneighbor": 7, "relationship": 7, "asymmetr": 7, "respect": 7, "x": [7, 8], "y": [7, 8], "necessarili": 7, "three": 7, "struct": 7, "field": 7, "similarli": 7, "format": 7, "v1": 7, "v2": 7, "dist": 7, "item_vector": 7, "query_vector": 7, "through": 7, "measur": 7, "here": 7, "target": 7, "float32": 7, "itself": 7, "monoton": 7, "increas": 7, "100": 8, "regparam": [8, 9], "elasticnetparam": [8, 9], "06": 8, "fitintercept": [8, 9], "standard": [8, 9], "loss": [8, 9], "squarederror": [8, 9], "machin": 8, "respons": 8, "linear": 8, "combin": 8, "predictor": 8, "regular": [8, 9], "ordinari": 8, "least": 8, "squar": 8, "ridg": 8, "l1": [8, 9, 10], "lasso": 8, "elast": 8, "net": 8, "elasticnet": [8, 9], "mix": [8, 9], "alpha": [8, 9], "penalti": [8, 9], "intercept": [8, 9], "term": [8, 9], "empti": 8, "normal": [8, 9], "eig": 8, "otherwis": 8, "thei": 8, "elastnetparam": 8, "aka": 8, "linearregressionmodel": 8, "lr": 8, "newpredict": 8, "coeffici": [8, 9], "000000000000001": 8, "4999999999999996": 8, "lr_path": 8, "lr2": 8, "lr_model": 8, "getelasticnetparam": [8, 9], "getfitintercept": [8, 9], "getloss": [8, 9], "getregparam": [8, 9], "getstandard": [8, 9], "setelasticnetparam": 8, "setloss": 8, "setregparam": 8, "setstandard": 8, "huber": [8, 9], "l": [8, 9], "bfg": [8, 9], "coef_": 9, "intercept_": 9, "linearregress": 9, "calculate_regression_metr": [9, 10], "cudf": [9, 10], "metric": [9, 10, 12], "m2n": [9, 10], "m2": [9, 10], "alia": [9, 10], "linearregressionsummari": 9, "scale": 9, "sinc": 9, "just": 9, "api": 9, "compat": 9, "randomforestregressor": 10, "regressor": 11, "randomforestregressionmodel": 11, "randomforestregressor_": 11, "rfr_path": 11, "rfr": 11, "rfr_model": 11, "tune": [12, 13], "estimatorparammap": 12, "numfold": 12, "collectsubmodel": 12, "foldcol": 12, "fold": 12, "cross": 12, "valid": 12, "perform": 12, "select": 12, "non": 12, "overlap": 12, "randomli": 12, "separ": 12, "pair": 12, "exactli": 12, "onc": 12, "paramgridbuild": 12, "crossvalidatormodel": 12, "multiclassclassificationevalu": 12, "tempfil": 12, "grid": 12, "addgrid": 12, "16": 12, "cv": 12, "cvmodel": 12, "getnumfold": 12, "avgmetr": 12, "mkdtemp": 12, "cvmodelread": 12, "uid": 12, "some": 12, "deep": 12, "getcollectsubmodel": 12, "getestim": 12, "getestimatorparammap": 12, "getevalu": 12, "getfoldcol": 12, "getparallel": 12, "crossvalidatorread": 12, "setcollectsubmodel": 12, "setestim": 12, "setestimatorparammap": 12, "setevalu": 12, "setfoldcol": 12, "setnumfold": 12, "setparallel": 12, "setparam": 12, "self": 12, "sub": 12, "best": 12, "oom": 12, "driver": 12, "hyper": 12, "maxim": 12, "won": 12, "throw": 12, "except": 12, "out": 12, "search": 13, "page": 13}, "objects": {"spark_rapids_ml.classification": [[2, 0, 1, "", "RandomForestClassificationModel"], [3, 0, 1, "", "RandomForestClassifier"]], "spark_rapids_ml.classification.RandomForestClassificationModel": [[2, 1, 1, "", "bootstrap"], [2, 2, 1, "", "clear"], [2, 2, 1, "", "copy"], [2, 2, 1, "", "cpu"], [2, 1, 1, "", "cuml_params"], [2, 2, 1, "", "evaluate"], [2, 2, 1, "", "explainParam"], [2, 2, 1, "", "explainParams"], [2, 2, 1, "", "extractParamMap"], [2, 1, 1, "", "featureImportances"], [2, 1, 1, "", "featureSubsetStrategy"], [2, 1, 1, "", "featuresCol"], [2, 1, 1, "", "featuresCols"], [2, 2, 1, "", "from_row"], [2, 2, 1, "", "getBootstrap"], [2, 2, 1, "", "getFeatureSubsetStrategy"], [2, 2, 1, "", "getFeaturesCol"], [2, 2, 1, "", "getFeaturesCols"], [2, 2, 1, "", "getImpurity"], [2, 2, 1, "", "getLabelCol"], [2, 2, 1, "", "getMaxBins"], [2, 2, 1, "", "getMaxDepth"], [2, 2, 1, "", "getMinInstancesPerNode"], [2, 1, 1, "", "getNumTrees"], [2, 2, 1, "", "getOrDefault"], [2, 2, 1, "", "getParam"], [2, 2, 1, "", "getPredictionCol"], [2, 2, 1, "", "getProbabilityCol"], [2, 2, 1, "", "getRawPredictionCol"], [2, 2, 1, "", "getSeed"], [2, 2, 1, "", "get_model_attributes"], [2, 2, 1, "", "hasDefault"], [2, 2, 1, "", "hasParam"], [2, 1, 1, "", "hasSummary"], [2, 1, 1, "", "impurity"], [2, 2, 1, "", "initialize_cuml_logging"], [2, 2, 1, "", "initialize_cuml_params"], [2, 2, 1, "", "isDefined"], [2, 2, 1, "", "isSet"], [2, 1, 1, "", "labelCol"], [2, 2, 1, "", "load"], [2, 1, 1, "", "maxBins"], [2, 1, 1, "", "maxDepth"], [2, 1, 1, "", "minInstancesPerNode"], [2, 1, 1, "", "numClasses"], [2, 1, 1, "", "numFeatures"], [2, 1, 1, "", "numTrees"], [2, 1, 1, "", "num_workers"], [2, 1, 1, "", "params"], [2, 2, 1, "", "predict"], [2, 2, 1, "", "predictLeaf"], [2, 2, 1, "", "predictProbability"], [2, 2, 1, "", "predictRaw"], [2, 1, 1, "", "predictionCol"], [2, 1, 1, "", "probabilityCol"], [2, 1, 1, "", "rawPredictionCol"], [2, 2, 1, "", "read"], [2, 2, 1, "", "save"], [2, 1, 1, "", "seed"], [2, 2, 1, "", "set"], [2, 2, 1, "", "setFeaturesCol"], [2, 2, 1, "", "setFeaturesCols"], [2, 2, 1, "", "setLabelCol"], [2, 2, 1, "", "setPredictionCol"], [2, 2, 1, "", "setProbabilityCol"], [2, 2, 1, "", "setRawPredictionCol"], [2, 2, 1, "", "set_gpu_device"], [2, 2, 1, "", "set_params"], [2, 1, 1, "", "supportedFeatureSubsetStrategies"], [2, 1, 1, "", "supportedImpurities"], [2, 1, 1, "", "toDebugString"], [2, 1, 1, "", "totalNumNodes"], [2, 2, 1, "", "transform"], [2, 1, 1, "", "treeWeights"], [2, 1, 1, "", "trees"], [2, 2, 1, "", "write"]], "spark_rapids_ml.classification.RandomForestClassifier": [[3, 1, 1, "", "bootstrap"], [3, 2, 1, "", "clear"], [3, 2, 1, "", "copy"], [3, 1, 1, "", "cuml_params"], [3, 2, 1, "", "explainParam"], [3, 2, 1, "", "explainParams"], [3, 2, 1, "", "extractParamMap"], [3, 1, 1, "", "featureSubsetStrategy"], [3, 1, 1, "", "featuresCol"], [3, 1, 1, "", "featuresCols"], [3, 2, 1, "", "fit"], [3, 2, 1, "", "fitMultiple"], [3, 2, 1, "", "getBootstrap"], [3, 2, 1, "", "getFeatureSubsetStrategy"], [3, 2, 1, "", "getFeaturesCol"], [3, 2, 1, "", "getFeaturesCols"], [3, 2, 1, "", "getImpurity"], [3, 2, 1, "", "getLabelCol"], [3, 2, 1, "", "getMaxBins"], [3, 2, 1, "", "getMaxDepth"], [3, 2, 1, "", "getMinInstancesPerNode"], [3, 2, 1, "", "getNumTrees"], [3, 2, 1, "", "getOrDefault"], [3, 2, 1, "", "getParam"], [3, 2, 1, "", "getProbabilityCol"], [3, 2, 1, "", "getRawPredictionCol"], [3, 2, 1, "", "getSeed"], [3, 2, 1, "", "hasDefault"], [3, 2, 1, "", "hasParam"], [3, 1, 1, "", "impurity"], [3, 2, 1, "", "initialize_cuml_logging"], [3, 2, 1, "", "initialize_cuml_params"], [3, 2, 1, "", "isDefined"], [3, 2, 1, "", "isSet"], [3, 1, 1, "", "labelCol"], [3, 2, 1, "", "load"], [3, 1, 1, "", "maxBins"], [3, 1, 1, "", "maxDepth"], [3, 1, 1, "", "minInstancesPerNode"], [3, 1, 1, "", "numTrees"], [3, 1, 1, "", "num_workers"], [3, 1, 1, "", "params"], [3, 1, 1, "", "probabilityCol"], [3, 1, 1, "", "rawPredictionCol"], [3, 2, 1, "", "read"], [3, 2, 1, "", "save"], [3, 1, 1, "", "seed"], [3, 2, 1, "", "set"], [3, 2, 1, "", "setBootstrap"], [3, 2, 1, "", "setFeatureSubsetStrategy"], [3, 2, 1, "", "setFeaturesCol"], [3, 2, 1, "", "setFeaturesCols"], [3, 2, 1, "", "setImpurity"], [3, 2, 1, "", "setLabelCol"], [3, 2, 1, "", "setMaxBins"], [3, 2, 1, "", "setMaxDepth"], [3, 2, 1, "", "setMinInstancesPerNode"], [3, 2, 1, "", "setNumTrees"], [3, 2, 1, "", "setPredictionCol"], [3, 2, 1, "", "setProbabilityCol"], [3, 2, 1, "", "setRawPredictionCol"], [3, 2, 1, "", "setSeed"], [3, 2, 1, "", "set_gpu_device"], [3, 2, 1, "", "set_params"], [3, 1, 1, "", "supportedFeatureSubsetStrategies"], [3, 1, 1, "", "supportedImpurities"], [3, 2, 1, "", "write"]], "spark_rapids_ml.clustering": [[4, 0, 1, "", "KMeans"], [5, 0, 1, "", "KMeansModel"]], "spark_rapids_ml.clustering.KMeans": [[4, 2, 1, "", "clear"], [4, 2, 1, "", "copy"], [4, 1, 1, "", "cuml_params"], [4, 2, 1, "", "explainParam"], [4, 2, 1, "", "explainParams"], [4, 2, 1, "", "extractParamMap"], [4, 1, 1, "", "featuresCol"], [4, 1, 1, "", "featuresCols"], [4, 2, 1, "", "fit"], [4, 2, 1, "", "fitMultiple"], [4, 2, 1, "", "getFeaturesCol"], [4, 2, 1, "", "getFeaturesCols"], [4, 2, 1, "", "getInitMode"], [4, 2, 1, "", "getK"], [4, 2, 1, "", "getMaxBlockSizeInMB"], [4, 2, 1, "", "getMaxIter"], [4, 2, 1, "", "getOrDefault"], [4, 2, 1, "", "getParam"], [4, 2, 1, "", "getPredictionCol"], [4, 2, 1, "", "getSeed"], [4, 2, 1, "", "getSolver"], [4, 2, 1, "", "getTol"], [4, 2, 1, "", "hasDefault"], [4, 2, 1, "", "hasParam"], [4, 1, 1, "", "initMode"], [4, 2, 1, "", "initialize_cuml_logging"], [4, 2, 1, "", "initialize_cuml_params"], [4, 2, 1, "", "isDefined"], [4, 2, 1, "", "isSet"], [4, 1, 1, "", "k"], [4, 2, 1, "", "load"], [4, 1, 1, "", "maxBlockSizeInMB"], [4, 1, 1, "", "maxIter"], [4, 1, 1, "", "num_workers"], [4, 1, 1, "", "params"], [4, 1, 1, "", "predictionCol"], [4, 2, 1, "", "read"], [4, 2, 1, "", "save"], [4, 1, 1, "", "seed"], [4, 2, 1, "", "set"], [4, 2, 1, "", "setFeaturesCol"], [4, 2, 1, "", "setFeaturesCols"], [4, 2, 1, "", "setK"], [4, 2, 1, "", "setMaxIter"], [4, 2, 1, "", "setPredictionCol"], [4, 2, 1, "", "setSeed"], [4, 2, 1, "", "setTol"], [4, 2, 1, "", "set_gpu_device"], [4, 2, 1, "", "set_params"], [4, 1, 1, "", "solver"], [4, 1, 1, "", "tol"], [4, 2, 1, "", "write"]], "spark_rapids_ml.clustering.KMeansModel": [[5, 2, 1, "", "clear"], [5, 2, 1, "", "clusterCenters"], [5, 2, 1, "", "copy"], [5, 2, 1, "", "cpu"], [5, 1, 1, "", "cuml_params"], [5, 2, 1, "", "explainParam"], [5, 2, 1, "", "explainParams"], [5, 2, 1, "", "extractParamMap"], [5, 1, 1, "", "featuresCol"], [5, 1, 1, "", "featuresCols"], [5, 2, 1, "", "from_row"], [5, 2, 1, "", "getFeaturesCol"], [5, 2, 1, "", "getFeaturesCols"], [5, 2, 1, "", "getInitMode"], [5, 2, 1, "", "getK"], [5, 2, 1, "", "getMaxBlockSizeInMB"], [5, 2, 1, "", "getMaxIter"], [5, 2, 1, "", "getOrDefault"], [5, 2, 1, "", "getParam"], [5, 2, 1, "", "getPredictionCol"], [5, 2, 1, "", "getSeed"], [5, 2, 1, "", "getSolver"], [5, 2, 1, "", "getTol"], [5, 2, 1, "", "get_model_attributes"], [5, 2, 1, "", "hasDefault"], [5, 2, 1, "", "hasParam"], [5, 1, 1, "", "hasSummary"], [5, 1, 1, "", "initMode"], [5, 2, 1, "", "initialize_cuml_logging"], [5, 2, 1, "", "initialize_cuml_params"], [5, 2, 1, "", "isDefined"], [5, 2, 1, "", "isSet"], [5, 1, 1, "", "k"], [5, 2, 1, "", "load"], [5, 1, 1, "", "maxBlockSizeInMB"], [5, 1, 1, "", "maxIter"], [5, 1, 1, "", "numFeatures"], [5, 1, 1, "", "num_workers"], [5, 1, 1, "", "params"], [5, 2, 1, "", "predict"], [5, 1, 1, "", "predictionCol"], [5, 2, 1, "", "read"], [5, 2, 1, "", "save"], [5, 1, 1, "", "seed"], [5, 2, 1, "", "set"], [5, 2, 1, "", "setFeaturesCol"], [5, 2, 1, "", "setFeaturesCols"], [5, 2, 1, "", "setPredictionCol"], [5, 2, 1, "", "set_gpu_device"], [5, 2, 1, "", "set_params"], [5, 1, 1, "", "solver"], [5, 1, 1, "", "tol"], [5, 2, 1, "", "transform"], [5, 2, 1, "", "write"]], "spark_rapids_ml.feature": [[0, 0, 1, "", "PCA"], [1, 0, 1, "", "PCAModel"]], "spark_rapids_ml.feature.PCA": [[0, 2, 1, "", "clear"], [0, 2, 1, "", "copy"], [0, 1, 1, "", "cuml_params"], [0, 2, 1, "", "explainParam"], [0, 2, 1, "", "explainParams"], [0, 2, 1, "", "extractParamMap"], [0, 2, 1, "", "fit"], [0, 2, 1, "", "fitMultiple"], [0, 2, 1, "", "getInputCol"], [0, 2, 1, "", "getInputCols"], [0, 2, 1, "", "getK"], [0, 2, 1, "", "getOrDefault"], [0, 2, 1, "", "getOutputCol"], [0, 2, 1, "", "getParam"], [0, 2, 1, "", "hasDefault"], [0, 2, 1, "", "hasParam"], [0, 2, 1, "", "initialize_cuml_logging"], [0, 2, 1, "", "initialize_cuml_params"], [0, 1, 1, "", "inputCol"], [0, 1, 1, "", "inputCols"], [0, 2, 1, "", "isDefined"], [0, 2, 1, "", "isSet"], [0, 1, 1, "", "k"], [0, 2, 1, "", "load"], [0, 1, 1, "", "num_workers"], [0, 1, 1, "", "outputCol"], [0, 1, 1, "", "params"], [0, 2, 1, "", "read"], [0, 2, 1, "", "save"], [0, 2, 1, "", "set"], [0, 2, 1, "", "setInputCol"], [0, 2, 1, "", "setInputCols"], [0, 2, 1, "", "setK"], [0, 2, 1, "", "setOutputCol"], [0, 2, 1, "", "set_gpu_device"], [0, 2, 1, "", "set_params"], [0, 2, 1, "", "write"]], "spark_rapids_ml.feature.PCAModel": [[1, 2, 1, "", "clear"], [1, 2, 1, "", "copy"], [1, 2, 1, "", "cpu"], [1, 1, 1, "", "cuml_params"], [1, 2, 1, "", "explainParam"], [1, 2, 1, "", "explainParams"], [1, 1, 1, "", "explainedVariance"], [1, 2, 1, "", "extractParamMap"], [1, 2, 1, "", "from_row"], [1, 2, 1, "", "getInputCol"], [1, 2, 1, "", "getInputCols"], [1, 2, 1, "", "getK"], [1, 2, 1, "", "getOrDefault"], [1, 2, 1, "", "getOutputCol"], [1, 2, 1, "", "getParam"], [1, 2, 1, "", "get_model_attributes"], [1, 2, 1, "", "hasDefault"], [1, 2, 1, "", "hasParam"], [1, 2, 1, "", "initialize_cuml_logging"], [1, 2, 1, "", "initialize_cuml_params"], [1, 1, 1, "", "inputCol"], [1, 1, 1, "", "inputCols"], [1, 2, 1, "", "isDefined"], [1, 2, 1, "", "isSet"], [1, 1, 1, "", "k"], [1, 2, 1, "", "load"], [1, 1, 1, "", "mean"], [1, 1, 1, "", "num_workers"], [1, 1, 1, "", "outputCol"], [1, 1, 1, "", "params"], [1, 1, 1, "", "pc"], [1, 2, 1, "", "read"], [1, 2, 1, "", "save"], [1, 2, 1, "", "set"], [1, 2, 1, "", "setInputCol"], [1, 2, 1, "", "setInputCols"], [1, 2, 1, "", "setOutputCol"], [1, 2, 1, "", "set_gpu_device"], [1, 2, 1, "", "set_params"], [1, 2, 1, "", "transform"], [1, 2, 1, "", "write"]], "spark_rapids_ml.knn": [[6, 0, 1, "", "NearestNeighbors"], [7, 0, 1, "", "NearestNeighborsModel"]], "spark_rapids_ml.knn.NearestNeighbors": [[6, 2, 1, "", "clear"], [6, 2, 1, "", "copy"], [6, 1, 1, "", "cuml_params"], [6, 2, 1, "", "explainParam"], [6, 2, 1, "", "explainParams"], [6, 2, 1, "", "extractParamMap"], [6, 2, 1, "", "fit"], [6, 2, 1, "", "fitMultiple"], [6, 2, 1, "", "getIdCol"], [6, 2, 1, "", "getInputCol"], [6, 2, 1, "", "getInputCols"], [6, 2, 1, "", "getLabelCol"], [6, 2, 1, "", "getOrDefault"], [6, 2, 1, "", "getParam"], [6, 2, 1, "", "hasDefault"], [6, 2, 1, "", "hasParam"], [6, 1, 1, "", "id_col"], [6, 2, 1, "", "initialize_cuml_logging"], [6, 2, 1, "", "initialize_cuml_params"], [6, 1, 1, "", "inputCol"], [6, 1, 1, "", "inputCols"], [6, 2, 1, "", "isDefined"], [6, 2, 1, "", "isSet"], [6, 1, 1, "", "k"], [6, 1, 1, "", "labelCol"], [6, 2, 1, "", "load"], [6, 1, 1, "", "num_workers"], [6, 1, 1, "", "params"], [6, 2, 1, "", "read"], [6, 2, 1, "", "save"], [6, 2, 1, "", "set"], [6, 2, 1, "", "setIdCol"], [6, 2, 1, "", "setInputCol"], [6, 2, 1, "", "setInputCols"], [6, 2, 1, "", "setK"], [6, 2, 1, "", "set_gpu_device"], [6, 2, 1, "", "set_params"], [6, 2, 1, "", "write"]], "spark_rapids_ml.knn.NearestNeighborsModel": [[7, 2, 1, "", "clear"], [7, 2, 1, "", "copy"], [7, 2, 1, "", "cpu"], [7, 1, 1, "", "cuml_params"], [7, 2, 1, "", "exactNearestNeighborsJoin"], [7, 2, 1, "", "explainParam"], [7, 2, 1, "", "explainParams"], [7, 2, 1, "", "extractParamMap"], [7, 2, 1, "", "from_row"], [7, 2, 1, "", "getIdCol"], [7, 2, 1, "", "getInputCol"], [7, 2, 1, "", "getInputCols"], [7, 2, 1, "", "getLabelCol"], [7, 2, 1, "", "getOrDefault"], [7, 2, 1, "", "getParam"], [7, 2, 1, "", "get_model_attributes"], [7, 2, 1, "", "hasDefault"], [7, 2, 1, "", "hasParam"], [7, 1, 1, "", "id_col"], [7, 2, 1, "", "initialize_cuml_logging"], [7, 2, 1, "", "initialize_cuml_params"], [7, 1, 1, "", "inputCol"], [7, 1, 1, "", "inputCols"], [7, 2, 1, "", "isDefined"], [7, 2, 1, "", "isSet"], [7, 1, 1, "", "k"], [7, 2, 1, "", "kneighbors"], [7, 1, 1, "", "labelCol"], [7, 2, 1, "", "load"], [7, 1, 1, "", "num_workers"], [7, 1, 1, "", "params"], [7, 2, 1, "", "read"], [7, 2, 1, "", "save"], [7, 2, 1, "", "set"], [7, 2, 1, "", "setIdCol"], [7, 2, 1, "", "setInputCol"], [7, 2, 1, "", "setInputCols"], [7, 2, 1, "", "setK"], [7, 2, 1, "", "set_gpu_device"], [7, 2, 1, "", "set_params"], [7, 2, 1, "", "transform"], [7, 2, 1, "", "write"]], "spark_rapids_ml.regression": [[8, 0, 1, "", "LinearRegression"], [9, 0, 1, "", "LinearRegressionModel"], [10, 0, 1, "", "RandomForestRegressionModel"], [11, 0, 1, "", "RandomForestRegressor"]], "spark_rapids_ml.regression.LinearRegression": [[8, 2, 1, "", "clear"], [8, 2, 1, "", "copy"], [8, 1, 1, "", "cuml_params"], [8, 1, 1, "", "elasticNetParam"], [8, 2, 1, "", "explainParam"], [8, 2, 1, "", "explainParams"], [8, 2, 1, "", "extractParamMap"], [8, 1, 1, "", "featuresCol"], [8, 1, 1, "", "featuresCols"], [8, 2, 1, "", "fit"], [8, 1, 1, "", "fitIntercept"], [8, 2, 1, "", "fitMultiple"], [8, 2, 1, "", "getElasticNetParam"], [8, 2, 1, "", "getFeaturesCol"], [8, 2, 1, "", "getFeaturesCols"], [8, 2, 1, "", "getFitIntercept"], [8, 2, 1, "", "getLabelCol"], [8, 2, 1, "", "getLoss"], [8, 2, 1, "", "getMaxIter"], [8, 2, 1, "", "getOrDefault"], [8, 2, 1, "", "getParam"], [8, 2, 1, "", "getPredictionCol"], [8, 2, 1, "", "getRegParam"], [8, 2, 1, "", "getSolver"], [8, 2, 1, "", "getStandardization"], [8, 2, 1, "", "getTol"], [8, 2, 1, "", "hasDefault"], [8, 2, 1, "", "hasParam"], [8, 2, 1, "", "initialize_cuml_logging"], [8, 2, 1, "", "initialize_cuml_params"], [8, 2, 1, "", "isDefined"], [8, 2, 1, "", "isSet"], [8, 1, 1, "", "labelCol"], [8, 2, 1, "", "load"], [8, 1, 1, "", "loss"], [8, 1, 1, "", "maxIter"], [8, 1, 1, "", "num_workers"], [8, 1, 1, "", "params"], [8, 1, 1, "", "predictionCol"], [8, 2, 1, "", "read"], [8, 1, 1, "", "regParam"], [8, 2, 1, "", "save"], [8, 2, 1, "", "set"], [8, 2, 1, "", "setElasticNetParam"], [8, 2, 1, "", "setFeaturesCol"], [8, 2, 1, "", "setFeaturesCols"], [8, 2, 1, "", "setLabelCol"], [8, 2, 1, "", "setLoss"], [8, 2, 1, "", "setMaxIter"], [8, 2, 1, "", "setPredictionCol"], [8, 2, 1, "", "setRegParam"], [8, 2, 1, "", "setStandardization"], [8, 2, 1, "", "setTol"], [8, 2, 1, "", "set_gpu_device"], [8, 2, 1, "", "set_params"], [8, 1, 1, "", "solver"], [8, 1, 1, "", "standardization"], [8, 1, 1, "", "tol"], [8, 2, 1, "", "write"]], "spark_rapids_ml.regression.LinearRegressionModel": [[9, 2, 1, "", "calculate_regression_metrics"], [9, 2, 1, "", "clear"], [9, 1, 1, "", "coefficients"], [9, 2, 1, "", "copy"], [9, 2, 1, "", "cpu"], [9, 1, 1, "", "cuml_params"], [9, 1, 1, "", "elasticNetParam"], [9, 2, 1, "", "evaluate"], [9, 2, 1, "", "explainParam"], [9, 2, 1, "", "explainParams"], [9, 2, 1, "", "extractParamMap"], [9, 1, 1, "", "featuresCol"], [9, 1, 1, "", "featuresCols"], [9, 1, 1, "", "fitIntercept"], [9, 2, 1, "", "from_row"], [9, 2, 1, "", "getElasticNetParam"], [9, 2, 1, "", "getFeaturesCol"], [9, 2, 1, "", "getFeaturesCols"], [9, 2, 1, "", "getFitIntercept"], [9, 2, 1, "", "getLabelCol"], [9, 2, 1, "", "getLoss"], [9, 2, 1, "", "getMaxIter"], [9, 2, 1, "", "getOrDefault"], [9, 2, 1, "", "getParam"], [9, 2, 1, "", "getPredictionCol"], [9, 2, 1, "", "getRegParam"], [9, 2, 1, "", "getSolver"], [9, 2, 1, "", "getStandardization"], [9, 2, 1, "", "getTol"], [9, 2, 1, "", "get_model_attributes"], [9, 2, 1, "", "hasDefault"], [9, 2, 1, "", "hasParam"], [9, 1, 1, "", "hasSummary"], [9, 2, 1, "", "initialize_cuml_logging"], [9, 2, 1, "", "initialize_cuml_params"], [9, 1, 1, "", "intercept"], [9, 2, 1, "", "isDefined"], [9, 2, 1, "", "isSet"], [9, 1, 1, "", "labelCol"], [9, 2, 1, "", "load"], [9, 1, 1, "", "loss"], [9, 1, 1, "", "maxIter"], [9, 1, 1, "", "numFeatures"], [9, 1, 1, "", "num_workers"], [9, 1, 1, "", "params"], [9, 2, 1, "", "predict"], [9, 1, 1, "", "predictionCol"], [9, 2, 1, "", "read"], [9, 1, 1, "", "regParam"], [9, 2, 1, "", "save"], [9, 1, 1, "", "scale"], [9, 2, 1, "", "set"], [9, 2, 1, "", "setFeaturesCol"], [9, 2, 1, "", "setFeaturesCols"], [9, 2, 1, "", "setLabelCol"], [9, 2, 1, "", "setPredictionCol"], [9, 2, 1, "", "set_gpu_device"], [9, 2, 1, "", "set_params"], [9, 1, 1, "", "solver"], [9, 1, 1, "", "standardization"], [9, 1, 1, "", "tol"], [9, 2, 1, "", "transform"], [9, 2, 1, "", "write"]], "spark_rapids_ml.regression.RandomForestRegressionModel": [[10, 1, 1, "", "bootstrap"], [10, 2, 1, "", "calculate_regression_metrics"], [10, 2, 1, "", "clear"], [10, 2, 1, "", "copy"], [10, 2, 1, "", "cpu"], [10, 1, 1, "", "cuml_params"], [10, 2, 1, "", "explainParam"], [10, 2, 1, "", "explainParams"], [10, 2, 1, "", "extractParamMap"], [10, 1, 1, "", "featureImportances"], [10, 1, 1, "", "featureSubsetStrategy"], [10, 1, 1, "", "featuresCol"], [10, 1, 1, "", "featuresCols"], [10, 2, 1, "", "from_row"], [10, 2, 1, "", "getBootstrap"], [10, 2, 1, "", "getFeatureSubsetStrategy"], [10, 2, 1, "", "getFeaturesCol"], [10, 2, 1, "", "getFeaturesCols"], [10, 2, 1, "", "getImpurity"], [10, 2, 1, "", "getLabelCol"], [10, 2, 1, "", "getMaxBins"], [10, 2, 1, "", "getMaxDepth"], [10, 2, 1, "", "getMinInstancesPerNode"], [10, 1, 1, "", "getNumTrees"], [10, 2, 1, "", "getOrDefault"], [10, 2, 1, "", "getParam"], [10, 2, 1, "", "getPredictionCol"], [10, 2, 1, "", "getSeed"], [10, 2, 1, "", "get_model_attributes"], [10, 2, 1, "", "hasDefault"], [10, 2, 1, "", "hasParam"], [10, 1, 1, "", "impurity"], [10, 2, 1, "", "initialize_cuml_logging"], [10, 2, 1, "", "initialize_cuml_params"], [10, 2, 1, "", "isDefined"], [10, 2, 1, "", "isSet"], [10, 1, 1, "", "labelCol"], [10, 2, 1, "", "load"], [10, 1, 1, "", "maxBins"], [10, 1, 1, "", "maxDepth"], [10, 1, 1, "", "minInstancesPerNode"], [10, 1, 1, "", "numFeatures"], [10, 1, 1, "", "numTrees"], [10, 1, 1, "", "num_workers"], [10, 1, 1, "", "params"], [10, 2, 1, "", "predict"], [10, 2, 1, "", "predictLeaf"], [10, 1, 1, "", "predictionCol"], [10, 2, 1, "", "read"], [10, 2, 1, "", "save"], [10, 1, 1, "", "seed"], [10, 2, 1, "", "set"], [10, 2, 1, "", "setFeaturesCol"], [10, 2, 1, "", "setFeaturesCols"], [10, 2, 1, "", "setLabelCol"], [10, 2, 1, "", "setPredictionCol"], [10, 2, 1, "", "set_gpu_device"], [10, 2, 1, "", "set_params"], [10, 1, 1, "", "supportedFeatureSubsetStrategies"], [10, 1, 1, "", "supportedImpurities"], [10, 1, 1, "", "toDebugString"], [10, 1, 1, "", "totalNumNodes"], [10, 2, 1, "", "transform"], [10, 1, 1, "", "treeWeights"], [10, 1, 1, "", "trees"], [10, 2, 1, "", "write"]], "spark_rapids_ml.regression.RandomForestRegressor": [[11, 1, 1, "", "bootstrap"], [11, 2, 1, "", "clear"], [11, 2, 1, "", "copy"], [11, 1, 1, "", "cuml_params"], [11, 2, 1, "", "explainParam"], [11, 2, 1, "", "explainParams"], [11, 2, 1, "", "extractParamMap"], [11, 1, 1, "", "featureSubsetStrategy"], [11, 1, 1, "", "featuresCol"], [11, 1, 1, "", "featuresCols"], [11, 2, 1, "", "fit"], [11, 2, 1, "", "fitMultiple"], [11, 2, 1, "", "getBootstrap"], [11, 2, 1, "", "getFeatureSubsetStrategy"], [11, 2, 1, "", "getFeaturesCol"], [11, 2, 1, "", "getFeaturesCols"], [11, 2, 1, "", "getImpurity"], [11, 2, 1, "", "getLabelCol"], [11, 2, 1, "", "getMaxBins"], [11, 2, 1, "", "getMaxDepth"], [11, 2, 1, "", "getMinInstancesPerNode"], [11, 2, 1, "", "getNumTrees"], [11, 2, 1, "", "getOrDefault"], [11, 2, 1, "", "getParam"], [11, 2, 1, "", "getSeed"], [11, 2, 1, "", "hasDefault"], [11, 2, 1, "", "hasParam"], [11, 1, 1, "", "impurity"], [11, 2, 1, "", "initialize_cuml_logging"], [11, 2, 1, "", "initialize_cuml_params"], [11, 2, 1, "", "isDefined"], [11, 2, 1, "", "isSet"], [11, 1, 1, "", "labelCol"], [11, 2, 1, "", "load"], [11, 1, 1, "", "maxBins"], [11, 1, 1, "", "maxDepth"], [11, 1, 1, "", "minInstancesPerNode"], [11, 1, 1, "", "numTrees"], [11, 1, 1, "", "num_workers"], [11, 1, 1, "", "params"], [11, 2, 1, "", "read"], [11, 2, 1, "", "save"], [11, 1, 1, "", "seed"], [11, 2, 1, "", "set"], [11, 2, 1, "", "setBootstrap"], [11, 2, 1, "", "setFeatureSubsetStrategy"], [11, 2, 1, "", "setFeaturesCol"], [11, 2, 1, "", "setFeaturesCols"], [11, 2, 1, "", "setImpurity"], [11, 2, 1, "", "setLabelCol"], [11, 2, 1, "", "setMaxBins"], [11, 2, 1, "", "setMaxDepth"], [11, 2, 1, "", "setMinInstancesPerNode"], [11, 2, 1, "", "setNumTrees"], [11, 2, 1, "", "setPredictionCol"], [11, 2, 1, "", "setSeed"], [11, 2, 1, "", "set_gpu_device"], [11, 2, 1, "", "set_params"], [11, 1, 1, "", "supportedFeatureSubsetStrategies"], [11, 1, 1, "", "supportedImpurities"], [11, 2, 1, "", "write"]], "spark_rapids_ml.tuning": [[12, 0, 1, "", "CrossValidator"]], "spark_rapids_ml.tuning.CrossValidator": [[12, 2, 1, "", "clear"], [12, 1, 1, "", "collectSubModels"], [12, 2, 1, "", "copy"], [12, 1, 1, "", "estimator"], [12, 1, 1, "", "estimatorParamMaps"], [12, 1, 1, "", "evaluator"], [12, 2, 1, "", "explainParam"], [12, 2, 1, "", "explainParams"], [12, 2, 1, "", "extractParamMap"], [12, 2, 1, "", "fit"], [12, 2, 1, "", "fitMultiple"], [12, 1, 1, "", "foldCol"], [12, 2, 1, "", "getCollectSubModels"], [12, 2, 1, "", "getEstimator"], [12, 2, 1, "", "getEstimatorParamMaps"], [12, 2, 1, "", "getEvaluator"], [12, 2, 1, "", "getFoldCol"], [12, 2, 1, "", "getNumFolds"], [12, 2, 1, "", "getOrDefault"], [12, 2, 1, "", "getParallelism"], [12, 2, 1, "", "getParam"], [12, 2, 1, "", "getSeed"], [12, 2, 1, "", "hasDefault"], [12, 2, 1, "", "hasParam"], [12, 2, 1, "", "isDefined"], [12, 2, 1, "", "isSet"], [12, 2, 1, "", "load"], [12, 1, 1, "", "numFolds"], [12, 1, 1, "", "parallelism"], [12, 1, 1, "", "params"], [12, 2, 1, "", "read"], [12, 2, 1, "", "save"], [12, 1, 1, "", "seed"], [12, 2, 1, "", "set"], [12, 2, 1, "", "setCollectSubModels"], [12, 2, 1, "", "setEstimator"], [12, 2, 1, "", "setEstimatorParamMaps"], [12, 2, 1, "", "setEvaluator"], [12, 2, 1, "", "setFoldCol"], [12, 2, 1, "", "setNumFolds"], [12, 2, 1, "", "setParallelism"], [12, 2, 1, "", "setParams"], [12, 2, 1, "", "setSeed"], [12, 2, 1, "", "write"]]}, "objtypes": {"0": "py:class", "1": "py:attribute", "2": "py:method"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "attribute", "Python attribute"], "2": ["py", "method", "Python method"]}, "titleterms": {"pca": 0, "pcamodel": 1, "randomforestclassificationmodel": 2, "randomforestclassifi": 3, "kmean": 4, "kmeansmodel": 5, "nearestneighbor": 6, "nearestneighborsmodel": 7, "linearregress": 8, "linearregressionmodel": 9, "randomforestregressionmodel": 10, "randomforestregressor": 11, "crossvalid": 12, "welcom": 13, "spark": [13, 14], "rapid": [13, 14], "ml": [13, 14], "": 13, "document": 13, "content": 13, "indic": 13, "tabl": 13, "featur": 14, "classif": 14, "cluster": 14, "regress": 14, "nearest": 14, "neighbor": 14, "tune": 14}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"PCA": [[0, "pca"]], "PCAModel": [[1, "pcamodel"]], "RandomForestClassificationModel": [[2, "randomforestclassificationmodel"]], "RandomForestClassifier": [[3, "randomforestclassifier"]], "KMeans": [[4, "kmeans"]], "KMeansModel": [[5, "kmeansmodel"]], "NearestNeighbors": [[6, "nearestneighbors"]], "NearestNeighborsModel": [[7, "nearestneighborsmodel"]], "LinearRegression": [[8, "linearregression"]], "LinearRegressionModel": [[9, "linearregressionmodel"]], "RandomForestRegressionModel": [[10, "randomforestregressionmodel"]], "RandomForestRegressor": [[11, "randomforestregressor"]], "CrossValidator": [[12, "crossvalidator"]], "Welcome to spark-rapids-ml\u2019s documentation!": [[13, "welcome-to-spark-rapids-ml-s-documentation"]], "Contents:": [[13, null]], "Indices and tables": [[13, "indices-and-tables"]], "Spark Rapids ML": [[14, "spark-rapids-ml"]], "Feature": [[14, "feature"]], "Classification": [[14, "classification"]], "Clustering": [[14, "clustering"]], "Regression": [[14, "regression"]], "Nearest Neighbors": [[14, "nearest-neighbors"]], "Tuning": [[14, "tuning"]]}, "indexentries": {"pca (class in spark_rapids_ml.feature)": [[0, "spark_rapids_ml.feature.PCA"]], "clear() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.clear"]], "copy() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.copy"]], "cuml_params (spark_rapids_ml.feature.pca attribute)": [[0, "spark_rapids_ml.feature.PCA.cuml_params"]], "explainparam() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.explainParam"]], "explainparams() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.explainParams"]], "extractparammap() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.extractParamMap"]], "fit() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.fit"]], "fitmultiple() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.fitMultiple"]], "getinputcol() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.getInputCol"]], "getinputcols() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.getInputCols"]], "getk() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.getK"]], "getordefault() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.getOrDefault"]], "getoutputcol() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.getOutputCol"]], "getparam() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.getParam"]], "hasdefault() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.hasDefault"]], "hasparam() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.hasParam"]], "initialize_cuml_logging() (spark_rapids_ml.feature.pca static method)": [[0, "spark_rapids_ml.feature.PCA.initialize_cuml_logging"]], "initialize_cuml_params() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.initialize_cuml_params"]], "inputcol (spark_rapids_ml.feature.pca attribute)": [[0, "spark_rapids_ml.feature.PCA.inputCol"]], "inputcols (spark_rapids_ml.feature.pca attribute)": [[0, "spark_rapids_ml.feature.PCA.inputCols"]], "isdefined() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.isDefined"]], "isset() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.isSet"]], "k (spark_rapids_ml.feature.pca attribute)": [[0, "spark_rapids_ml.feature.PCA.k"]], "load() (spark_rapids_ml.feature.pca class method)": [[0, "spark_rapids_ml.feature.PCA.load"]], "num_workers (spark_rapids_ml.feature.pca attribute)": [[0, "spark_rapids_ml.feature.PCA.num_workers"]], "outputcol (spark_rapids_ml.feature.pca attribute)": [[0, "spark_rapids_ml.feature.PCA.outputCol"]], "params (spark_rapids_ml.feature.pca attribute)": [[0, "spark_rapids_ml.feature.PCA.params"]], "read() (spark_rapids_ml.feature.pca class method)": [[0, "spark_rapids_ml.feature.PCA.read"]], "save() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.save"]], "set() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.set"]], "setinputcol() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.setInputCol"]], "setinputcols() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.setInputCols"]], "setk() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.setK"]], "setoutputcol() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.setOutputCol"]], "set_gpu_device() (spark_rapids_ml.feature.pca static method)": [[0, "spark_rapids_ml.feature.PCA.set_gpu_device"]], "set_params() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.set_params"]], "write() (spark_rapids_ml.feature.pca method)": [[0, "spark_rapids_ml.feature.PCA.write"]], "pcamodel (class in spark_rapids_ml.feature)": [[1, "spark_rapids_ml.feature.PCAModel"]], "clear() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.clear"]], "copy() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.copy"]], "cpu() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.cpu"]], "cuml_params (spark_rapids_ml.feature.pcamodel attribute)": [[1, "spark_rapids_ml.feature.PCAModel.cuml_params"]], "explainparam() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.explainParam"]], "explainparams() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.explainParams"]], "explainedvariance (spark_rapids_ml.feature.pcamodel attribute)": [[1, "spark_rapids_ml.feature.PCAModel.explainedVariance"]], "extractparammap() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.extractParamMap"]], "from_row() (spark_rapids_ml.feature.pcamodel class method)": [[1, "spark_rapids_ml.feature.PCAModel.from_row"]], "getinputcol() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.getInputCol"]], "getinputcols() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.getInputCols"]], "getk() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.getK"]], "getordefault() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.getOrDefault"]], "getoutputcol() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.getOutputCol"]], "getparam() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.getParam"]], "get_model_attributes() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.get_model_attributes"]], "hasdefault() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.hasDefault"]], "hasparam() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.hasParam"]], "initialize_cuml_logging() (spark_rapids_ml.feature.pcamodel static method)": [[1, "spark_rapids_ml.feature.PCAModel.initialize_cuml_logging"]], "initialize_cuml_params() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.initialize_cuml_params"]], "inputcol (spark_rapids_ml.feature.pcamodel attribute)": [[1, "spark_rapids_ml.feature.PCAModel.inputCol"]], "inputcols (spark_rapids_ml.feature.pcamodel attribute)": [[1, "spark_rapids_ml.feature.PCAModel.inputCols"]], "isdefined() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.isDefined"]], "isset() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.isSet"]], "k (spark_rapids_ml.feature.pcamodel attribute)": [[1, "spark_rapids_ml.feature.PCAModel.k"]], "load() (spark_rapids_ml.feature.pcamodel class method)": [[1, "spark_rapids_ml.feature.PCAModel.load"]], "mean (spark_rapids_ml.feature.pcamodel attribute)": [[1, "spark_rapids_ml.feature.PCAModel.mean"]], "num_workers (spark_rapids_ml.feature.pcamodel attribute)": [[1, "spark_rapids_ml.feature.PCAModel.num_workers"]], "outputcol (spark_rapids_ml.feature.pcamodel attribute)": [[1, "spark_rapids_ml.feature.PCAModel.outputCol"]], "params (spark_rapids_ml.feature.pcamodel attribute)": [[1, "spark_rapids_ml.feature.PCAModel.params"]], "pc (spark_rapids_ml.feature.pcamodel attribute)": [[1, "spark_rapids_ml.feature.PCAModel.pc"]], "read() (spark_rapids_ml.feature.pcamodel class method)": [[1, "spark_rapids_ml.feature.PCAModel.read"]], "save() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.save"]], "set() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.set"]], "setinputcol() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.setInputCol"]], "setinputcols() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.setInputCols"]], "setoutputcol() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.setOutputCol"]], "set_gpu_device() (spark_rapids_ml.feature.pcamodel static method)": [[1, "spark_rapids_ml.feature.PCAModel.set_gpu_device"]], "set_params() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.set_params"]], "transform() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.transform"]], "write() (spark_rapids_ml.feature.pcamodel method)": [[1, "spark_rapids_ml.feature.PCAModel.write"]], "randomforestclassificationmodel (class in spark_rapids_ml.classification)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel"]], "bootstrap (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.bootstrap"]], "clear() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.clear"]], "copy() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.copy"]], "cpu() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.cpu"]], "cuml_params (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.cuml_params"]], "evaluate() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.evaluate"]], "explainparam() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.explainParam"]], "explainparams() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.explainParams"]], "extractparammap() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.extractParamMap"]], "featureimportances (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.featureImportances"]], "featuresubsetstrategy (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.featureSubsetStrategy"]], "featurescol (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.featuresCol"]], "featurescols (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.featuresCols"]], "from_row() (spark_rapids_ml.classification.randomforestclassificationmodel class method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.from_row"]], "getbootstrap() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.getBootstrap"]], "getfeaturesubsetstrategy() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.getFeatureSubsetStrategy"]], "getfeaturescol() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.getFeaturesCol"]], "getfeaturescols() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.getFeaturesCols"]], "getimpurity() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.getImpurity"]], "getlabelcol() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.getLabelCol"]], "getmaxbins() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.getMaxBins"]], "getmaxdepth() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.getMaxDepth"]], "getmininstancespernode() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.getMinInstancesPerNode"]], "getnumtrees (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.getNumTrees"]], "getordefault() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.getOrDefault"]], "getparam() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.getParam"]], "getpredictioncol() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.getPredictionCol"]], "getprobabilitycol() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.getProbabilityCol"]], "getrawpredictioncol() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.getRawPredictionCol"]], "getseed() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.getSeed"]], "get_model_attributes() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.get_model_attributes"]], "hasdefault() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.hasDefault"]], "hasparam() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.hasParam"]], "hassummary (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.hasSummary"]], "impurity (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.impurity"]], "initialize_cuml_logging() (spark_rapids_ml.classification.randomforestclassificationmodel static method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.initialize_cuml_logging"]], "initialize_cuml_params() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.initialize_cuml_params"]], "isdefined() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.isDefined"]], "isset() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.isSet"]], "labelcol (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.labelCol"]], "load() (spark_rapids_ml.classification.randomforestclassificationmodel class method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.load"]], "maxbins (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.maxBins"]], "maxdepth (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.maxDepth"]], "mininstancespernode (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.minInstancesPerNode"]], "numclasses (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.numClasses"]], "numfeatures (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.numFeatures"]], "numtrees (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.numTrees"]], "num_workers (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.num_workers"]], "params (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.params"]], "predict() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.predict"]], "predictleaf() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.predictLeaf"]], "predictprobability() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.predictProbability"]], "predictraw() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.predictRaw"]], "predictioncol (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.predictionCol"]], "probabilitycol (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.probabilityCol"]], "rawpredictioncol (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.rawPredictionCol"]], "read() (spark_rapids_ml.classification.randomforestclassificationmodel class method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.read"]], "save() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.save"]], "seed (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.seed"]], "set() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.set"]], "setfeaturescol() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.setFeaturesCol"]], "setfeaturescols() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.setFeaturesCols"]], "setlabelcol() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.setLabelCol"]], "setpredictioncol() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.setPredictionCol"]], "setprobabilitycol() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.setProbabilityCol"]], "setrawpredictioncol() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.setRawPredictionCol"]], "set_gpu_device() (spark_rapids_ml.classification.randomforestclassificationmodel static method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.set_gpu_device"]], "set_params() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.set_params"]], "supportedfeaturesubsetstrategies (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.supportedFeatureSubsetStrategies"]], "supportedimpurities (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.supportedImpurities"]], "todebugstring (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.toDebugString"]], "totalnumnodes (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.totalNumNodes"]], "transform() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.transform"]], "treeweights (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.treeWeights"]], "trees (spark_rapids_ml.classification.randomforestclassificationmodel attribute)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.trees"]], "write() (spark_rapids_ml.classification.randomforestclassificationmodel method)": [[2, "spark_rapids_ml.classification.RandomForestClassificationModel.write"]], "randomforestclassifier (class in spark_rapids_ml.classification)": [[3, "spark_rapids_ml.classification.RandomForestClassifier"]], "bootstrap (spark_rapids_ml.classification.randomforestclassifier attribute)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.bootstrap"]], "clear() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.clear"]], "copy() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.copy"]], "cuml_params (spark_rapids_ml.classification.randomforestclassifier attribute)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.cuml_params"]], "explainparam() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.explainParam"]], "explainparams() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.explainParams"]], "extractparammap() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.extractParamMap"]], "featuresubsetstrategy (spark_rapids_ml.classification.randomforestclassifier attribute)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.featureSubsetStrategy"]], "featurescol (spark_rapids_ml.classification.randomforestclassifier attribute)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.featuresCol"]], "featurescols (spark_rapids_ml.classification.randomforestclassifier attribute)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.featuresCols"]], "fit() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.fit"]], "fitmultiple() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.fitMultiple"]], "getbootstrap() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.getBootstrap"]], "getfeaturesubsetstrategy() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.getFeatureSubsetStrategy"]], "getfeaturescol() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.getFeaturesCol"]], "getfeaturescols() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.getFeaturesCols"]], "getimpurity() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.getImpurity"]], "getlabelcol() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.getLabelCol"]], "getmaxbins() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.getMaxBins"]], "getmaxdepth() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.getMaxDepth"]], "getmininstancespernode() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.getMinInstancesPerNode"]], "getnumtrees() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.getNumTrees"]], "getordefault() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.getOrDefault"]], "getparam() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.getParam"]], "getprobabilitycol() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.getProbabilityCol"]], "getrawpredictioncol() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.getRawPredictionCol"]], "getseed() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.getSeed"]], "hasdefault() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.hasDefault"]], "hasparam() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.hasParam"]], "impurity (spark_rapids_ml.classification.randomforestclassifier attribute)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.impurity"]], "initialize_cuml_logging() (spark_rapids_ml.classification.randomforestclassifier static method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.initialize_cuml_logging"]], "initialize_cuml_params() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.initialize_cuml_params"]], "isdefined() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.isDefined"]], "isset() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.isSet"]], "labelcol (spark_rapids_ml.classification.randomforestclassifier attribute)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.labelCol"]], "load() (spark_rapids_ml.classification.randomforestclassifier class method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.load"]], "maxbins (spark_rapids_ml.classification.randomforestclassifier attribute)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.maxBins"]], "maxdepth (spark_rapids_ml.classification.randomforestclassifier attribute)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.maxDepth"]], "mininstancespernode (spark_rapids_ml.classification.randomforestclassifier attribute)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.minInstancesPerNode"]], "numtrees (spark_rapids_ml.classification.randomforestclassifier attribute)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.numTrees"]], "num_workers (spark_rapids_ml.classification.randomforestclassifier attribute)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.num_workers"]], "params (spark_rapids_ml.classification.randomforestclassifier attribute)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.params"]], "probabilitycol (spark_rapids_ml.classification.randomforestclassifier attribute)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.probabilityCol"]], "rawpredictioncol (spark_rapids_ml.classification.randomforestclassifier attribute)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.rawPredictionCol"]], "read() (spark_rapids_ml.classification.randomforestclassifier class method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.read"]], "save() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.save"]], "seed (spark_rapids_ml.classification.randomforestclassifier attribute)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.seed"]], "set() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.set"]], "setbootstrap() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.setBootstrap"]], "setfeaturesubsetstrategy() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.setFeatureSubsetStrategy"]], "setfeaturescol() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.setFeaturesCol"]], "setfeaturescols() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.setFeaturesCols"]], "setimpurity() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.setImpurity"]], "setlabelcol() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.setLabelCol"]], "setmaxbins() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.setMaxBins"]], "setmaxdepth() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.setMaxDepth"]], "setmininstancespernode() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.setMinInstancesPerNode"]], "setnumtrees() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.setNumTrees"]], "setpredictioncol() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.setPredictionCol"]], "setprobabilitycol() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.setProbabilityCol"]], "setrawpredictioncol() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.setRawPredictionCol"]], "setseed() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.setSeed"]], "set_gpu_device() (spark_rapids_ml.classification.randomforestclassifier static method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.set_gpu_device"]], "set_params() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.set_params"]], "supportedfeaturesubsetstrategies (spark_rapids_ml.classification.randomforestclassifier attribute)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.supportedFeatureSubsetStrategies"]], "supportedimpurities (spark_rapids_ml.classification.randomforestclassifier attribute)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.supportedImpurities"]], "write() (spark_rapids_ml.classification.randomforestclassifier method)": [[3, "spark_rapids_ml.classification.RandomForestClassifier.write"]], "kmeans (class in spark_rapids_ml.clustering)": [[4, "spark_rapids_ml.clustering.KMeans"]], "clear() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.clear"]], "copy() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.copy"]], "cuml_params (spark_rapids_ml.clustering.kmeans attribute)": [[4, "spark_rapids_ml.clustering.KMeans.cuml_params"]], "explainparam() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.explainParam"]], "explainparams() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.explainParams"]], "extractparammap() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.extractParamMap"]], "featurescol (spark_rapids_ml.clustering.kmeans attribute)": [[4, "spark_rapids_ml.clustering.KMeans.featuresCol"]], "featurescols (spark_rapids_ml.clustering.kmeans attribute)": [[4, "spark_rapids_ml.clustering.KMeans.featuresCols"]], "fit() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.fit"]], "fitmultiple() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.fitMultiple"]], "getfeaturescol() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.getFeaturesCol"]], "getfeaturescols() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.getFeaturesCols"]], "getinitmode() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.getInitMode"]], "getk() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.getK"]], "getmaxblocksizeinmb() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.getMaxBlockSizeInMB"]], "getmaxiter() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.getMaxIter"]], "getordefault() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.getOrDefault"]], "getparam() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.getParam"]], "getpredictioncol() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.getPredictionCol"]], "getseed() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.getSeed"]], "getsolver() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.getSolver"]], "gettol() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.getTol"]], "hasdefault() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.hasDefault"]], "hasparam() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.hasParam"]], "initmode (spark_rapids_ml.clustering.kmeans attribute)": [[4, "spark_rapids_ml.clustering.KMeans.initMode"]], "initialize_cuml_logging() (spark_rapids_ml.clustering.kmeans static method)": [[4, "spark_rapids_ml.clustering.KMeans.initialize_cuml_logging"]], "initialize_cuml_params() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.initialize_cuml_params"]], "isdefined() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.isDefined"]], "isset() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.isSet"]], "k (spark_rapids_ml.clustering.kmeans attribute)": [[4, "spark_rapids_ml.clustering.KMeans.k"]], "load() (spark_rapids_ml.clustering.kmeans class method)": [[4, "spark_rapids_ml.clustering.KMeans.load"]], "maxblocksizeinmb (spark_rapids_ml.clustering.kmeans attribute)": [[4, "spark_rapids_ml.clustering.KMeans.maxBlockSizeInMB"]], "maxiter (spark_rapids_ml.clustering.kmeans attribute)": [[4, "spark_rapids_ml.clustering.KMeans.maxIter"]], "num_workers (spark_rapids_ml.clustering.kmeans attribute)": [[4, "spark_rapids_ml.clustering.KMeans.num_workers"]], "params (spark_rapids_ml.clustering.kmeans attribute)": [[4, "spark_rapids_ml.clustering.KMeans.params"]], "predictioncol (spark_rapids_ml.clustering.kmeans attribute)": [[4, "spark_rapids_ml.clustering.KMeans.predictionCol"]], "read() (spark_rapids_ml.clustering.kmeans class method)": [[4, "spark_rapids_ml.clustering.KMeans.read"]], "save() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.save"]], "seed (spark_rapids_ml.clustering.kmeans attribute)": [[4, "spark_rapids_ml.clustering.KMeans.seed"]], "set() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.set"]], "setfeaturescol() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.setFeaturesCol"]], "setfeaturescols() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.setFeaturesCols"]], "setk() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.setK"]], "setmaxiter() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.setMaxIter"]], "setpredictioncol() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.setPredictionCol"]], "setseed() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.setSeed"]], "settol() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.setTol"]], "set_gpu_device() (spark_rapids_ml.clustering.kmeans static method)": [[4, "spark_rapids_ml.clustering.KMeans.set_gpu_device"]], "set_params() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.set_params"]], "solver (spark_rapids_ml.clustering.kmeans attribute)": [[4, "spark_rapids_ml.clustering.KMeans.solver"]], "tol (spark_rapids_ml.clustering.kmeans attribute)": [[4, "spark_rapids_ml.clustering.KMeans.tol"]], "write() (spark_rapids_ml.clustering.kmeans method)": [[4, "spark_rapids_ml.clustering.KMeans.write"]], "kmeansmodel (class in spark_rapids_ml.clustering)": [[5, "spark_rapids_ml.clustering.KMeansModel"]], "clear() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.clear"]], "clustercenters() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.clusterCenters"]], "copy() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.copy"]], "cpu() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.cpu"]], "cuml_params (spark_rapids_ml.clustering.kmeansmodel attribute)": [[5, "spark_rapids_ml.clustering.KMeansModel.cuml_params"]], "explainparam() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.explainParam"]], "explainparams() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.explainParams"]], "extractparammap() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.extractParamMap"]], "featurescol (spark_rapids_ml.clustering.kmeansmodel attribute)": [[5, "spark_rapids_ml.clustering.KMeansModel.featuresCol"]], "featurescols (spark_rapids_ml.clustering.kmeansmodel attribute)": [[5, "spark_rapids_ml.clustering.KMeansModel.featuresCols"]], "from_row() (spark_rapids_ml.clustering.kmeansmodel class method)": [[5, "spark_rapids_ml.clustering.KMeansModel.from_row"]], "getfeaturescol() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.getFeaturesCol"]], "getfeaturescols() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.getFeaturesCols"]], "getinitmode() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.getInitMode"]], "getk() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.getK"]], "getmaxblocksizeinmb() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.getMaxBlockSizeInMB"]], "getmaxiter() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.getMaxIter"]], "getordefault() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.getOrDefault"]], "getparam() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.getParam"]], "getpredictioncol() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.getPredictionCol"]], "getseed() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.getSeed"]], "getsolver() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.getSolver"]], "gettol() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.getTol"]], "get_model_attributes() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.get_model_attributes"]], "hasdefault() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.hasDefault"]], "hasparam() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.hasParam"]], "hassummary (spark_rapids_ml.clustering.kmeansmodel attribute)": [[5, "spark_rapids_ml.clustering.KMeansModel.hasSummary"]], "initmode (spark_rapids_ml.clustering.kmeansmodel attribute)": [[5, "spark_rapids_ml.clustering.KMeansModel.initMode"]], "initialize_cuml_logging() (spark_rapids_ml.clustering.kmeansmodel static method)": [[5, "spark_rapids_ml.clustering.KMeansModel.initialize_cuml_logging"]], "initialize_cuml_params() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.initialize_cuml_params"]], "isdefined() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.isDefined"]], "isset() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.isSet"]], "k (spark_rapids_ml.clustering.kmeansmodel attribute)": [[5, "spark_rapids_ml.clustering.KMeansModel.k"]], "load() (spark_rapids_ml.clustering.kmeansmodel class method)": [[5, "spark_rapids_ml.clustering.KMeansModel.load"]], "maxblocksizeinmb (spark_rapids_ml.clustering.kmeansmodel attribute)": [[5, "spark_rapids_ml.clustering.KMeansModel.maxBlockSizeInMB"]], "maxiter (spark_rapids_ml.clustering.kmeansmodel attribute)": [[5, "spark_rapids_ml.clustering.KMeansModel.maxIter"]], "numfeatures (spark_rapids_ml.clustering.kmeansmodel attribute)": [[5, "spark_rapids_ml.clustering.KMeansModel.numFeatures"]], "num_workers (spark_rapids_ml.clustering.kmeansmodel attribute)": [[5, "spark_rapids_ml.clustering.KMeansModel.num_workers"]], "params (spark_rapids_ml.clustering.kmeansmodel attribute)": [[5, "spark_rapids_ml.clustering.KMeansModel.params"]], "predict() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.predict"]], "predictioncol (spark_rapids_ml.clustering.kmeansmodel attribute)": [[5, "spark_rapids_ml.clustering.KMeansModel.predictionCol"]], "read() (spark_rapids_ml.clustering.kmeansmodel class method)": [[5, "spark_rapids_ml.clustering.KMeansModel.read"]], "save() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.save"]], "seed (spark_rapids_ml.clustering.kmeansmodel attribute)": [[5, "spark_rapids_ml.clustering.KMeansModel.seed"]], "set() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.set"]], "setfeaturescol() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.setFeaturesCol"]], "setfeaturescols() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.setFeaturesCols"]], "setpredictioncol() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.setPredictionCol"]], "set_gpu_device() (spark_rapids_ml.clustering.kmeansmodel static method)": [[5, "spark_rapids_ml.clustering.KMeansModel.set_gpu_device"]], "set_params() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.set_params"]], "solver (spark_rapids_ml.clustering.kmeansmodel attribute)": [[5, "spark_rapids_ml.clustering.KMeansModel.solver"]], "tol (spark_rapids_ml.clustering.kmeansmodel attribute)": [[5, "spark_rapids_ml.clustering.KMeansModel.tol"]], "transform() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.transform"]], "write() (spark_rapids_ml.clustering.kmeansmodel method)": [[5, "spark_rapids_ml.clustering.KMeansModel.write"]], "nearestneighbors (class in spark_rapids_ml.knn)": [[6, "spark_rapids_ml.knn.NearestNeighbors"]], "clear() (spark_rapids_ml.knn.nearestneighbors method)": [[6, "spark_rapids_ml.knn.NearestNeighbors.clear"]], "copy() (spark_rapids_ml.knn.nearestneighbors method)": [[6, "spark_rapids_ml.knn.NearestNeighbors.copy"]], "cuml_params (spark_rapids_ml.knn.nearestneighbors attribute)": [[6, "spark_rapids_ml.knn.NearestNeighbors.cuml_params"]], "explainparam() (spark_rapids_ml.knn.nearestneighbors method)": [[6, "spark_rapids_ml.knn.NearestNeighbors.explainParam"]], "explainparams() (spark_rapids_ml.knn.nearestneighbors method)": [[6, "spark_rapids_ml.knn.NearestNeighbors.explainParams"]], "extractparammap() (spark_rapids_ml.knn.nearestneighbors method)": [[6, "spark_rapids_ml.knn.NearestNeighbors.extractParamMap"]], "fit() (spark_rapids_ml.knn.nearestneighbors method)": [[6, "spark_rapids_ml.knn.NearestNeighbors.fit"]], "fitmultiple() (spark_rapids_ml.knn.nearestneighbors method)": [[6, "spark_rapids_ml.knn.NearestNeighbors.fitMultiple"]], "getidcol() (spark_rapids_ml.knn.nearestneighbors method)": [[6, "spark_rapids_ml.knn.NearestNeighbors.getIdCol"]], "getinputcol() (spark_rapids_ml.knn.nearestneighbors method)": [[6, "spark_rapids_ml.knn.NearestNeighbors.getInputCol"]], "getinputcols() (spark_rapids_ml.knn.nearestneighbors method)": [[6, "spark_rapids_ml.knn.NearestNeighbors.getInputCols"]], "getlabelcol() (spark_rapids_ml.knn.nearestneighbors method)": [[6, "spark_rapids_ml.knn.NearestNeighbors.getLabelCol"]], "getordefault() (spark_rapids_ml.knn.nearestneighbors method)": [[6, "spark_rapids_ml.knn.NearestNeighbors.getOrDefault"]], "getparam() (spark_rapids_ml.knn.nearestneighbors method)": [[6, "spark_rapids_ml.knn.NearestNeighbors.getParam"]], "hasdefault() (spark_rapids_ml.knn.nearestneighbors method)": [[6, "spark_rapids_ml.knn.NearestNeighbors.hasDefault"]], "hasparam() (spark_rapids_ml.knn.nearestneighbors method)": [[6, "spark_rapids_ml.knn.NearestNeighbors.hasParam"]], "id_col (spark_rapids_ml.knn.nearestneighbors attribute)": [[6, "spark_rapids_ml.knn.NearestNeighbors.id_col"]], "initialize_cuml_logging() (spark_rapids_ml.knn.nearestneighbors static method)": [[6, "spark_rapids_ml.knn.NearestNeighbors.initialize_cuml_logging"]], "initialize_cuml_params() (spark_rapids_ml.knn.nearestneighbors method)": [[6, "spark_rapids_ml.knn.NearestNeighbors.initialize_cuml_params"]], "inputcol (spark_rapids_ml.knn.nearestneighbors attribute)": [[6, "spark_rapids_ml.knn.NearestNeighbors.inputCol"]], "inputcols (spark_rapids_ml.knn.nearestneighbors attribute)": [[6, "spark_rapids_ml.knn.NearestNeighbors.inputCols"]], "isdefined() (spark_rapids_ml.knn.nearestneighbors method)": [[6, "spark_rapids_ml.knn.NearestNeighbors.isDefined"]], "isset() (spark_rapids_ml.knn.nearestneighbors method)": [[6, "spark_rapids_ml.knn.NearestNeighbors.isSet"]], "k (spark_rapids_ml.knn.nearestneighbors attribute)": [[6, "spark_rapids_ml.knn.NearestNeighbors.k"]], "labelcol (spark_rapids_ml.knn.nearestneighbors attribute)": [[6, "spark_rapids_ml.knn.NearestNeighbors.labelCol"]], "load() (spark_rapids_ml.knn.nearestneighbors class method)": [[6, "spark_rapids_ml.knn.NearestNeighbors.load"]], "num_workers (spark_rapids_ml.knn.nearestneighbors attribute)": [[6, "spark_rapids_ml.knn.NearestNeighbors.num_workers"]], "params (spark_rapids_ml.knn.nearestneighbors attribute)": [[6, "spark_rapids_ml.knn.NearestNeighbors.params"]], "read() (spark_rapids_ml.knn.nearestneighbors class method)": [[6, "spark_rapids_ml.knn.NearestNeighbors.read"]], "save() (spark_rapids_ml.knn.nearestneighbors method)": [[6, "spark_rapids_ml.knn.NearestNeighbors.save"]], "set() (spark_rapids_ml.knn.nearestneighbors method)": [[6, "spark_rapids_ml.knn.NearestNeighbors.set"]], "setidcol() (spark_rapids_ml.knn.nearestneighbors method)": [[6, "spark_rapids_ml.knn.NearestNeighbors.setIdCol"]], "setinputcol() (spark_rapids_ml.knn.nearestneighbors method)": [[6, "spark_rapids_ml.knn.NearestNeighbors.setInputCol"]], "setinputcols() (spark_rapids_ml.knn.nearestneighbors method)": [[6, "spark_rapids_ml.knn.NearestNeighbors.setInputCols"]], "setk() (spark_rapids_ml.knn.nearestneighbors method)": [[6, "spark_rapids_ml.knn.NearestNeighbors.setK"]], "set_gpu_device() (spark_rapids_ml.knn.nearestneighbors static method)": [[6, "spark_rapids_ml.knn.NearestNeighbors.set_gpu_device"]], "set_params() (spark_rapids_ml.knn.nearestneighbors method)": [[6, "spark_rapids_ml.knn.NearestNeighbors.set_params"]], "write() (spark_rapids_ml.knn.nearestneighbors method)": [[6, "spark_rapids_ml.knn.NearestNeighbors.write"]], "nearestneighborsmodel (class in spark_rapids_ml.knn)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel"]], "clear() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.clear"]], "copy() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.copy"]], "cpu() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.cpu"]], "cuml_params (spark_rapids_ml.knn.nearestneighborsmodel attribute)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.cuml_params"]], "exactnearestneighborsjoin() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.exactNearestNeighborsJoin"]], "explainparam() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.explainParam"]], "explainparams() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.explainParams"]], "extractparammap() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.extractParamMap"]], "from_row() (spark_rapids_ml.knn.nearestneighborsmodel class method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.from_row"]], "getidcol() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.getIdCol"]], "getinputcol() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.getInputCol"]], "getinputcols() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.getInputCols"]], "getlabelcol() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.getLabelCol"]], "getordefault() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.getOrDefault"]], "getparam() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.getParam"]], "get_model_attributes() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.get_model_attributes"]], "hasdefault() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.hasDefault"]], "hasparam() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.hasParam"]], "id_col (spark_rapids_ml.knn.nearestneighborsmodel attribute)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.id_col"]], "initialize_cuml_logging() (spark_rapids_ml.knn.nearestneighborsmodel static method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.initialize_cuml_logging"]], "initialize_cuml_params() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.initialize_cuml_params"]], "inputcol (spark_rapids_ml.knn.nearestneighborsmodel attribute)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.inputCol"]], "inputcols (spark_rapids_ml.knn.nearestneighborsmodel attribute)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.inputCols"]], "isdefined() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.isDefined"]], "isset() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.isSet"]], "k (spark_rapids_ml.knn.nearestneighborsmodel attribute)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.k"]], "kneighbors() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.kneighbors"]], "labelcol (spark_rapids_ml.knn.nearestneighborsmodel attribute)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.labelCol"]], "load() (spark_rapids_ml.knn.nearestneighborsmodel class method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.load"]], "num_workers (spark_rapids_ml.knn.nearestneighborsmodel attribute)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.num_workers"]], "params (spark_rapids_ml.knn.nearestneighborsmodel attribute)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.params"]], "read() (spark_rapids_ml.knn.nearestneighborsmodel class method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.read"]], "save() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.save"]], "set() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.set"]], "setidcol() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.setIdCol"]], "setinputcol() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.setInputCol"]], "setinputcols() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.setInputCols"]], "setk() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.setK"]], "set_gpu_device() (spark_rapids_ml.knn.nearestneighborsmodel static method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.set_gpu_device"]], "set_params() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.set_params"]], "transform() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.transform"]], "write() (spark_rapids_ml.knn.nearestneighborsmodel method)": [[7, "spark_rapids_ml.knn.NearestNeighborsModel.write"]], "linearregression (class in spark_rapids_ml.regression)": [[8, "spark_rapids_ml.regression.LinearRegression"]], "clear() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.clear"]], "copy() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.copy"]], "cuml_params (spark_rapids_ml.regression.linearregression attribute)": [[8, "spark_rapids_ml.regression.LinearRegression.cuml_params"]], "elasticnetparam (spark_rapids_ml.regression.linearregression attribute)": [[8, "spark_rapids_ml.regression.LinearRegression.elasticNetParam"]], "explainparam() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.explainParam"]], "explainparams() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.explainParams"]], "extractparammap() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.extractParamMap"]], "featurescol (spark_rapids_ml.regression.linearregression attribute)": [[8, "spark_rapids_ml.regression.LinearRegression.featuresCol"]], "featurescols (spark_rapids_ml.regression.linearregression attribute)": [[8, "spark_rapids_ml.regression.LinearRegression.featuresCols"]], "fit() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.fit"]], "fitintercept (spark_rapids_ml.regression.linearregression attribute)": [[8, "spark_rapids_ml.regression.LinearRegression.fitIntercept"]], "fitmultiple() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.fitMultiple"]], "getelasticnetparam() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.getElasticNetParam"]], "getfeaturescol() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.getFeaturesCol"]], "getfeaturescols() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.getFeaturesCols"]], "getfitintercept() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.getFitIntercept"]], "getlabelcol() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.getLabelCol"]], "getloss() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.getLoss"]], "getmaxiter() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.getMaxIter"]], "getordefault() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.getOrDefault"]], "getparam() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.getParam"]], "getpredictioncol() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.getPredictionCol"]], "getregparam() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.getRegParam"]], "getsolver() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.getSolver"]], "getstandardization() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.getStandardization"]], "gettol() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.getTol"]], "hasdefault() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.hasDefault"]], "hasparam() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.hasParam"]], "initialize_cuml_logging() (spark_rapids_ml.regression.linearregression static method)": [[8, "spark_rapids_ml.regression.LinearRegression.initialize_cuml_logging"]], "initialize_cuml_params() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.initialize_cuml_params"]], "isdefined() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.isDefined"]], "isset() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.isSet"]], "labelcol (spark_rapids_ml.regression.linearregression attribute)": [[8, "spark_rapids_ml.regression.LinearRegression.labelCol"]], "load() (spark_rapids_ml.regression.linearregression class method)": [[8, "spark_rapids_ml.regression.LinearRegression.load"]], "loss (spark_rapids_ml.regression.linearregression attribute)": [[8, "spark_rapids_ml.regression.LinearRegression.loss"]], "maxiter (spark_rapids_ml.regression.linearregression attribute)": [[8, "spark_rapids_ml.regression.LinearRegression.maxIter"]], "num_workers (spark_rapids_ml.regression.linearregression attribute)": [[8, "spark_rapids_ml.regression.LinearRegression.num_workers"]], "params (spark_rapids_ml.regression.linearregression attribute)": [[8, "spark_rapids_ml.regression.LinearRegression.params"]], "predictioncol (spark_rapids_ml.regression.linearregression attribute)": [[8, "spark_rapids_ml.regression.LinearRegression.predictionCol"]], "read() (spark_rapids_ml.regression.linearregression class method)": [[8, "spark_rapids_ml.regression.LinearRegression.read"]], "regparam (spark_rapids_ml.regression.linearregression attribute)": [[8, "spark_rapids_ml.regression.LinearRegression.regParam"]], "save() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.save"]], "set() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.set"]], "setelasticnetparam() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.setElasticNetParam"]], "setfeaturescol() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.setFeaturesCol"]], "setfeaturescols() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.setFeaturesCols"]], "setlabelcol() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.setLabelCol"]], "setloss() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.setLoss"]], "setmaxiter() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.setMaxIter"]], "setpredictioncol() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.setPredictionCol"]], "setregparam() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.setRegParam"]], "setstandardization() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.setStandardization"]], "settol() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.setTol"]], "set_gpu_device() (spark_rapids_ml.regression.linearregression static method)": [[8, "spark_rapids_ml.regression.LinearRegression.set_gpu_device"]], "set_params() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.set_params"]], "solver (spark_rapids_ml.regression.linearregression attribute)": [[8, "spark_rapids_ml.regression.LinearRegression.solver"]], "standardization (spark_rapids_ml.regression.linearregression attribute)": [[8, "spark_rapids_ml.regression.LinearRegression.standardization"]], "tol (spark_rapids_ml.regression.linearregression attribute)": [[8, "spark_rapids_ml.regression.LinearRegression.tol"]], "write() (spark_rapids_ml.regression.linearregression method)": [[8, "spark_rapids_ml.regression.LinearRegression.write"]], "linearregressionmodel (class in spark_rapids_ml.regression)": [[9, "spark_rapids_ml.regression.LinearRegressionModel"]], "calculate_regression_metrics() (spark_rapids_ml.regression.linearregressionmodel static method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.calculate_regression_metrics"]], "clear() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.clear"]], "coefficients (spark_rapids_ml.regression.linearregressionmodel attribute)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.coefficients"]], "copy() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.copy"]], "cpu() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.cpu"]], "cuml_params (spark_rapids_ml.regression.linearregressionmodel attribute)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.cuml_params"]], "elasticnetparam (spark_rapids_ml.regression.linearregressionmodel attribute)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.elasticNetParam"]], "evaluate() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.evaluate"]], "explainparam() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.explainParam"]], "explainparams() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.explainParams"]], "extractparammap() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.extractParamMap"]], "featurescol (spark_rapids_ml.regression.linearregressionmodel attribute)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.featuresCol"]], "featurescols (spark_rapids_ml.regression.linearregressionmodel attribute)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.featuresCols"]], "fitintercept (spark_rapids_ml.regression.linearregressionmodel attribute)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.fitIntercept"]], "from_row() (spark_rapids_ml.regression.linearregressionmodel class method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.from_row"]], "getelasticnetparam() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.getElasticNetParam"]], "getfeaturescol() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.getFeaturesCol"]], "getfeaturescols() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.getFeaturesCols"]], "getfitintercept() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.getFitIntercept"]], "getlabelcol() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.getLabelCol"]], "getloss() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.getLoss"]], "getmaxiter() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.getMaxIter"]], "getordefault() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.getOrDefault"]], "getparam() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.getParam"]], "getpredictioncol() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.getPredictionCol"]], "getregparam() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.getRegParam"]], "getsolver() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.getSolver"]], "getstandardization() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.getStandardization"]], "gettol() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.getTol"]], "get_model_attributes() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.get_model_attributes"]], "hasdefault() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.hasDefault"]], "hasparam() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.hasParam"]], "hassummary (spark_rapids_ml.regression.linearregressionmodel attribute)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.hasSummary"]], "initialize_cuml_logging() (spark_rapids_ml.regression.linearregressionmodel static method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.initialize_cuml_logging"]], "initialize_cuml_params() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.initialize_cuml_params"]], "intercept (spark_rapids_ml.regression.linearregressionmodel attribute)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.intercept"]], "isdefined() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.isDefined"]], "isset() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.isSet"]], "labelcol (spark_rapids_ml.regression.linearregressionmodel attribute)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.labelCol"]], "load() (spark_rapids_ml.regression.linearregressionmodel class method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.load"]], "loss (spark_rapids_ml.regression.linearregressionmodel attribute)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.loss"]], "maxiter (spark_rapids_ml.regression.linearregressionmodel attribute)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.maxIter"]], "numfeatures (spark_rapids_ml.regression.linearregressionmodel attribute)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.numFeatures"]], "num_workers (spark_rapids_ml.regression.linearregressionmodel attribute)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.num_workers"]], "params (spark_rapids_ml.regression.linearregressionmodel attribute)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.params"]], "predict() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.predict"]], "predictioncol (spark_rapids_ml.regression.linearregressionmodel attribute)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.predictionCol"]], "read() (spark_rapids_ml.regression.linearregressionmodel class method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.read"]], "regparam (spark_rapids_ml.regression.linearregressionmodel attribute)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.regParam"]], "save() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.save"]], "scale (spark_rapids_ml.regression.linearregressionmodel attribute)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.scale"]], "set() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.set"]], "setfeaturescol() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.setFeaturesCol"]], "setfeaturescols() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.setFeaturesCols"]], "setlabelcol() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.setLabelCol"]], "setpredictioncol() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.setPredictionCol"]], "set_gpu_device() (spark_rapids_ml.regression.linearregressionmodel static method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.set_gpu_device"]], "set_params() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.set_params"]], "solver (spark_rapids_ml.regression.linearregressionmodel attribute)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.solver"]], "standardization (spark_rapids_ml.regression.linearregressionmodel attribute)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.standardization"]], "tol (spark_rapids_ml.regression.linearregressionmodel attribute)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.tol"]], "transform() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.transform"]], "write() (spark_rapids_ml.regression.linearregressionmodel method)": [[9, "spark_rapids_ml.regression.LinearRegressionModel.write"]], "randomforestregressionmodel (class in spark_rapids_ml.regression)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel"]], "bootstrap (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.bootstrap"]], "calculate_regression_metrics() (spark_rapids_ml.regression.randomforestregressionmodel static method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.calculate_regression_metrics"]], "clear() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.clear"]], "copy() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.copy"]], "cpu() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.cpu"]], "cuml_params (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.cuml_params"]], "explainparam() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.explainParam"]], "explainparams() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.explainParams"]], "extractparammap() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.extractParamMap"]], "featureimportances (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.featureImportances"]], "featuresubsetstrategy (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.featureSubsetStrategy"]], "featurescol (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.featuresCol"]], "featurescols (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.featuresCols"]], "from_row() (spark_rapids_ml.regression.randomforestregressionmodel class method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.from_row"]], "getbootstrap() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.getBootstrap"]], "getfeaturesubsetstrategy() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.getFeatureSubsetStrategy"]], "getfeaturescol() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.getFeaturesCol"]], "getfeaturescols() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.getFeaturesCols"]], "getimpurity() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.getImpurity"]], "getlabelcol() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.getLabelCol"]], "getmaxbins() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.getMaxBins"]], "getmaxdepth() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.getMaxDepth"]], "getmininstancespernode() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.getMinInstancesPerNode"]], "getnumtrees (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.getNumTrees"]], "getordefault() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.getOrDefault"]], "getparam() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.getParam"]], "getpredictioncol() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.getPredictionCol"]], "getseed() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.getSeed"]], "get_model_attributes() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.get_model_attributes"]], "hasdefault() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.hasDefault"]], "hasparam() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.hasParam"]], "impurity (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.impurity"]], "initialize_cuml_logging() (spark_rapids_ml.regression.randomforestregressionmodel static method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.initialize_cuml_logging"]], "initialize_cuml_params() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.initialize_cuml_params"]], "isdefined() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.isDefined"]], "isset() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.isSet"]], "labelcol (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.labelCol"]], "load() (spark_rapids_ml.regression.randomforestregressionmodel class method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.load"]], "maxbins (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.maxBins"]], "maxdepth (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.maxDepth"]], "mininstancespernode (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.minInstancesPerNode"]], "numfeatures (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.numFeatures"]], "numtrees (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.numTrees"]], "num_workers (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.num_workers"]], "params (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.params"]], "predict() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.predict"]], "predictleaf() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.predictLeaf"]], "predictioncol (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.predictionCol"]], "read() (spark_rapids_ml.regression.randomforestregressionmodel class method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.read"]], "save() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.save"]], "seed (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.seed"]], "set() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.set"]], "setfeaturescol() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.setFeaturesCol"]], "setfeaturescols() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.setFeaturesCols"]], "setlabelcol() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.setLabelCol"]], "setpredictioncol() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.setPredictionCol"]], "set_gpu_device() (spark_rapids_ml.regression.randomforestregressionmodel static method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.set_gpu_device"]], "set_params() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.set_params"]], "supportedfeaturesubsetstrategies (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.supportedFeatureSubsetStrategies"]], "supportedimpurities (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.supportedImpurities"]], "todebugstring (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.toDebugString"]], "totalnumnodes (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.totalNumNodes"]], "transform() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.transform"]], "treeweights (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.treeWeights"]], "trees (spark_rapids_ml.regression.randomforestregressionmodel attribute)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.trees"]], "write() (spark_rapids_ml.regression.randomforestregressionmodel method)": [[10, "spark_rapids_ml.regression.RandomForestRegressionModel.write"]], "randomforestregressor (class in spark_rapids_ml.regression)": [[11, "spark_rapids_ml.regression.RandomForestRegressor"]], "bootstrap (spark_rapids_ml.regression.randomforestregressor attribute)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.bootstrap"]], "clear() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.clear"]], "copy() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.copy"]], "cuml_params (spark_rapids_ml.regression.randomforestregressor attribute)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.cuml_params"]], "explainparam() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.explainParam"]], "explainparams() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.explainParams"]], "extractparammap() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.extractParamMap"]], "featuresubsetstrategy (spark_rapids_ml.regression.randomforestregressor attribute)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.featureSubsetStrategy"]], "featurescol (spark_rapids_ml.regression.randomforestregressor attribute)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.featuresCol"]], "featurescols (spark_rapids_ml.regression.randomforestregressor attribute)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.featuresCols"]], "fit() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.fit"]], "fitmultiple() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.fitMultiple"]], "getbootstrap() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.getBootstrap"]], "getfeaturesubsetstrategy() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.getFeatureSubsetStrategy"]], "getfeaturescol() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.getFeaturesCol"]], "getfeaturescols() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.getFeaturesCols"]], "getimpurity() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.getImpurity"]], "getlabelcol() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.getLabelCol"]], "getmaxbins() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.getMaxBins"]], "getmaxdepth() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.getMaxDepth"]], "getmininstancespernode() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.getMinInstancesPerNode"]], "getnumtrees() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.getNumTrees"]], "getordefault() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.getOrDefault"]], "getparam() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.getParam"]], "getseed() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.getSeed"]], "hasdefault() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.hasDefault"]], "hasparam() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.hasParam"]], "impurity (spark_rapids_ml.regression.randomforestregressor attribute)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.impurity"]], "initialize_cuml_logging() (spark_rapids_ml.regression.randomforestregressor static method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.initialize_cuml_logging"]], "initialize_cuml_params() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.initialize_cuml_params"]], "isdefined() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.isDefined"]], "isset() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.isSet"]], "labelcol (spark_rapids_ml.regression.randomforestregressor attribute)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.labelCol"]], "load() (spark_rapids_ml.regression.randomforestregressor class method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.load"]], "maxbins (spark_rapids_ml.regression.randomforestregressor attribute)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.maxBins"]], "maxdepth (spark_rapids_ml.regression.randomforestregressor attribute)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.maxDepth"]], "mininstancespernode (spark_rapids_ml.regression.randomforestregressor attribute)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.minInstancesPerNode"]], "numtrees (spark_rapids_ml.regression.randomforestregressor attribute)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.numTrees"]], "num_workers (spark_rapids_ml.regression.randomforestregressor attribute)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.num_workers"]], "params (spark_rapids_ml.regression.randomforestregressor attribute)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.params"]], "read() (spark_rapids_ml.regression.randomforestregressor class method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.read"]], "save() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.save"]], "seed (spark_rapids_ml.regression.randomforestregressor attribute)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.seed"]], "set() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.set"]], "setbootstrap() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.setBootstrap"]], "setfeaturesubsetstrategy() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.setFeatureSubsetStrategy"]], "setfeaturescol() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.setFeaturesCol"]], "setfeaturescols() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.setFeaturesCols"]], "setimpurity() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.setImpurity"]], "setlabelcol() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.setLabelCol"]], "setmaxbins() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.setMaxBins"]], "setmaxdepth() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.setMaxDepth"]], "setmininstancespernode() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.setMinInstancesPerNode"]], "setnumtrees() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.setNumTrees"]], "setpredictioncol() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.setPredictionCol"]], "setseed() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.setSeed"]], "set_gpu_device() (spark_rapids_ml.regression.randomforestregressor static method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.set_gpu_device"]], "set_params() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.set_params"]], "supportedfeaturesubsetstrategies (spark_rapids_ml.regression.randomforestregressor attribute)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.supportedFeatureSubsetStrategies"]], "supportedimpurities (spark_rapids_ml.regression.randomforestregressor attribute)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.supportedImpurities"]], "write() (spark_rapids_ml.regression.randomforestregressor method)": [[11, "spark_rapids_ml.regression.RandomForestRegressor.write"]], "crossvalidator (class in spark_rapids_ml.tuning)": [[12, "spark_rapids_ml.tuning.CrossValidator"]], "clear() (spark_rapids_ml.tuning.crossvalidator method)": [[12, "spark_rapids_ml.tuning.CrossValidator.clear"]], "collectsubmodels (spark_rapids_ml.tuning.crossvalidator attribute)": [[12, "spark_rapids_ml.tuning.CrossValidator.collectSubModels"]], "copy() (spark_rapids_ml.tuning.crossvalidator method)": [[12, "spark_rapids_ml.tuning.CrossValidator.copy"]], "estimator (spark_rapids_ml.tuning.crossvalidator attribute)": [[12, "spark_rapids_ml.tuning.CrossValidator.estimator"]], "estimatorparammaps (spark_rapids_ml.tuning.crossvalidator attribute)": [[12, "spark_rapids_ml.tuning.CrossValidator.estimatorParamMaps"]], "evaluator (spark_rapids_ml.tuning.crossvalidator attribute)": [[12, "spark_rapids_ml.tuning.CrossValidator.evaluator"]], "explainparam() (spark_rapids_ml.tuning.crossvalidator method)": [[12, "spark_rapids_ml.tuning.CrossValidator.explainParam"]], "explainparams() (spark_rapids_ml.tuning.crossvalidator method)": [[12, "spark_rapids_ml.tuning.CrossValidator.explainParams"]], "extractparammap() (spark_rapids_ml.tuning.crossvalidator method)": [[12, "spark_rapids_ml.tuning.CrossValidator.extractParamMap"]], "fit() (spark_rapids_ml.tuning.crossvalidator method)": [[12, "spark_rapids_ml.tuning.CrossValidator.fit"]], "fitmultiple() (spark_rapids_ml.tuning.crossvalidator method)": [[12, "spark_rapids_ml.tuning.CrossValidator.fitMultiple"]], "foldcol (spark_rapids_ml.tuning.crossvalidator attribute)": [[12, "spark_rapids_ml.tuning.CrossValidator.foldCol"]], "getcollectsubmodels() (spark_rapids_ml.tuning.crossvalidator method)": [[12, "spark_rapids_ml.tuning.CrossValidator.getCollectSubModels"]], "getestimator() (spark_rapids_ml.tuning.crossvalidator method)": [[12, "spark_rapids_ml.tuning.CrossValidator.getEstimator"]], "getestimatorparammaps() (spark_rapids_ml.tuning.crossvalidator method)": [[12, "spark_rapids_ml.tuning.CrossValidator.getEstimatorParamMaps"]], "getevaluator() (spark_rapids_ml.tuning.crossvalidator method)": [[12, "spark_rapids_ml.tuning.CrossValidator.getEvaluator"]], "getfoldcol() (spark_rapids_ml.tuning.crossvalidator method)": [[12, "spark_rapids_ml.tuning.CrossValidator.getFoldCol"]], "getnumfolds() (spark_rapids_ml.tuning.crossvalidator method)": [[12, "spark_rapids_ml.tuning.CrossValidator.getNumFolds"]], "getordefault() (spark_rapids_ml.tuning.crossvalidator method)": [[12, "spark_rapids_ml.tuning.CrossValidator.getOrDefault"]], "getparallelism() (spark_rapids_ml.tuning.crossvalidator method)": [[12, "spark_rapids_ml.tuning.CrossValidator.getParallelism"]], "getparam() (spark_rapids_ml.tuning.crossvalidator method)": [[12, "spark_rapids_ml.tuning.CrossValidator.getParam"]], "getseed() (spark_rapids_ml.tuning.crossvalidator method)": [[12, "spark_rapids_ml.tuning.CrossValidator.getSeed"]], "hasdefault() (spark_rapids_ml.tuning.crossvalidator method)": [[12, "spark_rapids_ml.tuning.CrossValidator.hasDefault"]], "hasparam() (spark_rapids_ml.tuning.crossvalidator method)": [[12, "spark_rapids_ml.tuning.CrossValidator.hasParam"]], "isdefined() (spark_rapids_ml.tuning.crossvalidator method)": [[12, "spark_rapids_ml.tuning.CrossValidator.isDefined"]], "isset() (spark_rapids_ml.tuning.crossvalidator method)": [[12, "spark_rapids_ml.tuning.CrossValidator.isSet"]], "load() (spark_rapids_ml.tuning.crossvalidator class method)": [[12, "spark_rapids_ml.tuning.CrossValidator.load"]], "numfolds (spark_rapids_ml.tuning.crossvalidator attribute)": [[12, "spark_rapids_ml.tuning.CrossValidator.numFolds"]], "parallelism (spark_rapids_ml.tuning.crossvalidator attribute)": [[12, "spark_rapids_ml.tuning.CrossValidator.parallelism"]], "params (spark_rapids_ml.tuning.crossvalidator attribute)": [[12, "spark_rapids_ml.tuning.CrossValidator.params"]], "read() (spark_rapids_ml.tuning.crossvalidator class method)": [[12, "spark_rapids_ml.tuning.CrossValidator.read"]], "save() (spark_rapids_ml.tuning.crossvalidator method)": [[12, "spark_rapids_ml.tuning.CrossValidator.save"]], "seed (spark_rapids_ml.tuning.crossvalidator attribute)": [[12, "spark_rapids_ml.tuning.CrossValidator.seed"]], "set() (spark_rapids_ml.tuning.crossvalidator method)": [[12, "spark_rapids_ml.tuning.CrossValidator.set"]], "setcollectsubmodels() (spark_rapids_ml.tuning.crossvalidator method)": [[12, "spark_rapids_ml.tuning.CrossValidator.setCollectSubModels"]], "setestimator() (spark_rapids_ml.tuning.crossvalidator method)": [[12, "spark_rapids_ml.tuning.CrossValidator.setEstimator"]], "setestimatorparammaps() (spark_rapids_ml.tuning.crossvalidator method)": [[12, "spark_rapids_ml.tuning.CrossValidator.setEstimatorParamMaps"]], "setevaluator() (spark_rapids_ml.tuning.crossvalidator method)": [[12, "spark_rapids_ml.tuning.CrossValidator.setEvaluator"]], "setfoldcol() (spark_rapids_ml.tuning.crossvalidator method)": [[12, "spark_rapids_ml.tuning.CrossValidator.setFoldCol"]], "setnumfolds() (spark_rapids_ml.tuning.crossvalidator method)": [[12, "spark_rapids_ml.tuning.CrossValidator.setNumFolds"]], "setparallelism() (spark_rapids_ml.tuning.crossvalidator method)": [[12, "spark_rapids_ml.tuning.CrossValidator.setParallelism"]], "setparams() (spark_rapids_ml.tuning.crossvalidator method)": [[12, "spark_rapids_ml.tuning.CrossValidator.setParams"]], "setseed() (spark_rapids_ml.tuning.crossvalidator method)": [[12, "spark_rapids_ml.tuning.CrossValidator.setSeed"]], "write() (spark_rapids_ml.tuning.crossvalidator method)": [[12, "spark_rapids_ml.tuning.CrossValidator.write"]]}})